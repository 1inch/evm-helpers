{
  "address": "0xbAF9A5d4b0052359326A6CDAb54BABAa3a3A9643",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRamsesV2",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tickRange",
          "type": "int24"
        }
      ],
      "name": "getTicks",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "ticks",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd0987f69abcd4c60c5677015d897c4b9823b00655663946992b91069e7bf5e69",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0xbAF9A5d4b0052359326A6CDAb54BABAa3a3A9643",
    "transactionIndex": 9,
    "gasUsed": "693537",
    "logsBloom": "0x
    "blockHash": "0x4f20eefe772d67380a03912d50aee771ce3619105a135b364431967eeaf22ad8",
    "transactionHash": "0xd0987f69abcd4c60c5677015d897c4b9823b00655663946992b91069e7bf5e69",
    "logs": [],
    "blockNumber": 40479071,
    "cumulativeGasUsed": "1360450",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8efea3a85580ac571899f794c7b435a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRamsesV2\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickRange\",\"type\":\"int24\"}],\"name\":\"getTicks\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"ticks\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Helper contract to interact with Uniswap V3 pool contracts.\",\"kind\":\"dev\",\"methods\":{\"getTicks(address,int24)\":{\"details\":\"The function returns an array of bytes each containing packed data about each tick in the specified range. The returned tick data includes the total liquidity, liquidity delta, outer fee growth for the two tokens, and the tick value itself. The tick range is centered around the current tick of the pool and spans tickRange*2. The tick range is constrained by the global min and max tick values. If there are no initialized ticks in the range, the function returns an empty array.\",\"params\":{\"pool\":\"The Uniswap V3 pool from which to fetch tick data.\",\"tickRange\":\"The range (either side of the current tick) within which to fetch tick data.\"},\"returns\":{\"ticks\":\"An array of bytes each containing packed data about each tick in the specified range.\"}}},\"title\":\"RamsesHelper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTicks(address,int24)\":{\"notice\":\"Fetches tick data for a specified range from a Uniswap V3 pool.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RamsesHelper.sol\":\"RamsesHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"},\"contracts/RamsesHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"@uniswap/v3-core/contracts/libraries/BitMath.sol\\\";\\nimport \\\"./interfaces/IRamsesV2.sol\\\";\\n\\n/// @title RamsesHelper\\n/// @dev Helper contract to interact with Uniswap V3 pool contracts.\\ncontract RamsesHelper {\\n    int24 private constant _MIN_TICK = -887272;\\n    int24 private constant _MAX_TICK = -_MIN_TICK;\\n\\n    /**\\n     * @notice Fetches tick data for a specified range from a Uniswap V3 pool.\\n     * @dev The function returns an array of bytes each containing packed data about each tick in the specified range.\\n     * The returned tick data includes the total liquidity, liquidity delta, outer fee growth for the two tokens, and\\n     * the tick value itself. The tick range is centered around the current tick of the pool and spans tickRange*2.\\n     * The tick range is constrained by the global min and max tick values.\\n     * If there are no initialized ticks in the range, the function returns an empty array.\\n     * @param pool The Uniswap V3 pool from which to fetch tick data.\\n     * @param tickRange The range (either side of the current tick) within which to fetch tick data.\\n     * @return ticks An array of bytes each containing packed data about each tick in the specified range.\\n     */\\n    function getTicks(IRamsesV2 pool, int24 tickRange) external view returns (bytes[] memory ticks) {\\n        int24 tickSpacing = pool.tickSpacing();\\n        (,int24 tick) = pool.slot0();\\n\\n        tickRange *= tickSpacing;\\n        int24 fromTick = tick - tickRange;\\n        int24 toTick = tick + tickRange;\\n        if (fromTick < _MIN_TICK) {\\n            fromTick = _MIN_TICK;\\n        }\\n        if (toTick > _MAX_TICK) {\\n            toTick = _MAX_TICK;\\n        }\\n\\n        int24[] memory initTicks = new int24[](uint256(int256((toTick - fromTick + 1) / tickSpacing)));\\n\\n        uint256 counter = 0;\\n        int16 pos = int16((fromTick / tickSpacing) >> 8);\\n        int16 endPos = int16((toTick / tickSpacing) >> 8);\\n        for (; pos <= endPos; pos++) {\\n            uint256 bm = pool.tickBitmap(pos);\\n\\n            while (bm != 0) {\\n                uint8 bit = BitMath.leastSignificantBit(bm);\\n                bm ^= 1 << bit;\\n                int24 extractedTick = ((int24(pos) << 8) | int24(uint24(bit))) * tickSpacing;\\n                if (extractedTick >= fromTick && extractedTick <= toTick) {\\n                    initTicks[counter++] = extractedTick;\\n                }\\n            }\\n        }\\n\\n        ticks = new bytes[](counter);\\n        for (uint256 i = 0; i < counter; i++) {\\n            (uint128 liquidityGross, int128 liquidityNet) = pool.ticks(initTicks[i]);\\n            ticks[i] = abi.encodePacked(liquidityGross, liquidityNet, uint256(0), uint256(0), initTicks[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x748718346f6e92f3c6533c7a81e97a13e19c73f6fbe93c9680c88274c8a4754d\",\"license\":\"MIT\"},\"contracts/interfaces/IRamsesV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\n\\ninterface IRamsesV2 {\\n    function tickSpacing() external view returns (int24);\\n\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick\\n            // the rest is ignored\\n        );\\n\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet\\n            // the rest is ignored\\n        );\\n\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4a3643ddfaaf9369975a62f3d47c2ff1457eb5059227d25e3a8cddb66aaad411\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610ba0908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c63c078e90c1461002857600080fd5b346106795760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610679576004359073ffffffffffffffffffffffffffffffffffffffff808316830361067957602435918260020b8303610679577fd0c93a7c0000000000000000000000000000000000000000000000000000000081526020816004818588165afa908115610686576000916109a9575b50604051927f3850c7bd0000000000000000000000000000000000000000000000000000000084526040846004818689165afa9384156106865760009461095b575b508161011191610a32565b9261011c8482610a49565b9360020b9060020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000627fffff8183128184131761029f57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618808860020b12610953575b50620d89e8809160020b1361094b575b50600161019f8785610a49565b60020b019182129082131761029f57826101b891610a83565b60020b917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06101ff6101e985610b0f565b946101f760405196876109e3565b808652610b0f565b013660208501376000936102138287610a83565b60020b60081d60010b966102278385610a83565b60020b60081d60010b975b8060010b89811361069257604051907f5339c29600000000000000000000000000000000000000000000000000000000825260048201526020816024818787165afa9081156106865760009161064f575b50805b6102ce575060010b617fff811461029f57600101610232565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8060ff6fffffffffffffffffffffffffffffffff8216156106435750607f5b67ffffffffffffffff8216156106395760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0818316011161029f5760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0015b63ffffffff82161561062f5760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818316011161029f5760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015b61ffff8216156106255760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0818316011161029f5760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0015b60ff82161561061b5760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8818316011161029f5760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8015b600f8216156106115760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc818316011161029f5760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc015b866003831615610604575060ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe818316011161029f5760017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff89931601925b166105ac575b60ff6105459216926001841b189260020b8460081b60020b17610a32565b60020b8960020b8112158061059f575b610561575b5080610286565b88907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821461029f5761059960018493019a8a610b27565b5261055a565b508660020b811315610555565b5060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818316011161029f5760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0185610527565b909160019060021c610521565b9060041c906104bf565b9060081c90610464565b9060101c90610409565b9060201c906103ad565b9060401c9061034f565b90508160801c906102ed565b90506020813d60201161067e575b8161066a602093836109e3565b81010312610679575138610283565b600080fd5b3d915061065d565b6040513d6000823e3d90fd5b8288888661069f83610b0f565b936106ad60405195866109e3565b8385527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06106da85610b0f565b0160005b81811061093a57505060005b8481106107c0578560405160208101916020825280518093526040820192602060408260051b8501019201906000945b8186106107275784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0858203018252835180519081835260005b8281106107ab575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85600085809860019a010152011601019501920195019491909161071a565b8060208092840101518282870101520161075c565b6107ca8185610b27565b5160020b90604051917ff30dba9300000000000000000000000000000000000000000000000000000000835260048301526040826024818787165afa918215610686576000906000936108dd575b506108238287610b27565b51604051937fffffffffffffffffffffffffffffffff00000000000000000000000000000000608093841b166020860152821b6030850152600060408501526000606085015260e81b908301526063825260a082019180831067ffffffffffffffff8411176108ae5760019260405261089c8289610b27565b526108a78188610b27565b50016106ea565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9250506040823d604011610932575b816108f9604093836109e3565b81010312610679578151916fffffffffffffffffffffffffffffffff8316830361067957602001519182600f0b83036106795788610818565b3d91506108ec565b806060602080938a010152016106de565b925038610192565b965038610182565b9093506040813d6040116109a1575b81610977604093836109e3565b8101031261067957805183811603610679578161099960206101119301610a24565b949150610106565b3d915061096a565b90506020813d6020116109db575b816109c4602093836109e3565b81010312610679576109d590610a24565b386100c4565b3d91506109b7565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176108ae57604052565b51908160020b820361067957565b9060020b9060020b02908160020b91820361029f57565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083121761029f57565b60020b9060020b908115610ae0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000082141661029f570590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b67ffffffffffffffff81116108ae5760051b60200190565b8051821015610b3b5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122002069bc7d022cfa064d69ee2fe41831bfdb67c88434947fe44700aa0102b470564736f6c63430008170033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c63c078e90c1461002857600080fd5b346106795760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610679576004359073ffffffffffffffffffffffffffffffffffffffff808316830361067957602435918260020b8303610679577fd0c93a7c0000000000000000000000000000000000000000000000000000000081526020816004818588165afa908115610686576000916109a9575b50604051927f3850c7bd0000000000000000000000000000000000000000000000000000000084526040846004818689165afa9384156106865760009461095b575b508161011191610a32565b9261011c8482610a49565b9360020b9060020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000627fffff8183128184131761029f57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618808860020b12610953575b50620d89e8809160020b1361094b575b50600161019f8785610a49565b60020b019182129082131761029f57826101b891610a83565b60020b917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06101ff6101e985610b0f565b946101f760405196876109e3565b808652610b0f565b013660208501376000936102138287610a83565b60020b60081d60010b966102278385610a83565b60020b60081d60010b975b8060010b89811361069257604051907f5339c29600000000000000000000000000000000000000000000000000000000825260048201526020816024818787165afa9081156106865760009161064f575b50805b6102ce575060010b617fff811461029f57600101610232565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8060ff6fffffffffffffffffffffffffffffffff8216156106435750607f5b67ffffffffffffffff8216156106395760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0818316011161029f5760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0015b63ffffffff82161561062f5760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818316011161029f5760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015b61ffff8216156106255760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0818316011161029f5760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0015b60ff82161561061b5760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8818316011161029f5760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8015b600f8216156106115760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc818316011161029f5760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc015b866003831615610604575060ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe818316011161029f5760017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff89931601925b166105ac575b60ff6105459216926001841b189260020b8460081b60020b17610a32565b60020b8960020b8112158061059f575b610561575b5080610286565b88907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821461029f5761059960018493019a8a610b27565b5261055a565b508660020b811315610555565b5060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818316011161029f5760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0185610527565b909160019060021c610521565b9060041c906104bf565b9060081c90610464565b9060101c90610409565b9060201c906103ad565b9060401c9061034f565b90508160801c906102ed565b90506020813d60201161067e575b8161066a602093836109e3565b81010312610679575138610283565b600080fd5b3d915061065d565b6040513d6000823e3d90fd5b8288888661069f83610b0f565b936106ad60405195866109e3565b8385527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06106da85610b0f565b0160005b81811061093a57505060005b8481106107c0578560405160208101916020825280518093526040820192602060408260051b8501019201906000945b8186106107275784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0858203018252835180519081835260005b8281106107ab575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85600085809860019a010152011601019501920195019491909161071a565b8060208092840101518282870101520161075c565b6107ca8185610b27565b5160020b90604051917ff30dba9300000000000000000000000000000000000000000000000000000000835260048301526040826024818787165afa918215610686576000906000936108dd575b506108238287610b27565b51604051937fffffffffffffffffffffffffffffffff00000000000000000000000000000000608093841b166020860152821b6030850152600060408501526000606085015260e81b908301526063825260a082019180831067ffffffffffffffff8411176108ae5760019260405261089c8289610b27565b526108a78188610b27565b50016106ea565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9250506040823d604011610932575b816108f9604093836109e3565b81010312610679578151916fffffffffffffffffffffffffffffffff8316830361067957602001519182600f0b83036106795788610818565b3d91506108ec565b806060602080938a010152016106de565b925038610192565b965038610182565b9093506040813d6040116109a1575b81610977604093836109e3565b8101031261067957805183811603610679578161099960206101119301610a24565b949150610106565b3d915061096a565b90506020813d6020116109db575b816109c4602093836109e3565b81010312610679576109d590610a24565b386100c4565b3d91506109b7565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176108ae57604052565b51908160020b820361067957565b9060020b9060020b02908160020b91820361029f57565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083121761029f57565b60020b9060020b908115610ae0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000082141661029f570590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b67ffffffffffffffff81116108ae5760051b60200190565b8051821015610b3b5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122002069bc7d022cfa064d69ee2fe41831bfdb67c88434947fe44700aa0102b470564736f6c63430008170033",
  "devdoc": {
    "details": "Helper contract to interact with Uniswap V3 pool contracts.",
    "kind": "dev",
    "methods": {
      "getTicks(address,int24)": {
        "details": "The function returns an array of bytes each containing packed data about each tick in the specified range. The returned tick data includes the total liquidity, liquidity delta, outer fee growth for the two tokens, and the tick value itself. The tick range is centered around the current tick of the pool and spans tickRange*2. The tick range is constrained by the global min and max tick values. If there are no initialized ticks in the range, the function returns an empty array.",
        "params": {
          "pool": "The Uniswap V3 pool from which to fetch tick data.",
          "tickRange": "The range (either side of the current tick) within which to fetch tick data."
        },
        "returns": {
          "ticks": "An array of bytes each containing packed data about each tick in the specified range."
        }
      }
    },
    "title": "RamsesHelper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTicks(address,int24)": {
        "notice": "Fetches tick data for a specified range from a Uniswap V3 pool."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
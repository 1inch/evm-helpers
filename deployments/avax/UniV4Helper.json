{
  "address": "0xCC7f5D0DBb3D0Fe57109BF256B76B49f79CD463d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPoolManager",
          "name": "_poolManager",
          "type": "address"
        },
        {
          "internalType": "contract IStateView",
          "name": "_stateView",
          "type": "address"
        },
        {
          "internalType": "contract IPosManager",
          "name": "_posManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "int24",
          "name": "tickRange",
          "type": "int24"
        }
      ],
      "name": "getTicks",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "ticks",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b609c090be1c9c5f5b1296375e0112610553c04dee5d99b1272ef4fe00d4063",
  "receipt": {
    "to": null,
    "from": "0x56E44874F624EbDE6efCc783eFD685f0FBDC6dcF",
    "contractAddress": "0xCC7f5D0DBb3D0Fe57109BF256B76B49f79CD463d",
    "transactionIndex": 8,
    "gasUsed": "814943",
    "logsBloom": "0x
    "blockHash": "0x02aad6e84b4e5ce43050137e9090051cf258d0471a4b89bd41c4eda9bf51aebc",
    "transactionHash": "0x6b609c090be1c9c5f5b1296375e0112610553c04dee5d99b1272ef4fe00d4063",
    "logs": [],
    "blockNumber": 56778357,
    "cumulativeGasUsed": "2137005",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x06380c0e0912312b5150364b9dc4542ba0dbbc85",
    "0xc3c9e198c735a4b97e3e683f391ccbdd60b69286",
    "0xb74b1f14d2754acfcbbe1a221023a5cf50ab8acd"
  ],
  "numDeployments": 1,
  "solcInputHash": "f4b0e696968f0aa92824b2b9d6d381e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"internalType\":\"contract IStateView\",\"name\":\"_stateView\",\"type\":\"address\"},{\"internalType\":\"contract IPosManager\",\"name\":\"_posManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"int24\",\"name\":\"tickRange\",\"type\":\"int24\"}],\"name\":\"getTicks\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"ticks\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniV4Helper.sol\":\"UniV4Helper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"},\"contracts/UniV4Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"@uniswap/v3-core/contracts/libraries/BitMath.sol\\\";\\n\\ninterface IPosManager {\\n    function poolKeys(bytes25 poolId) external  view returns (address currency0, address currency1, uint24 fee, int24 tickSpacing);\\n}\\n\\ninterface IStateView {\\n        function getSlot0(bytes32 poolId) external view returns (uint160 sqrtPriceX96, int24 tick, uint24 protocolFee, uint24 lpFee);\\n        function getTickBitmap(bytes32 poolId, int16 tick) external view returns (uint256 tickBitmap);\\n        function getTickInfo(bytes32 poolId, int24 tick) external view returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128\\n        );\\n}\\n\\ninterface IPoolManager {\\n    function extsload(bytes32 startSlot, uint256 nSlots) external view returns (bytes32[] memory);\\n}\\n\\ncontract UniV4Helper {\\n    uint256 private constant _TICKS_OFFSET = 4;\\n    bytes32 private constant _POOLS_SLOT = bytes32(uint256(6));\\n\\n    int24 private constant _MIN_TICK = -887272;\\n    int24 private constant _MAX_TICK = -_MIN_TICK;\\n\\n    IPoolManager private immutable _POOL_MANAGER;\\n    IStateView private immutable _STATE_VIEW;\\n    IPosManager private immutable _POS_MANAGER;\\n\\n    constructor(IPoolManager _poolManager, IStateView _stateView, IPosManager _posManager) {\\n        _POOL_MANAGER = _poolManager;\\n        _STATE_VIEW = _stateView;\\n        _POS_MANAGER = _posManager;\\n    }\\n\\n    function _getTickInfoSlot(bytes32 poolId, int24 tick) internal pure returns (bytes32) {\\n        bytes32 stateSlot = keccak256(abi.encodePacked(poolId, _POOLS_SLOT));\\n        bytes32 ticksMappingSlot = bytes32(uint256(stateSlot) + _TICKS_OFFSET);\\n        return keccak256(abi.encodePacked(int256(tick), ticksMappingSlot));\\n    }\\n\\n    function getTicks(bytes32 poolId, int24 tickRange) external view returns (bytes[] memory ticks) {\\n        (,,,int24 tickSpacing) = _POS_MANAGER.poolKeys(bytes25(poolId));\\n        (,int24 tick,,) = _STATE_VIEW.getSlot0(poolId);\\n\\n        tickRange *= tickSpacing;\\n        int24 fromTick = tick - tickRange;\\n        int24 toTick = tick + tickRange;\\n        if (fromTick < _MIN_TICK) {\\n            fromTick = _MIN_TICK;\\n        }\\n        if (toTick > _MAX_TICK) {\\n            toTick = _MAX_TICK;\\n        }\\n\\n        int24[] memory initTicks = new int24[](uint256(int256((toTick - fromTick + 1) / tickSpacing)));\\n\\n        uint256 counter = 0;\\n        int16 pos = int16((fromTick / tickSpacing) >> 8);\\n        int16 endPos = int16((toTick / tickSpacing) >> 8);\\n\\n        for (; pos <= endPos; pos++) {\\n            uint256 bm = _STATE_VIEW.getTickBitmap(poolId, pos);\\n\\n            while (bm != 0) {\\n                uint8 bit = BitMath.leastSignificantBit(bm);\\n                bm ^= 1 << bit;\\n                int24 extractedTick = ((int24(pos) << 8) | int24(uint24(bit))) * tickSpacing;\\n                if (extractedTick >= fromTick && extractedTick <= toTick) {\\n                    initTicks[counter++] = extractedTick;\\n                }\\n            }\\n        }\\n\\n        ticks = new bytes[](counter);\\n        for (uint256 i = 0; i < counter; i++) {\\n            bytes32 slot = _getTickInfoSlot(poolId, initTicks[i]);\\n            bytes32[] memory data = _POOL_MANAGER.extsload(slot, 3);\\n            ticks[i] = abi.encodePacked(data[0], data[1], data[2], initTicks[i]);\\n        }\\n        return(ticks);\\n    }\\n}\\n\\n\",\"keccak256\":\"0x3e399b9cdcc3499c91fa907d8527153b037dca733ca34d694555821f72f760ed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0346100a857601f610e8838819003918201601f19168301916001600160401b038311848410176100ad578084926060946040528339810103126100a85780516001600160a01b03919082811681036100a85760208201519183831683036100a8576040015192831683036100a85760805260a05260c052604051610dc490816100c4823960805181610927015260a05181818161014b0152610307015260c0518160ce0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c63f75033fb1461002857600080fd5b346107315760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610731576024358060020b8103610731577f86b6be7d0000000000000000000000000000000000000000000000000000000082527fffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000060043516600483015260808260248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa91821561073e57600092610b86575b506040517fc815641c000000000000000000000000000000000000000000000000000000008152600435600482015260808160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561073e578390600092610b0b575b506101899192610c85565b906101948282610c9c565b9160020b9060020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000627fffff8183128184131761035757827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618808660020b12610b03575b50620d89e8809160020b13610afb575b5060016102178585610c9c565b60020b0191821290821317610357578361023091610cd6565b60020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061027661026083610d62565b9261026e6040519485610c05565b808452610d62565b0136602083013760009161028a8585610cd6565b60020b60081d60010b9461029e8183610cd6565b60020b60081d60010b955b868160010b1361074a576040517f1c7ccb4c00000000000000000000000000000000000000000000000000000000815260043560048201528160010b602482015260208160448173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561073e57600091610707575b50805b6103865750617fff8160010b1461035757600190810b016102a9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8060ff6fffffffffffffffffffffffffffffffff8216156106fb5750607f5b67ffffffffffffffff8216156106f15760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc081831601116103575760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0015b63ffffffff8216156106e75760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081831601116103575760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015b61ffff8216156106dd5760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff081831601116103575760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0015b60ff8216156106d35760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff881831601116103575760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8015b600f8216156106c95760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc81831601116103575760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc015b8460038316156106bc575060ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe81831601116103575760017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff87931601925b16610664575b60ff6105fd9216926001841b189260020b8460081b60020b17610c85565b60020b8760020b81121580610657575b610619575b508061033b565b86907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82146103575761065160018493019888610d7a565b52610612565b508460020b81131561060d565b5060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81831601116103575760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01836105df565b909160019060021c6105d9565b9060041c90610577565b9060081c9061051c565b9060101c906104c1565b9060201c90610465565b9060401c90610407565b90508160801c906103a5565b90506020813d602011610736575b8161072260209383610c05565b81010312610731575138610338565b600080fd5b3d9150610715565b6040513d6000823e3d90fd5b50505061075682610d62565b916107646040519384610c05565b8083527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061079182610d62565b0160005b818110610aea57505060005b818110610877578360405160208101916020825280518093526040820192602060408260051b8501019201906000945b8186106107de5784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0858203018252835180519081835260005b828110610862575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85600085809860019a01015201160101950192019501949190916107d1565b80602080928401015182828701015201610813565b6108818184610d7a565b5160020b6040516020810190600435825260066040820152604081526108a681610be9565b5190206004810181116103575760046040519160208301938452016040820152604081526108d381610be9565b51902090604051917f35fd631a00000000000000000000000000000000000000000000000000000000835260048301526003602483015260008260448173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa91821561073e57600092610a4d575b50815115610a1e57602082015191805160011015610a1e57604081015190805160021015610a1e57606080910151906109918488610d7a565b5192604051956020870152604086015284015260e81b6080830152606382528160a081011067ffffffffffffffff60a0840111176109ef578160a0600193016040526109dd8287610d7a565b526109e88186610d7a565b50016107a1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9091503d806000833e610a608183610c05565b60208282810103126107315781519167ffffffffffffffff831161073157818101601f848301011215610731578281015190610a9b82610d62565b93610aa96040519586610c05565b82855260208086019360051b828401010193820184116107315701602001905b828210610ada575050509085610958565b8151815260209182019101610ac9565b806060602080938801015201610795565b92503861020a565b9450386101fa565b9150506080813d608011610b7e575b81610b2760809383610c05565b8101031261073157805173ffffffffffffffffffffffffffffffffffffffff811603610731578281610b776060610b6360206101899601610c77565b92610b7060408201610c67565b5001610c67565b509161017e565b3d9150610b1a565b9091506080813d608011610be1575b81610ba260809383610c05565b8101031261073157606081610bb9610bda93610c46565b50610bc660208201610c46565b50610bd360408201610c67565b5001610c77565b90386100ff565b3d9150610b95565b6060810190811067ffffffffffffffff8211176109ef57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109ef57604052565b519073ffffffffffffffffffffffffffffffffffffffff8216820361073157565b519062ffffff8216820361073157565b51908160020b820361073157565b9060020b9060020b02908160020b91820361035757565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083121761035757565b60020b9060020b908115610d33577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000821416610357570590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b67ffffffffffffffff81116109ef5760051b60200190565b8051821015610a1e5760209160051b01019056fea26469706673582212209b3efd65404f48c76529817d6a3678d2d8302616e88bcb6231931df84111c59a64736f6c63430008170033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c63f75033fb1461002857600080fd5b346107315760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610731576024358060020b8103610731577f86b6be7d0000000000000000000000000000000000000000000000000000000082527fffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000060043516600483015260808260248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa91821561073e57600092610b86575b506040517fc815641c000000000000000000000000000000000000000000000000000000008152600435600482015260808160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561073e578390600092610b0b575b506101899192610c85565b906101948282610c9c565b9160020b9060020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000627fffff8183128184131761035757827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618808660020b12610b03575b50620d89e8809160020b13610afb575b5060016102178585610c9c565b60020b0191821290821317610357578361023091610cd6565b60020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061027661026083610d62565b9261026e6040519485610c05565b808452610d62565b0136602083013760009161028a8585610cd6565b60020b60081d60010b9461029e8183610cd6565b60020b60081d60010b955b868160010b1361074a576040517f1c7ccb4c00000000000000000000000000000000000000000000000000000000815260043560048201528160010b602482015260208160448173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561073e57600091610707575b50805b6103865750617fff8160010b1461035757600190810b016102a9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8060ff6fffffffffffffffffffffffffffffffff8216156106fb5750607f5b67ffffffffffffffff8216156106f15760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc081831601116103575760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0015b63ffffffff8216156106e75760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081831601116103575760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015b61ffff8216156106dd5760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff081831601116103575760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0015b60ff8216156106d35760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff881831601116103575760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8015b600f8216156106c95760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc81831601116103575760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc015b8460038316156106bc575060ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe81831601116103575760017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff87931601925b16610664575b60ff6105fd9216926001841b189260020b8460081b60020b17610c85565b60020b8760020b81121580610657575b610619575b508061033b565b86907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82146103575761065160018493019888610d7a565b52610612565b508460020b81131561060d565b5060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81831601116103575760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01836105df565b909160019060021c6105d9565b9060041c90610577565b9060081c9061051c565b9060101c906104c1565b9060201c90610465565b9060401c90610407565b90508160801c906103a5565b90506020813d602011610736575b8161072260209383610c05565b81010312610731575138610338565b600080fd5b3d9150610715565b6040513d6000823e3d90fd5b50505061075682610d62565b916107646040519384610c05565b8083527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061079182610d62565b0160005b818110610aea57505060005b818110610877578360405160208101916020825280518093526040820192602060408260051b8501019201906000945b8186106107de5784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0858203018252835180519081835260005b828110610862575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85600085809860019a01015201160101950192019501949190916107d1565b80602080928401015182828701015201610813565b6108818184610d7a565b5160020b6040516020810190600435825260066040820152604081526108a681610be9565b5190206004810181116103575760046040519160208301938452016040820152604081526108d381610be9565b51902090604051917f35fd631a00000000000000000000000000000000000000000000000000000000835260048301526003602483015260008260448173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa91821561073e57600092610a4d575b50815115610a1e57602082015191805160011015610a1e57604081015190805160021015610a1e57606080910151906109918488610d7a565b5192604051956020870152604086015284015260e81b6080830152606382528160a081011067ffffffffffffffff60a0840111176109ef578160a0600193016040526109dd8287610d7a565b526109e88186610d7a565b50016107a1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9091503d806000833e610a608183610c05565b60208282810103126107315781519167ffffffffffffffff831161073157818101601f848301011215610731578281015190610a9b82610d62565b93610aa96040519586610c05565b82855260208086019360051b828401010193820184116107315701602001905b828210610ada575050509085610958565b8151815260209182019101610ac9565b806060602080938801015201610795565b92503861020a565b9450386101fa565b9150506080813d608011610b7e575b81610b2760809383610c05565b8101031261073157805173ffffffffffffffffffffffffffffffffffffffff811603610731578281610b776060610b6360206101899601610c77565b92610b7060408201610c67565b5001610c67565b509161017e565b3d9150610b1a565b9091506080813d608011610be1575b81610ba260809383610c05565b8101031261073157606081610bb9610bda93610c46565b50610bc660208201610c46565b50610bd360408201610c67565b5001610c77565b90386100ff565b3d9150610b95565b6060810190811067ffffffffffffffff8211176109ef57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109ef57604052565b519073ffffffffffffffffffffffffffffffffffffffff8216820361073157565b519062ffffff8216820361073157565b51908160020b820361073157565b9060020b9060020b02908160020b91820361035757565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083121761035757565b60020b9060020b908115610d33577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000821416610357570590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b67ffffffffffffffff81116109ef5760051b60200190565b8051821015610a1e5760209160051b01019056fea26469706673582212209b3efd65404f48c76529817d6a3678d2d8302616e88bcb6231931df84111c59a64736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
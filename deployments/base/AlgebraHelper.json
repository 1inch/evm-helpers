{
  "address": "0x59a0A6d73e6a5224871f45E6d845ce1574063ADe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAlgebra",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tickRange",
          "type": "int24"
        }
      ],
      "name": "getTicks",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "ticks",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x44e2a75c831b5978983cbc6aeb6d4048d66be1d6d8e72f6223cc7a1f94e10fc1",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x59a0A6d73e6a5224871f45E6d845ce1574063ADe",
    "transactionIndex": 4,
    "gasUsed": "601918",
    "logsBloom": "0x
    "blockHash": "0x6953f952d7e090592e93b54b9ef5cba24e51579277521f2641f2162bc0352af9",
    "transactionHash": "0x44e2a75c831b5978983cbc6aeb6d4048d66be1d6d8e72f6223cc7a1f94e10fc1",
    "logs": [],
    "blockNumber": 3219103,
    "cumulativeGasUsed": "925989",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "73a08df40a1bbb294cc648a6a936ad46",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAlgebra\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickRange\",\"type\":\"int24\"}],\"name\":\"getTicks\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"ticks\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AlgebraHelper.sol\":\"AlgebraHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/AlgebraHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/IAlgebra.sol\\\";\\n\\ncontract AlgebraHelper {\\n    int24 private constant _MIN_TICK = -887272;\\n    int24 private constant _MAX_TICK = -_MIN_TICK;\\n\\n    uint16 internal constant _BASE_FEE = 100;\\n    int24 internal constant _TICK_SPACING = 60;\\n\\n    struct Tick {\\n        uint128 liquidityGross;\\n        int128 liquidityNet;\\n        uint256 feeGrowthOutside0X128;\\n        uint256 feeGrowthOutside1X128;\\n        int56 tickCumulativeOutside;\\n        uint160 secondsPerLiquidityOutsideX128;\\n        uint32 secondsOutside;\\n        int24 index; // tick index\\n    }\\n\\n    function getTicks(IAlgebra pool, int24 tickRange) external view returns (bytes[] memory ticks) {\\n        (,int24 tick,,,,,) = pool.globalState();\\n\\n        tickRange *= _TICK_SPACING;\\n        int24 fromTick = tick - tickRange;\\n        int24 toTick = tick + tickRange;\\n        if (fromTick < _MIN_TICK) {\\n            fromTick = _MIN_TICK;\\n        }\\n        if (toTick > _MAX_TICK) {\\n            toTick = _MAX_TICK;\\n        }\\n\\n        int24[] memory initTicks = new int24[](uint256(int256((toTick - fromTick + 1) / _TICK_SPACING)));\\n\\n        uint256 counter = 0;\\n        int16 pos = int16((fromTick / _TICK_SPACING) >> 8);\\n        int16 endPos = int16((toTick / _TICK_SPACING) >> 8);\\n        for (; pos <= endPos; pos++) {\\n            uint256 bm = pool.tickTable(pos);\\n\\n            while (bm != 0) {\\n                uint8 bit = _leastSignificantBit(bm);\\n                bm ^= 1 << bit;\\n                int24 extractedTick = ((int24(pos) << 8) | int24(uint24(bit))) * _TICK_SPACING;\\n                if (extractedTick >= fromTick && extractedTick <= toTick) {\\n                    initTicks[counter++] = extractedTick;\\n                }\\n            }\\n        }\\n\\n        ticks = new bytes[](counter);\\n        for (uint256 i = 0; i < counter; i++) {\\n            (\\n                uint128 liquidityTotal,\\n                int128 liquidityDelta,\\n                uint256 outerFeeGrowth0Token,\\n                uint256 outerFeeGrowth1Token\\n                , // int56 outerTickCumulative,\\n                , // uint160 outerSecondsPerLiquidity\\n                , // uint32 outerSecondsSpent\\n                , // bool initialized\\n            ) = pool.ticks(initTicks[i]);\\n\\n            ticks[i] = abi.encodePacked(\\n                liquidityTotal,\\n                liquidityDelta,\\n                outerFeeGrowth0Token,\\n                outerFeeGrowth1Token,\\n                // outerTickCumulative,\\n                // outerSecondsPerLiquidity,\\n                // outerSecondsSpent,\\n                initTicks[i]\\n            );\\n        }\\n    }\\n\\n    function _leastSignificantBit(uint256 x) private pure returns (uint8 r) {\\n        require(x > 0, \\\"x is 0\\\");\\n        x = x & (~x + 1);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n}\\n\",\"keccak256\":\"0x46b3dfb3b3e0ea774e9f1a801bdb2bf2e68352530d93f21f1afbb93d68199af6\",\"license\":\"MIT\"},\"contracts/interfaces/IAlgebra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n\\ninterface IAlgebra {\\n    /**\\n    * @notice The globalState structure in the pool stores many values but requires only one slot\\n    * and is exposed as a single method to save gas when accessed externally.\\n    * @return price The current price of the pool as a sqrt(token1/token0) Q64.96 value;\\n    * Returns tick The current tick of the pool, i.e. according to the last tick transition that was run;\\n    * Returns This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick\\n    * boundary;\\n    * Returns fee The last pool fee value in hundredths of a bip, i.e. 1e-6;\\n    * Returns timepointIndex The index of the last written timepoint;\\n    * Returns communityFeeToken0 The community fee percentage of the swap fee in thousandths (1e-3) for token0;\\n    * Returns communityFeeToken1 The community fee percentage of the swap fee in thousandths (1e-3) for token1;\\n    * Returns unlocked Whether the pool is currently locked to reentrancy;\\n    */\\n    function globalState()\\n        external\\n        view\\n        returns (\\n            uint160 price,\\n            int24 tick,\\n            uint16 fee,\\n            uint16 timepointIndex,\\n            uint8 communityFeeToken0,\\n            uint8 communityFeeToken1,\\n            bool unlocked\\n        );\\n\\n    /**\\n    * @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    * @dev This value can overflow the uint256\\n    */\\n    function totalFeeGrowth0Token() external view returns (uint256);\\n\\n    /**\\n    * @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    * @dev This value can overflow the uint256\\n    */\\n    function totalFeeGrowth1Token() external view returns (uint256);\\n\\n    /**\\n    * @notice The currently in range liquidity available to the pool\\n    * @dev This value has no relationship to the total liquidity across all ticks.\\n    * Returned value cannot exceed type(uint128).max\\n    */\\n    function liquidity() external view returns (uint128);\\n\\n    /**\\n    * @notice Look up information about a specific tick in the pool\\n    * @dev This is a public structure, so the `return` natspec tags are omitted.\\n    * @param tick The tick to look up\\n    * @return liquidityTotal the total amount of position liquidity that uses the pool either as tick lower or\\n    * tick upper\\n    * @return liquidityDelta how much liquidity changes when the pool price crosses the tick;\\n    * Returns outerFeeGrowth0Token the fee growth on the other side of the tick from the current tick in token0;\\n    * Returns outerFeeGrowth1Token the fee growth on the other side of the tick from the current tick in token1;\\n    * Returns outerTickCumulative the cumulative tick value on the other side of the tick from the current tick;\\n    * Returns outerSecondsPerLiquidity the seconds spent per liquidity on the other side of the tick from the current tick;\\n    * Returns outerSecondsSpent the seconds spent on the other side of the tick from the current tick;\\n    * Returns initialized Set to true if the tick is initialized, i.e. liquidityTotal is greater than 0\\n    * otherwise equal to false. Outside values can only be used if the tick is initialized.\\n    * In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    * a specific position.\\n    */\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityTotal,\\n            int128 liquidityDelta,\\n            uint256 outerFeeGrowth0Token,\\n            uint256 outerFeeGrowth1Token,\\n            int56 outerTickCumulative,\\n            uint160 outerSecondsPerLiquidity,\\n            uint32 outerSecondsSpent,\\n            bool initialized\\n        );\\n\\n    /** @notice Returns 256 packed tick initialized boolean values. See TickTable for more information */\\n    function tickTable(int16 wordPosition) external view returns (uint256);\\n\\n    /**\\n    * @notice Returns the information about a position by the position's key\\n    * @dev This is a public mapping of structures, so the `return` natspec tags are omitted.\\n    * @param key The position's key is a hash of a preimage composed by the owner, bottomTick and topTick\\n    * @return liquidityAmount The amount of liquidity in the position;\\n    * Returns lastLiquidityAddTimestamp Timestamp of last adding of liquidity;\\n    * Returns innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke;\\n    * Returns innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke;\\n    * Returns fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke;\\n    * Returns fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke\\n    */\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityAmount,\\n            uint32 lastLiquidityAddTimestamp,\\n            uint256 innerFeeGrowth0Token,\\n            uint256 innerFeeGrowth1Token,\\n            uint128 fees0,\\n            uint128 fees1\\n        );\\n}\\n\",\"keccak256\":\"0x64cadd59c19b6e30e1d798b90037f57be26ea8a7522b69de06c54ff476f76c20\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576109f7908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c63c078e90c1461002857600080fd5b346104825760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610482576004359073ffffffffffffffffffffffffffffffffffffffff82168203610482576024358060020b8103610482577fe76c01e400000000000000000000000000000000000000000000000000000000825260e08260048173ffffffffffffffffffffffffffffffffffffffff87165afa91821561048f576000926107ce575b506100e0906108ea565b906100eb82826108ff565b9160020b9060020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000627fffff8183128184131761027657827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618808660020b126107c6575b50620d89e8809160020b136107be575b50600161016e85856108ff565b60020b019182129082131761027657603c9060020b0560020b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06101cb6101b584610939565b936101c3604051958661085e565b808552610939565b01366020840137600090603c8460020b0560020b60081d60010b5b8060010b603c8360020b0560020b60081d60010b811361049b57604051907fc677e3e0000000000000000000000000000000000000000000000000000000008252600482015260208160248173ffffffffffffffffffffffffffffffffffffffff8b165afa90811561048f57600091610458575b50805b6102a5575060010b617fff8114610276576001016101e6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600090801960018101811161027657600101811670010000000000000000000000000000000081101561044d575b68010000000000000000811015610431575b640100000000811015610415575b620100008110156103f9575b6101008110156103dd575b60108110156103c1575b60048110156103a4575b60021115610389575b60ff6103479216906001821b1891829160020b8460081b60020b176108ea565b60020b8760020b8112158061037c575b610362575b5061025d565b61037561036e87610951565b968861097e565b523861035c565b508460020b811315610357565b60ff8060018185160111610276579190911660010190610327565b60021c9160ff90816002818316011161027657166002019161031e565b60041c9160ff8060048184160111610276571660040191610314565b60081c9160ff806008818416011161027657166008019161030a565b601090811c9260ff9081838183160111610276571601916102ff565b60201c9160ff80602081841601116102765716602001916102f3565b60401c9160ff80604081841601116102765716604001916102e5565b60809250821c6102d3565b90506020813d602011610487575b816104736020938361085e565b8101031261048257513861025a565b600080fd5b3d9150610466565b6040513d6000823e3d90fd5b8684866104a782610939565b926104b5604051948561085e565b8284527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06104e284610939565b0160005b8181106107ad57505060005b8381106105c8578460405160208101916020825280518093526040820192602060408260051b8501019201906000945b81861061052f5784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0858203018252835180519081835260005b8281106105b3575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85600085809860019a0101520116010195019201950194919091610522565b80602080928401015182828701015201610564565b6105d2818461097e565b5160020b90604051917ff30dba9300000000000000000000000000000000000000000000000000000000835260048301526101008260248173ffffffffffffffffffffffffffffffffffffffff87165afa91821561048f57600090600093600091600091610702575b50610646848861097e565b5191604051957fffffffffffffffffffffffffffffffff00000000000000000000000000000000608095861b166020880152841b60308701526040860152606085015260e81b908301526063825260a082019180831067ffffffffffffffff8411176106d3576106ce926040526106bd828861097e565b526106c8818761097e565b50610951565b6104f2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9450505050610100823d610100116107a5575b81610723610100938361085e565b81010312610482578151916fffffffffffffffffffffffffffffffff831683036104825760208101519081600f0b82036104825760408101519360608201519160808101518060060b036104825761077d60a0820161089f565b5060c081015163ffffffff8116036104825760e061079b91016108dd565b509193908961063b565b3d9150610715565b8060606020809389010152016104e6565b925038610161565b945038610151565b90915060e0813d60e011610856575b816107ea60e0938361085e565b81010312610482576107fb8161089f565b5060208101518060020b81036104825761084e60c08361082060406100e096016108c0565b5061082d606082016108c0565b5061083a608082016108cf565b5061084760a082016108cf565b50016108dd565b5091906100d6565b3d91506107dd565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176106d357604052565b519073ffffffffffffffffffffffffffffffffffffffff8216820361048257565b519061ffff8216820361048257565b519060ff8216820361048257565b5190811515820361048257565b603c9060020b02908160020b91820361027657565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083121761027657565b67ffffffffffffffff81116106d35760051b60200190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146102765760010190565b80518210156109925760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212207df321b67e865450f40f84460e50f4185c0f467dfcbb4fe5b8bcfc404e04edfb64736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c63c078e90c1461002857600080fd5b346104825760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610482576004359073ffffffffffffffffffffffffffffffffffffffff82168203610482576024358060020b8103610482577fe76c01e400000000000000000000000000000000000000000000000000000000825260e08260048173ffffffffffffffffffffffffffffffffffffffff87165afa91821561048f576000926107ce575b506100e0906108ea565b906100eb82826108ff565b9160020b9060020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000627fffff8183128184131761027657827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618808660020b126107c6575b50620d89e8809160020b136107be575b50600161016e85856108ff565b60020b019182129082131761027657603c9060020b0560020b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06101cb6101b584610939565b936101c3604051958661085e565b808552610939565b01366020840137600090603c8460020b0560020b60081d60010b5b8060010b603c8360020b0560020b60081d60010b811361049b57604051907fc677e3e0000000000000000000000000000000000000000000000000000000008252600482015260208160248173ffffffffffffffffffffffffffffffffffffffff8b165afa90811561048f57600091610458575b50805b6102a5575060010b617fff8114610276576001016101e6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600090801960018101811161027657600101811670010000000000000000000000000000000081101561044d575b68010000000000000000811015610431575b640100000000811015610415575b620100008110156103f9575b6101008110156103dd575b60108110156103c1575b60048110156103a4575b60021115610389575b60ff6103479216906001821b1891829160020b8460081b60020b176108ea565b60020b8760020b8112158061037c575b610362575b5061025d565b61037561036e87610951565b968861097e565b523861035c565b508460020b811315610357565b60ff8060018185160111610276579190911660010190610327565b60021c9160ff90816002818316011161027657166002019161031e565b60041c9160ff8060048184160111610276571660040191610314565b60081c9160ff806008818416011161027657166008019161030a565b601090811c9260ff9081838183160111610276571601916102ff565b60201c9160ff80602081841601116102765716602001916102f3565b60401c9160ff80604081841601116102765716604001916102e5565b60809250821c6102d3565b90506020813d602011610487575b816104736020938361085e565b8101031261048257513861025a565b600080fd5b3d9150610466565b6040513d6000823e3d90fd5b8684866104a782610939565b926104b5604051948561085e565b8284527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06104e284610939565b0160005b8181106107ad57505060005b8381106105c8578460405160208101916020825280518093526040820192602060408260051b8501019201906000945b81861061052f5784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0858203018252835180519081835260005b8281106105b3575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85600085809860019a0101520116010195019201950194919091610522565b80602080928401015182828701015201610564565b6105d2818461097e565b5160020b90604051917ff30dba9300000000000000000000000000000000000000000000000000000000835260048301526101008260248173ffffffffffffffffffffffffffffffffffffffff87165afa91821561048f57600090600093600091600091610702575b50610646848861097e565b5191604051957fffffffffffffffffffffffffffffffff00000000000000000000000000000000608095861b166020880152841b60308701526040860152606085015260e81b908301526063825260a082019180831067ffffffffffffffff8411176106d3576106ce926040526106bd828861097e565b526106c8818761097e565b50610951565b6104f2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9450505050610100823d610100116107a5575b81610723610100938361085e565b81010312610482578151916fffffffffffffffffffffffffffffffff831683036104825760208101519081600f0b82036104825760408101519360608201519160808101518060060b036104825761077d60a0820161089f565b5060c081015163ffffffff8116036104825760e061079b91016108dd565b509193908961063b565b3d9150610715565b8060606020809389010152016104e6565b925038610161565b945038610151565b90915060e0813d60e011610856575b816107ea60e0938361085e565b81010312610482576107fb8161089f565b5060208101518060020b81036104825761084e60c08361082060406100e096016108c0565b5061082d606082016108c0565b5061083a608082016108cf565b5061084760a082016108cf565b50016108dd565b5091906100d6565b3d91506107dd565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176106d357604052565b519073ffffffffffffffffffffffffffffffffffffffff8216820361048257565b519061ffff8216820361048257565b519060ff8216820361048257565b5190811515820361048257565b603c9060020b02908160020b91820361027657565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083121761027657565b67ffffffffffffffff81116106d35760051b60200190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146102765760010190565b80518210156109925760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212207df321b67e865450f40f84460e50f4185c0f467dfcbb4fe5b8bcfc404e04edfb64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
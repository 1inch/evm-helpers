{
  "address": "0xA0446D8804611944F1B527eCD37d7dcbE442caba",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gaslimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV3",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tickRange",
          "type": "int24"
        }
      ],
      "name": "getTicks",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "ticks",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct MultiCall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct MultiCall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "multicallWithGas",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "gasUsed",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct MultiCall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "gasBuffer",
          "type": "uint256"
        }
      ],
      "name": "multicallWithGasLimitation",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "lastSuccessIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3d002eb80f027b0998de81aadafadde6f8522eefc502572b3b09d6f7058dc236",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0xA0446D8804611944F1B527eCD37d7dcbE442caba",
    "transactionIndex": 7,
    "gasUsed": "1020776",
    "logsBloom": "0x
    "blockHash": "0x0b1f78fe89cfb2cacb629545975725c7f016a0d5448138e2da9d3613550df011",
    "transactionHash": "0x3d002eb80f027b0998de81aadafadde6f8522eefc502572b3b09d6f7058dc236",
    "logs": [],
    "blockNumber": 2365775,
    "cumulativeGasUsed": "1754165",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "947e7a0fe61c5566a28c7f9b3672f1f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaslimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV3\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickRange\",\"type\":\"int24\"}],\"name\":\"getTicks\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"ticks\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicallWithGas\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasUsed\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"gasBuffer\",\"type\":\"uint256\"}],\"name\":\"multicallWithGasLimitation\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"lastSuccessIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EvmHelpers.sol\":\"EvmHelpers\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Ether.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n\\ncontract Ether {\\n    function balanceOf(address wallet) external view returns (uint256) {\\n        return wallet.balance;\\n    }\\n}\\n\",\"keccak256\":\"0x45361af7c1e7ed0a9b98348b530f4a0cf4c0e80e074cdb234ee4a842c3320d29\",\"license\":\"MIT\"},\"contracts/EvmHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./Ether.sol\\\";\\nimport \\\"./MultiCall.sol\\\";\\nimport \\\"./UniV3Helper.sol\\\";\\n\\n//solhint-disable-next-line no-empty-blocks\\ncontract EvmHelpers is Ether, MultiCall, UniV3Helper {}\\n\",\"keccak256\":\"0x6cf577ea77c4eea7aa48f2245818de7dc0af38efa95452ca0cc3817453005b37\",\"license\":\"MIT\"},\"contracts/MultiCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n\\ncontract MultiCall {\\n    struct Call {\\n        address to;\\n        bytes data;\\n    }\\n\\n   function multicall(Call[] memory calls) public returns (bytes[] memory results) {\\n        results = new bytes[](calls.length);\\n        for (uint i = 0; i < calls.length; i++) {\\n            (, results[i]) = calls[i].to.call(calls[i].data);  // solhint-disable-line avoid-low-level-calls\\n        }\\n    }\\n\\n\\n    // be careful with calls.length == 0\\n    function multicallWithGasLimitation(Call[] memory calls, uint256 gasBuffer) public returns (bytes[] memory results, uint256 lastSuccessIndex) {\\n        results = new bytes[](calls.length);\\n        for (uint i = 0; i < calls.length; i++) {\\n            (, results[i]) = calls[i].to.call(calls[i].data);  // solhint-disable-line avoid-low-level-calls\\n            if (gasleft() < gasBuffer) {\\n                return (results, i);\\n            }\\n        }\\n        return (results, calls.length - 1);\\n    }\\n\\n   function multicallWithGas(Call[] memory calls) public returns (bytes[] memory results, uint256[] memory gasUsed) {\\n        results = new bytes[](calls.length);\\n        gasUsed = new uint256[](calls.length);\\n        for (uint i = 0; i < calls.length; i++) {\\n            uint256 initialGas = gasleft();\\n            (, results[i]) = calls[i].to.call(calls[i].data);  // solhint-disable-line avoid-low-level-calls\\n            gasUsed[i] = initialGas - gasleft();\\n        }\\n    }\\n\\n    function gaslimit() external view returns (uint256) {\\n        return block.gaslimit;\\n    }\\n\\n    function gasLeft() external view returns (uint256) {\\n        return gasleft();\\n    }\\n}\\n\",\"keccak256\":\"0xca8e962f23eae2331802c7d50efa2b21dd94d6e9d985b63fe727e94971873bc2\",\"license\":\"MIT\"},\"contracts/UniV3Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/IUniswapV3.sol\\\";\\n\\ncontract UniV3Helper {\\n    int24 private constant _MIN_TICK = -887272;\\n    int24 private constant _MAX_TICK = -_MIN_TICK;\\n\\n    struct Tick {\\n        uint128 liquidityGross;\\n        int128 liquidityNet;\\n        uint256 feeGrowthOutside0X128;\\n        uint256 feeGrowthOutside1X128;\\n        int56 tickCumulativeOutside;\\n        uint160 secondsPerLiquidityOutsideX128;\\n        uint32 secondsOutside;\\n        int24 index; // tick index\\n    }\\n\\n    function getTicks(IUniswapV3 pool, int24 tickRange) external view returns (bytes[] memory ticks) {\\n        int24 tickSpacing = pool.tickSpacing();\\n        (,int24 tick,,,,,) = pool.slot0();\\n\\n        tickRange *= tickSpacing;\\n        int24 fromTick = tick - tickRange;\\n        int24 toTick = tick + tickRange;\\n        if (fromTick < _MIN_TICK) {\\n            fromTick = _MIN_TICK;\\n        }\\n        if (toTick > _MAX_TICK) {\\n            toTick = _MAX_TICK;\\n        }\\n\\n        int24[] memory initTicks = new int24[](uint256(int256((toTick - fromTick + 1) / tickSpacing)));\\n\\n        uint256 counter = 0;\\n        int16 pos = int16((fromTick / tickSpacing) >> 8);\\n        int16 endPos = int16((toTick / tickSpacing) >> 8);\\n        for (; pos <= endPos; pos++) {\\n            uint256 bm = pool.tickBitmap(pos);\\n\\n            while (bm != 0) {\\n                uint8 bit = _leastSignificantBit(bm);\\n                bm ^= 1 << bit;\\n                int24 extractedTick = ((int24(pos) << 8) | int24(uint24(bit))) * tickSpacing;\\n                if (extractedTick >= fromTick && extractedTick <= toTick) {\\n                    initTicks[counter++] = extractedTick;\\n                }\\n            }\\n        }\\n\\n        ticks = new bytes[](counter);\\n        for (uint256 i = 0; i < counter; i++) {\\n            (\\n                uint128 liquidityGross,\\n                int128 liquidityNet,\\n                uint256 feeGrowthOutside0X128,\\n                uint256 feeGrowthOutside1X128\\n                , // int56 tickCumulativeOutside,\\n                , // secondsPerLiquidityOutsideX128\\n                , // uint32 secondsOutside\\n                , // init\\n            ) = pool.ticks(initTicks[i]);\\n\\n            ticks[i] = abi.encodePacked(\\n                liquidityGross,\\n                liquidityNet,\\n                feeGrowthOutside0X128,\\n                feeGrowthOutside1X128,\\n                // tickCumulativeOutside,\\n                // secondsPerLiquidityOutsideX128,\\n                // secondsOutside,\\n                initTicks[i]\\n            );\\n        }\\n    }\\n\\n    function _leastSignificantBit(uint256 x) private pure returns (uint8 r) {\\n        require(x > 0, \\\"x is 0\\\");\\n        x = x & (~x + 1);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n}\\n\",\"keccak256\":\"0x4637656d692f12c0a5b30e30c3c675589164755abdd19a125442dfbdbfcd15b8\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n\\ninterface IUniswapV3 {\\n    function tickSpacing() external view returns (int24);\\n\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    function liquidity() external view returns (uint128);\\n\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0xbf472edf4941f6793916fc10f3dbceb019c5ed9c39848c8421f137a99e258898\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
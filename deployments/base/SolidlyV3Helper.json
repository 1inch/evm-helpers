{
  "address": "0x8606321723D9cA7db708A8b12DAd0A8a83f2F3bD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV3",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tickRange",
          "type": "int24"
        }
      ],
      "name": "getTicks",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "ticks",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2b84626a95c5eacd3ffbebdfb517ab86db5b6b295f9b7f04472f96ed8358a897",
  "receipt": {
    "to": null,
    "from": "0x56E44874F624EbDE6efCc783eFD685f0FBDC6dcF",
    "contractAddress": "0x8606321723D9cA7db708A8b12DAd0A8a83f2F3bD",
    "transactionIndex": 11,
    "gasUsed": "571111",
    "logsBloom": "0x
    "blockHash": "0x552538d73543baaf6729a91a8d338a25d6fca541d051ffc8411056416e08237b",
    "transactionHash": "0x2b84626a95c5eacd3ffbebdfb517ab86db5b6b295f9b7f04472f96ed8358a897",
    "logs": [],
    "blockNumber": 11171799,
    "cumulativeGasUsed": "1243694",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8efea3a85580ac571899f794c7b435a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapV3\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickRange\",\"type\":\"int24\"}],\"name\":\"getTicks\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"ticks\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SolidlyV3Helper.sol\":\"SolidlyV3Helper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"},\"contracts/SolidlyV3Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"@uniswap/v3-core/contracts/libraries/BitMath.sol\\\";\\nimport \\\"./interfaces/IUniswapV3.sol\\\";\\n\\ncontract SolidlyV3Helper {\\n    int24 private constant _MIN_TICK = -887272;\\n    int24 private constant _MAX_TICK = -_MIN_TICK;\\n\\n    function getTicks(IUniswapV3 pool, int24 tickRange) external view returns (bytes[] memory ticks) {\\n        int24 tickSpacing = pool.tickSpacing();\\n        (,int24 tick) = pool.slot0();\\n\\n        int24 fromTick = tick - (tickSpacing * tickRange);\\n        int24 toTick = tick + (tickSpacing * tickRange);\\n        if (fromTick < _MIN_TICK) {\\n            fromTick = _MIN_TICK;\\n        }\\n        if (toTick > _MAX_TICK) {\\n            toTick = _MAX_TICK;\\n        }\\n\\n        int24[] memory initTicks = new int24[](uint256(int256(toTick - fromTick + 1) / int256(tickSpacing)));\\n\\n        uint256 counter = 0;\\n        for (int24 tickNum = (fromTick / tickSpacing * tickSpacing); tickNum <= (toTick / tickSpacing * tickSpacing); tickNum += (256 * tickSpacing)) {\\n            int16 pos = int16((tickNum / tickSpacing) >> 8);\\n            uint256 bm = pool.tickBitmap(pos);\\n\\n            while (bm != 0) {\\n                uint8 bit = BitMath.mostSignificantBit(bm);\\n                initTicks[counter] = (int24(pos) * 256 + int24(int256(uint256(bit)))) * tickSpacing;\\n                counter += 1;\\n                bm ^= 1 << bit;\\n            }\\n        }\\n\\n        ticks = new bytes[](counter);\\n        for (uint256 i = 0; i < counter; i++) {\\n             ticks[i] = abi.encodePacked(initTicks[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x41bd904e01a0f4a2d06587cc09d77ee245e7e4df02f80c4efea0f5fea2222635\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\n\\ninterface IUniswapV3 {\\n    function tickSpacing() external view returns (int24);\\n\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick\\n            // the rest is ignored\\n        );\\n\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    function liquidity() external view returns (uint128);\\n\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0xdfaffac1c05ed63b03980ee4d63e3e755fddb69ae3b3a6ee1a60e1c9a50a9779\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608080604052346100165761096a908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c63c078e90c1461002857600080fd5b346104f05760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104f05760043573ffffffffffffffffffffffffffffffffffffffff80821682036104f057602435918260020b83036104f0577fd0c93a7c0000000000000000000000000000000000000000000000000000000084526020846004818585165afa9384156104fd57600094610752575b506040517f3850c7bd0000000000000000000000000000000000000000000000000000000081526040816004818686165afa80156104fd5760009061070a575b61012b915061012561011e61011887896107f1565b83610808565b95876107f1565b90610842565b927ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618808260020b12610702575b50620d89e8808560020b136106fa575b5060016101758286610808565b60020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213176103c55760020b8560020b9081156106cb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147f80000000000000000000000000000000000000000000000000000000000000008214166103c55705927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061024561022f8661087c565b9561023d604051978861078e565b80875261087c565b013660208601376102618661025c81600095610894565b6107f1565b61026f8761025c8189610894565b60020b8160020b13610509576102858782610894565b60020b90604051917f5339c2960000000000000000000000000000000000000000000000000000000083528060081d60010b6004840152602083602481878a165afa80156104fd5789936000916104c3575b5090815b6103005750509061025c816102f661026f94610125836107dd565b9350505050610261565b600095935090807001000000000000000000000000000000008110156104b6575b6801000000000000000081101561049a575b64010000000081101561047e575b62010000811015610462575b610100811015610446575b601081101561042a575b600481101561040d575b600211156103f4575b6103988a61025c61038b8560081d60010b6107dd565b60ff8a1660020b90610842565b6103a2858a6108f1565b9060020b9052600184018094116103c557600160ff8b9597161b188091906102db565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9460ff80600181841601116103c5571660010194610375565b60021c9560ff9081600281831601116103c557166002019561036c565b60041c9560ff80600481841601116103c5571660040195610362565b60081c9560ff80600881841601116103c5571660080195610358565b601090811c9660ff90818381831601116103c55716019561034d565b60201c9560ff80602081841601116103c5571660200195610341565b60401c9560ff80604081841601116103c5571660400195610333565b506080955080861c610321565b9350506020833d6020116104f5575b816104df6020938361078e565b810103126104f057889251386102d7565b600080fd5b3d91506104d2565b6040513d6000823e3d90fd5b84836105148161087c565b91610522604051938461078e565b8183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061054f8361087c565b0160005b8181106106ba57505060005b828110610635578360405160208101916020825280518093526040820192602060408260051b8501019201906000945b81861061059c5784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0858203018252835180519081835260005b828110610620575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85600085809860019a010152011601019501920195019491909161058f565b806020809284010151828287010152016105d1565b61063f81836108f1565b51906040519160e81b602083015260038252604082019180831067ffffffffffffffff84111761068b5760019260405261067982876108f1565b5261068481866108f1565b500161055f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b806060602080938801015201610553565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b935038610168565b905038610158565b506040813d60401161074a575b816107246040938361078e565b810103126104f0578051838116036104f057610745602061012b92016107cf565b610103565b3d9150610717565b9093506020813d602011610786575b8161076e6020938361078e565b810103126104f05761077f906107cf565b92386100c3565b3d9150610761565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761068b57604052565b51908160020b82036104f057565b60081b908160020b9160030b82036103c557565b9060020b9060020b02908160020b9182036103c557565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008312176103c557565b9060020b9060020b01907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008212627fffff8313176103c557565b67ffffffffffffffff811161068b5760051b60200190565b60020b9060020b9081156106cb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008214166103c5570590565b80518210156109055760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220a7916def90e32d70e6831a58ed37345b395316d46dfca7abf6e0e80c75df6cf264736f6c63430008170033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c63c078e90c1461002857600080fd5b346104f05760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104f05760043573ffffffffffffffffffffffffffffffffffffffff80821682036104f057602435918260020b83036104f0577fd0c93a7c0000000000000000000000000000000000000000000000000000000084526020846004818585165afa9384156104fd57600094610752575b506040517f3850c7bd0000000000000000000000000000000000000000000000000000000081526040816004818686165afa80156104fd5760009061070a575b61012b915061012561011e61011887896107f1565b83610808565b95876107f1565b90610842565b927ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618808260020b12610702575b50620d89e8808560020b136106fa575b5060016101758286610808565b60020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213176103c55760020b8560020b9081156106cb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147f80000000000000000000000000000000000000000000000000000000000000008214166103c55705927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061024561022f8661087c565b9561023d604051978861078e565b80875261087c565b013660208601376102618661025c81600095610894565b6107f1565b61026f8761025c8189610894565b60020b8160020b13610509576102858782610894565b60020b90604051917f5339c2960000000000000000000000000000000000000000000000000000000083528060081d60010b6004840152602083602481878a165afa80156104fd5789936000916104c3575b5090815b6103005750509061025c816102f661026f94610125836107dd565b9350505050610261565b600095935090807001000000000000000000000000000000008110156104b6575b6801000000000000000081101561049a575b64010000000081101561047e575b62010000811015610462575b610100811015610446575b601081101561042a575b600481101561040d575b600211156103f4575b6103988a61025c61038b8560081d60010b6107dd565b60ff8a1660020b90610842565b6103a2858a6108f1565b9060020b9052600184018094116103c557600160ff8b9597161b188091906102db565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9460ff80600181841601116103c5571660010194610375565b60021c9560ff9081600281831601116103c557166002019561036c565b60041c9560ff80600481841601116103c5571660040195610362565b60081c9560ff80600881841601116103c5571660080195610358565b601090811c9660ff90818381831601116103c55716019561034d565b60201c9560ff80602081841601116103c5571660200195610341565b60401c9560ff80604081841601116103c5571660400195610333565b506080955080861c610321565b9350506020833d6020116104f5575b816104df6020938361078e565b810103126104f057889251386102d7565b600080fd5b3d91506104d2565b6040513d6000823e3d90fd5b84836105148161087c565b91610522604051938461078e565b8183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061054f8361087c565b0160005b8181106106ba57505060005b828110610635578360405160208101916020825280518093526040820192602060408260051b8501019201906000945b81861061059c5784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0858203018252835180519081835260005b828110610620575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85600085809860019a010152011601019501920195019491909161058f565b806020809284010151828287010152016105d1565b61063f81836108f1565b51906040519160e81b602083015260038252604082019180831067ffffffffffffffff84111761068b5760019260405261067982876108f1565b5261068481866108f1565b500161055f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b806060602080938801015201610553565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b935038610168565b905038610158565b506040813d60401161074a575b816107246040938361078e565b810103126104f0578051838116036104f057610745602061012b92016107cf565b610103565b3d9150610717565b9093506020813d602011610786575b8161076e6020938361078e565b810103126104f05761077f906107cf565b92386100c3565b3d9150610761565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761068b57604052565b51908160020b82036104f057565b60081b908160020b9160030b82036103c557565b9060020b9060020b02908160020b9182036103c557565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008312176103c557565b9060020b9060020b01907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008212627fffff8313176103c557565b67ffffffffffffffff811161068b5760051b60200190565b60020b9060020b9081156106cb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008214166103c5570590565b80518210156109055760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220a7916def90e32d70e6831a58ed37345b395316d46dfca7abf6e0e80c75df6cf264736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "address": "0xC603A00595D5F8ea8d93C5c338c00Ff29dBA6258",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAlgebra",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tickRange",
          "type": "int24"
        }
      ],
      "name": "getTicks",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "ticks",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7eaec5e9460d196f6e98652f70bf716b7c3ef772bb75d2baadad5378b12f8759",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0xC603A00595D5F8ea8d93C5c338c00Ff29dBA6258",
    "transactionIndex": 1,
    "gasUsed": "5853266",
    "logsBloom": "0x
    "blockHash": "0xaf3fd5dda22c4669a6f62be12e3a5733328517b434d8573126d3c93e45e69a5b",
    "transactionHash": "0x7eaec5e9460d196f6e98652f70bf716b7c3ef772bb75d2baadad5378b12f8759",
    "logs": [],
    "blockNumber": 65700695,
    "cumulativeGasUsed": "5853266",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b470fe3d90e66b9df79f30ae9a8dac9e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAlgebra\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickRange\",\"type\":\"int24\"}],\"name\":\"getTicks\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"ticks\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AlgebraHelper.sol\":\"AlgebraHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/AlgebraHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./interfaces/IAlgebra.sol\\\";\\n\\ncontract AlgebraHelper {\\n    int24 private constant _MIN_TICK = -887272;\\n    int24 private constant _MAX_TICK = -_MIN_TICK;\\n\\n    uint16 internal constant _BASE_FEE = 100;\\n    int24 internal constant _TICK_SPACING = 60;\\n\\n    struct Tick {\\n        uint128 liquidityGross;\\n        int128 liquidityNet;\\n        uint256 feeGrowthOutside0X128;\\n        uint256 feeGrowthOutside1X128;\\n        int56 tickCumulativeOutside;\\n        uint160 secondsPerLiquidityOutsideX128;\\n        uint32 secondsOutside;\\n        int24 index; // tick index\\n    }\\n\\n    function getTicks(IAlgebra pool, int24 tickRange) external view returns (bytes[] memory ticks) {\\n        (,int24 tick,,,,,) = pool.globalState();\\n\\n        int24 fromTick = tick - (_TICK_SPACING * tickRange);\\n        int24 toTick = tick + (_TICK_SPACING * tickRange);\\n        if (fromTick < _MIN_TICK) {\\n            fromTick = _MIN_TICK;\\n        }\\n        if (toTick > _MAX_TICK) {\\n            toTick = _MAX_TICK;\\n        }\\n\\n        int24[] memory initTicks = new int24[](uint256(int256((toTick - fromTick + 1) / _TICK_SPACING)));\\n\\n        uint256 counter = 0;\\n        for (int24 tickNum = (fromTick / _TICK_SPACING * _TICK_SPACING); tickNum <= (toTick / _TICK_SPACING * _TICK_SPACING); tickNum += (256 * _TICK_SPACING)) {\\n            int16 pos = int16((tickNum / _TICK_SPACING) >> 8);\\n            uint256 bm = pool.tickTable(pos);\\n\\n            while (bm != 0) {\\n                uint8 bit = _mostSignificantBit(bm);\\n                bm ^= 1 << bit;\\n                int24 extractedTick = (int24(pos) * 256 + int24(uint24(bit))) * _TICK_SPACING;\\n                if (extractedTick >= fromTick && extractedTick <= toTick) {\\n                    initTicks[counter++] = extractedTick;\\n                }\\n            }\\n        }\\n\\n        ticks = new bytes[](counter);\\n        for (uint256 i = 0; i < counter; i++) {\\n            (\\n                uint128 liquidityTotal,\\n                int128 liquidityDelta,\\n                uint256 outerFeeGrowth0Token,\\n                uint256 outerFeeGrowth1Token\\n                , // int56 outerTickCumulative,\\n                , // uint160 outerSecondsPerLiquidity\\n                , // uint32 outerSecondsSpent\\n                , // bool initialized\\n            ) = pool.ticks(initTicks[i]);\\n\\n             ticks[i] = abi.encodePacked(\\n                 liquidityTotal,\\n                 liquidityDelta,\\n                 outerFeeGrowth0Token,\\n                 outerFeeGrowth1Token,\\n                 // outerTickCumulative,\\n                 // outerSecondsPerLiquidity,\\n                 // outerSecondsSpent,\\n                 initTicks[i]\\n             );\\n        }\\n    }\\n\\n    function _mostSignificantBit(uint256 x) private pure returns (uint8 r) {\\n        require(x > 0, \\\"x is 0\\\");\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n}\\n\",\"keccak256\":\"0xe64e9155d3416354277a651f00403d1070070b052e1fc0ee569fa8c758394691\",\"license\":\"MIT\"},\"contracts/interfaces/IAlgebra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n\\ninterface IAlgebra {\\n    /**\\n    * @notice The globalState structure in the pool stores many values but requires only one slot\\n    * and is exposed as a single method to save gas when accessed externally.\\n    * @return price The current price of the pool as a sqrt(token1/token0) Q64.96 value;\\n    * Returns tick The current tick of the pool, i.e. according to the last tick transition that was run;\\n    * Returns This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick\\n    * boundary;\\n    * Returns fee The last pool fee value in hundredths of a bip, i.e. 1e-6;\\n    * Returns timepointIndex The index of the last written timepoint;\\n    * Returns communityFeeToken0 The community fee percentage of the swap fee in thousandths (1e-3) for token0;\\n    * Returns communityFeeToken1 The community fee percentage of the swap fee in thousandths (1e-3) for token1;\\n    * Returns unlocked Whether the pool is currently locked to reentrancy;\\n    */\\n    function globalState()\\n        external\\n        view\\n        returns (\\n            uint160 price,\\n            int24 tick,\\n            uint16 fee,\\n            uint16 timepointIndex,\\n            uint8 communityFeeToken0,\\n            uint8 communityFeeToken1,\\n            bool unlocked\\n        );\\n\\n    /**\\n    * @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    * @dev This value can overflow the uint256\\n    */\\n    function totalFeeGrowth0Token() external view returns (uint256);\\n\\n    /**\\n    * @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    * @dev This value can overflow the uint256\\n    */\\n    function totalFeeGrowth1Token() external view returns (uint256);\\n\\n    /**\\n    * @notice The currently in range liquidity available to the pool\\n    * @dev This value has no relationship to the total liquidity across all ticks.\\n    * Returned value cannot exceed type(uint128).max\\n    */\\n    function liquidity() external view returns (uint128);\\n\\n    /**\\n    * @notice Look up information about a specific tick in the pool\\n    * @dev This is a public structure, so the `return` natspec tags are omitted.\\n    * @param tick The tick to look up\\n    * @return liquidityTotal the total amount of position liquidity that uses the pool either as tick lower or\\n    * tick upper\\n    * @return liquidityDelta how much liquidity changes when the pool price crosses the tick;\\n    * Returns outerFeeGrowth0Token the fee growth on the other side of the tick from the current tick in token0;\\n    * Returns outerFeeGrowth1Token the fee growth on the other side of the tick from the current tick in token1;\\n    * Returns outerTickCumulative the cumulative tick value on the other side of the tick from the current tick;\\n    * Returns outerSecondsPerLiquidity the seconds spent per liquidity on the other side of the tick from the current tick;\\n    * Returns outerSecondsSpent the seconds spent on the other side of the tick from the current tick;\\n    * Returns initialized Set to true if the tick is initialized, i.e. liquidityTotal is greater than 0\\n    * otherwise equal to false. Outside values can only be used if the tick is initialized.\\n    * In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    * a specific position.\\n    */\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityTotal,\\n            int128 liquidityDelta,\\n            uint256 outerFeeGrowth0Token,\\n            uint256 outerFeeGrowth1Token,\\n            int56 outerTickCumulative,\\n            uint160 outerSecondsPerLiquidity,\\n            uint32 outerSecondsSpent,\\n            bool initialized\\n        );\\n\\n    /** @notice Returns 256 packed tick initialized boolean values. See TickTable for more information */\\n    function tickTable(int16 wordPosition) external view returns (uint256);\\n\\n    /**\\n    * @notice Returns the information about a position by the position's key\\n    * @dev This is a public mapping of structures, so the `return` natspec tags are omitted.\\n    * @param key The position's key is a hash of a preimage composed by the owner, bottomTick and topTick\\n    * @return liquidityAmount The amount of liquidity in the position;\\n    * Returns lastLiquidityAddTimestamp Timestamp of last adding of liquidity;\\n    * Returns innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke;\\n    * Returns innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke;\\n    * Returns fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke;\\n    * Returns fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke\\n    */\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityAmount,\\n            uint32 lastLiquidityAddTimestamp,\\n            uint256 innerFeeGrowth0Token,\\n            uint256 innerFeeGrowth1Token,\\n            uint128 fees0,\\n            uint128 fees1\\n        );\\n}\\n\",\"keccak256\":\"0x6dec3d1e0f8a498a574dc7d7f0661bd9c7bb44fb15007b4c25d5c7b1cf7ea9d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610d71806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c078e90c14610030575b600080fd5b61004361003e36600461074e565b610059565b6040516100509190610787565b60405180910390f35b606060008373ffffffffffffffffffffffffffffffffffffffff1663e76c01e46040518163ffffffff1660e01b815260040160e060405180830381865afa1580156100a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100cc919061089c565b5050505050915050600083603c6100e39190610956565b6100ed90836109ff565b905060006100fc85603c610956565b6101069084610a63565b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618600283900b1215610158577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761891505b6101817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610ac6565b60020b8160020b13156101ba576101b77ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610ac6565b90505b6000603c6101c884846109ff565b6101d3906001610a63565b6101dd9190610b04565b60020b67ffffffffffffffff8111156101f8576101f8610b9f565b604051908082528060200260200182016040528015610221578160200160208202803683370190505b509050600080603c6102338187610b04565b61023d9190610956565b90505b603c61024c8186610b04565b6102569190610956565b60020b8160020b136103de5760006008610271603c84610b04565b6040517fc677e3e000000000000000000000000000000000000000000000000000000000815260029190910b90911d600181900b6004830152915060009073ffffffffffffffffffffffffffffffffffffffff8c169063c677e3e090602401602060405180830381865afa1580156102ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103119190610bce565b90505b80156103bd576000610325826105b4565b90508060ff166001901b821891506000603c8260ff168560010b61010061034c9190610956565b6103569190610a63565b6103609190610956565b90508860020b8160020b1215801561037e57508760020b8160020b13155b156103b65780878761038f81610be7565b9850815181106103a1576103a1610c1f565b602002602001019060020b908160020b815250505b5050610314565b506103cd9050603c610100610956565b6103d79082610a63565b9050610240565b508067ffffffffffffffff8111156103f8576103f8610b9f565b60405190808252806020026020018201604052801561042b57816020015b60608152602001906001900390816104165790505b50955060005b818110156105a8576000806000808c73ffffffffffffffffffffffffffffffffffffffff1663f30dba9388878151811061046d5761046d610c1f565b60200260200101516040518263ffffffff1660e01b815260040161049a919060029190910b815260200190565b61010060405180830381865afa1580156104b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dc9190610c62565b505050509350935093509350838383838a89815181106104fe576104fe610c1f565b6020026020010151604051602001610565959493929190608095861b7fffffffffffffffffffffffffffffffff000000000000000000000000000000001681529390941b60108401526020830191909152604082015260e89190911b606082015260630190565b6040516020818303038152906040528b868151811061058657610586610c1f565b60200260200101819052505050505080806105a090610be7565b915050610431565b50505050505092915050565b6000808211610623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f7820697320300000000000000000000000000000000000000000000000000000604482015260640160405180910390fd5b700100000000000000000000000000000000821061064e57608091821c9161064b9082610d16565b90505b68010000000000000000821061067157604091821c9161066e9082610d16565b90505b640100000000821061069057602091821c9161068d9082610d16565b90505b6201000082106106ad57601091821c916106aa9082610d16565b90505b61010082106106c957600891821c916106c69082610d16565b90505b601082106106e457600491821c916106e19082610d16565b90505b600482106106ff57600291821c916106fc9082610d16565b90505b6002821061071557610712600182610d16565b90505b919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461073c57600080fd5b50565b8060020b811461073c57600080fd5b6000806040838503121561076157600080fd5b823561076c8161071a565b9150602083013561077c8161073f565b809150509250929050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b83811015610850577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc089870301855282518051808852835b81811015610802578281018a01518982018b015289016107e7565b8181111561081257848a838b0101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016969096018701955093860193918601916001016107af565b509398975050505050505050565b80516107158161071a565b805161ffff8116811461071557600080fd5b805160ff8116811461071557600080fd5b8051801515811461071557600080fd5b600080600080600080600060e0888a0312156108b757600080fd5b87516108c28161071a565b60208901519097506108d38161073f565b95506108e160408901610869565b94506108ef60608901610869565b93506108fd6080890161087b565b925061090b60a0890161087b565b915061091960c0890161088c565b905092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160020b8360020b627fffff60008213600084138383048511828216161561098257610982610927565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000060008512868205861281841616156109bd576109bd610927565b600087129250858205871284841616156109d9576109d9610927565b858505871281841616156109ef576109ef610927565b5050509290910295945050505050565b60008160020b8360020b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000001831281151615610a4257610a42610927565b81627fffff018313811615610a5957610a59610927565b5090039392505050565b60008160020b8360020b6000821282627fffff03821381151615610a8957610a89610927565b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000038212811615610abd57610abd610927565b50019392505050565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008103610afb57610afb610927565b60000392915050565b60008160020b8360020b80610b42577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083141615610b9657610b96610927565b90059392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208284031215610be057600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c1857610c18610927565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b805163ffffffff8116811461071557600080fd5b600080600080600080600080610100898b031215610c7f57600080fd5b88516fffffffffffffffffffffffffffffffff81168114610c9f57600080fd5b80985050602089015180600f0b8114610cb757600080fd5b80975050604089015195506060890151945060808901518060060b8114610cdd57600080fd5b9350610ceb60a08a0161085e565b9250610cf960c08a01610c4e565b9150610d0760e08a0161088c565b90509295985092959890939650565b600060ff821660ff84168060ff03821115610d3357610d33610927565b01939250505056fea264697066735822122004fed1268119302f2c3e2829193859d6457dcdf4de7ff4cf1f284722311d689964736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c078e90c14610030575b600080fd5b61004361003e36600461074e565b610059565b6040516100509190610787565b60405180910390f35b606060008373ffffffffffffffffffffffffffffffffffffffff1663e76c01e46040518163ffffffff1660e01b815260040160e060405180830381865afa1580156100a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100cc919061089c565b5050505050915050600083603c6100e39190610956565b6100ed90836109ff565b905060006100fc85603c610956565b6101069084610a63565b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618600283900b1215610158577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761891505b6101817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610ac6565b60020b8160020b13156101ba576101b77ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610ac6565b90505b6000603c6101c884846109ff565b6101d3906001610a63565b6101dd9190610b04565b60020b67ffffffffffffffff8111156101f8576101f8610b9f565b604051908082528060200260200182016040528015610221578160200160208202803683370190505b509050600080603c6102338187610b04565b61023d9190610956565b90505b603c61024c8186610b04565b6102569190610956565b60020b8160020b136103de5760006008610271603c84610b04565b6040517fc677e3e000000000000000000000000000000000000000000000000000000000815260029190910b90911d600181900b6004830152915060009073ffffffffffffffffffffffffffffffffffffffff8c169063c677e3e090602401602060405180830381865afa1580156102ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103119190610bce565b90505b80156103bd576000610325826105b4565b90508060ff166001901b821891506000603c8260ff168560010b61010061034c9190610956565b6103569190610a63565b6103609190610956565b90508860020b8160020b1215801561037e57508760020b8160020b13155b156103b65780878761038f81610be7565b9850815181106103a1576103a1610c1f565b602002602001019060020b908160020b815250505b5050610314565b506103cd9050603c610100610956565b6103d79082610a63565b9050610240565b508067ffffffffffffffff8111156103f8576103f8610b9f565b60405190808252806020026020018201604052801561042b57816020015b60608152602001906001900390816104165790505b50955060005b818110156105a8576000806000808c73ffffffffffffffffffffffffffffffffffffffff1663f30dba9388878151811061046d5761046d610c1f565b60200260200101516040518263ffffffff1660e01b815260040161049a919060029190910b815260200190565b61010060405180830381865afa1580156104b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dc9190610c62565b505050509350935093509350838383838a89815181106104fe576104fe610c1f565b6020026020010151604051602001610565959493929190608095861b7fffffffffffffffffffffffffffffffff000000000000000000000000000000001681529390941b60108401526020830191909152604082015260e89190911b606082015260630190565b6040516020818303038152906040528b868151811061058657610586610c1f565b60200260200101819052505050505080806105a090610be7565b915050610431565b50505050505092915050565b6000808211610623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f7820697320300000000000000000000000000000000000000000000000000000604482015260640160405180910390fd5b700100000000000000000000000000000000821061064e57608091821c9161064b9082610d16565b90505b68010000000000000000821061067157604091821c9161066e9082610d16565b90505b640100000000821061069057602091821c9161068d9082610d16565b90505b6201000082106106ad57601091821c916106aa9082610d16565b90505b61010082106106c957600891821c916106c69082610d16565b90505b601082106106e457600491821c916106e19082610d16565b90505b600482106106ff57600291821c916106fc9082610d16565b90505b6002821061071557610712600182610d16565b90505b919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461073c57600080fd5b50565b8060020b811461073c57600080fd5b6000806040838503121561076157600080fd5b823561076c8161071a565b9150602083013561077c8161073f565b809150509250929050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b83811015610850577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc089870301855282518051808852835b81811015610802578281018a01518982018b015289016107e7565b8181111561081257848a838b0101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016969096018701955093860193918601916001016107af565b509398975050505050505050565b80516107158161071a565b805161ffff8116811461071557600080fd5b805160ff8116811461071557600080fd5b8051801515811461071557600080fd5b600080600080600080600060e0888a0312156108b757600080fd5b87516108c28161071a565b60208901519097506108d38161073f565b95506108e160408901610869565b94506108ef60608901610869565b93506108fd6080890161087b565b925061090b60a0890161087b565b915061091960c0890161088c565b905092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160020b8360020b627fffff60008213600084138383048511828216161561098257610982610927565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000060008512868205861281841616156109bd576109bd610927565b600087129250858205871284841616156109d9576109d9610927565b858505871281841616156109ef576109ef610927565b5050509290910295945050505050565b60008160020b8360020b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000001831281151615610a4257610a42610927565b81627fffff018313811615610a5957610a59610927565b5090039392505050565b60008160020b8360020b6000821282627fffff03821381151615610a8957610a89610927565b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000038212811615610abd57610abd610927565b50019392505050565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008103610afb57610afb610927565b60000392915050565b60008160020b8360020b80610b42577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083141615610b9657610b96610927565b90059392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208284031215610be057600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c1857610c18610927565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b805163ffffffff8116811461071557600080fd5b600080600080600080600080610100898b031215610c7f57600080fd5b88516fffffffffffffffffffffffffffffffff81168114610c9f57600080fd5b80985050602089015180600f0b8114610cb757600080fd5b80975050604089015195506060890151945060808901518060060b8114610cdd57600080fd5b9350610ceb60a08a0161085e565b9250610cf960c08a01610c4e565b9150610d0760e08a0161088c565b90509295985092959890939650565b600060ff821660ff84168060ff03821115610d3357610d33610927565b01939250505056fea264697066735822122004fed1268119302f2c3e2829193859d6457dcdf4de7ff4cf1f284722311d689964736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
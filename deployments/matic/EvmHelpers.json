{
  "address": "0xa218543cc21ee9388Fa1E509F950FD127Ca82155",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gaslimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV3",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tickRange",
          "type": "int24"
        }
      ],
      "name": "getTicks",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "ticks",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct MultiCall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct MultiCall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "multicallWithGas",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "gasUsed",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct MultiCall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "gasBuffer",
          "type": "uint256"
        }
      ],
      "name": "multicallWithGasLimitation",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "lastSuccessIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1065213046e393dce417ad413c0590fb3711c4abb79de8273c0c4abb37d9bbc4",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0xa218543cc21ee9388Fa1E509F950FD127Ca82155",
    "transactionIndex": 36,
    "gasUsed": "1272818",
    "logsBloom": "0x
    "blockHash": "0xe71b6c553d4a1578d654c4e75c3d8ad70b2bfeef2ba95ef22c014052b8f5e7ed",
    "transactionHash": "0x1065213046e393dce417ad413c0590fb3711c4abb79de8273c0c4abb37d9bbc4",
    "logs": [
      {
        "transactionIndex": 36,
        "blockNumber": 22828501,
        "transactionHash": "0x1065213046e393dce417ad413c0590fb3711c4abb79de8273c0c4abb37d9bbc4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000009e44be32615c000000000000000000000000000000000000000000000000000b35a046126a8e000000000000000000000000000000000000000000000059e169b93785651bb89f0000000000000000000000000000000000000000000000000a975b87e00932000000000000000000000000000000000000000000000059e16a577c43977d149f",
        "logIndex": 186,
        "blockHash": "0xe71b6c553d4a1578d654c4e75c3d8ad70b2bfeef2ba95ef22c014052b8f5e7ed"
      }
    ],
    "blockNumber": 22828501,
    "cumulativeGasUsed": "9491366",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "34497ad678428783ac99d93cf7919a99",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaslimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV3\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickRange\",\"type\":\"int24\"}],\"name\":\"getTicks\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"ticks\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicallWithGas\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasUsed\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"gasBuffer\",\"type\":\"uint256\"}],\"name\":\"multicallWithGasLimitation\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"lastSuccessIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EvmHelpers.sol\":\"EvmHelpers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/Ether.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\n\\ncontract Ether {\\n    function balanceOf(address wallet) external view returns (uint256) {\\n        return wallet.balance;\\n    }\\n}\\n\",\"keccak256\":\"0x758e468da7f64770a69a76101055fe92a760407480cdd1521d1870e53143547f\",\"license\":\"MIT\"},\"contracts/EvmHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./Ether.sol\\\";\\nimport \\\"./MultiCall.sol\\\";\\nimport \\\"./UniV3Helper.sol\\\";\\n\\n//solhint-disable-next-line no-empty-blocks\\ncontract EvmHelpers is Ether, MultiCall, UniV3Helper {}\\n\",\"keccak256\":\"0xaba0329291f139737064a69e93cafc35e10a6d2849f34a4ce320b891b65da5fb\",\"license\":\"MIT\"},\"contracts/MultiCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\n\\ncontract MultiCall {\\n    struct Call {\\n        address to;\\n        bytes data;\\n    }\\n\\n   function multicall(Call[] memory calls) public returns (bytes[] memory results) {\\n        results = new bytes[](calls.length);\\n        for (uint i = 0; i < calls.length; i++) {\\n            (, results[i]) = calls[i].to.call(calls[i].data);  // solhint-disable-line avoid-low-level-calls\\n        }\\n    }\\n\\n\\n    // be careful with calls.length == 0\\n    function multicallWithGasLimitation(Call[] memory calls, uint256 gasBuffer) public returns (bytes[] memory results, uint256 lastSuccessIndex) {\\n        results = new bytes[](calls.length);\\n        for (uint i = 0; i < calls.length; i++) {\\n            (, results[i]) = calls[i].to.call(calls[i].data);  // solhint-disable-line avoid-low-level-calls\\n            if (gasleft() < gasBuffer) {\\n                return (results, i);\\n            }\\n        }\\n        return (results, calls.length - 1);\\n    }\\n\\n   function multicallWithGas(Call[] memory calls) public returns (bytes[] memory results, uint256[] memory gasUsed) {\\n        results = new bytes[](calls.length);\\n        gasUsed = new uint256[](calls.length);\\n        for (uint i = 0; i < calls.length; i++) {\\n            uint256 initialGas = gasleft();\\n            (, results[i]) = calls[i].to.call(calls[i].data);  // solhint-disable-line avoid-low-level-calls\\n            gasUsed[i] = initialGas - gasleft();\\n        }\\n    }\\n\\n    function gaslimit() external view returns (uint256) {\\n        return block.gaslimit;\\n    }\\n\\n    function gasLeft() external view returns (uint256) {\\n        return gasleft();\\n    }\\n}\\n\",\"keccak256\":\"0xbb718eed34cf34e745416f26def5e2c3bb19a70f7fd3597ef549f2f9c91f1057\",\"license\":\"MIT\"},\"contracts/UniV3Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./interfaces/IUniswapV3.sol\\\";\\n\\n\\ncontract UniV3Helper {\\n    int24 private constant _MIN_TICK = -887272;\\n    int24 private constant _MAX_TICK = -_MIN_TICK;\\n\\n    struct Tick {\\n        uint128 liquidityGross;\\n        int128 liquidityNet;\\n        uint256 feeGrowthOutside0X128;\\n        uint256 feeGrowthOutside1X128;\\n        int56 tickCumulativeOutside;\\n        uint160 secondsPerLiquidityOutsideX128;\\n        uint32 secondsOutside;\\n        int24 index; // tick index\\n    }\\n\\n    function getTicks(IUniswapV3 pool, int24 tickRange) external view returns (bytes[] memory ticks) {\\n        int24 tickSpacing = pool.tickSpacing();\\n        (,int24 tick,,,,,) = pool.slot0();\\n\\n        int24 fromTick = tick - (tickSpacing * tickRange);\\n        int24 toTick = tick + (tickSpacing * tickRange);\\n        if (fromTick < _MIN_TICK) {\\n            fromTick = _MIN_TICK;\\n        }\\n        if (toTick > _MAX_TICK) {\\n            toTick = _MAX_TICK;\\n        }\\n\\n        int24[] memory initTicks = new int24[](uint256(int256((toTick - fromTick + 1) / tickSpacing)));\\n\\n        uint256 counter = 0;\\n        for (int24 tickNum = (fromTick / tickSpacing * tickSpacing); tickNum <=  (toTick / tickSpacing * tickSpacing); tickNum += (256 * tickSpacing)) {\\n            int16 pos = int16((tickNum / tickSpacing) >> 8);\\n            uint256 bm = pool.tickBitmap(pos);\\n\\n             while (bm != 0) {\\n                 uint8 bit = _mostSignificantBit(bm);\\n                 initTicks[counter] = (int24(pos) * 256 + int24(uint24(bit))) * tickSpacing;\\n\\n                 counter += 1;\\n                 bm ^= 1 << bit;\\n             }\\n\\n        }\\n\\n        ticks = new bytes[](counter);\\n        for (uint256 i = 0; i < counter; i++) {\\n            (\\n                uint128 liquidityGross,\\n                int128 liquidityNet,\\n                uint256 feeGrowthOutside0X128,\\n                uint256 feeGrowthOutside1X128\\n                , // int56 tickCumulativeOutside,\\n                , // secondsPerLiquidityOutsideX128\\n                , // uint32 secondsOutside\\n                , // init\\n            ) = pool.ticks(initTicks[i]);\\n\\n             ticks[i] = abi.encodePacked(\\n                 liquidityGross,\\n                 liquidityNet,\\n                 feeGrowthOutside0X128,\\n                 feeGrowthOutside1X128,\\n                 // tickCumulativeOutside,\\n                 // secondsPerLiquidityOutsideX128,\\n                 // secondsOutside,\\n                 initTicks[i]\\n             );\\n        }\\n    }\\n\\n    function _mostSignificantBit(uint256 x) private pure returns (uint8 r) {\\n        require(x > 0, \\\"x is 0\\\");\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n}\\n\",\"keccak256\":\"0x0b5e564ec4d62f024f430329c75e13ee9f12fd6c707910de99ad2838be1b89fb\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\n\\ninterface IUniswapV3 {\\n    function tickSpacing() external view returns (int24);\\n\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    function liquidity() external view returns (uint128);\\n\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0xe8d108b7d93b37e14e205561c89003f845f8f9f98433797d5ce4f2ae6c3f8c18\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061161e806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806370a082311161005b57806370a08231146100c0578063c078e90c146100e8578063caa5c23f14610108578063d699fe151461011b57600080fd5b80632a722839146100825780632ddb301b14610097578063489dba161461009f575b600080fd5b455b6040519081526020015b60405180910390f35b61008461013c565b6100b26100ad366004610eae565b610144565b60405161008e929190610fa9565b6100846100ce366004610ff3565b73ffffffffffffffffffffffffffffffffffffffff163190565b6100fb6100f6366004611026565b6102f0565b60405161008e919061105f565b6100fb610116366004610eae565b61088b565b61012e610129366004611072565b6109c3565b60405161008e9291906110b7565b60005a905090565b606080825167ffffffffffffffff81111561016157610161610c87565b60405190808252806020026020018201604052801561019457816020015b606081526020019060019003908161017f5790505b509150825167ffffffffffffffff8111156101b1576101b1610c87565b6040519080825280602002602001820160405280156101da578160200160208202803683370190505b50905060005b83518110156102ea5760005a9050848281518110610200576102006110d9565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16858381518110610234576102346110d9565b60200260200101516020015160405161024d9190611108565b6000604051808303816000865af19150503d806000811461028a576040519150601f19603f3d011682016040523d82523d6000602084013e61028f565b606091505b5090508483815181106102a4576102a46110d9565b60200260200101819052505a6102ba9082611153565b8383815181106102cc576102cc6110d9565b602090810291909101015250806102e28161116a565b9150506101e0565b50915091565b606060008373ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561033f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036391906111a3565b905060008473ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa1580156103b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d691906111ed565b5050505050915050600084836103ec9190611280565b6103f69083611329565b905060006104048685611280565b61040e908461138d565b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618600283900b1215610460577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761891505b6104897ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186113f0565b60020b8160020b13156104c2576104bf7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186113f0565b90505b6000846104cf8484611329565b6104da90600161138d565b6104e4919061142f565b60020b67ffffffffffffffff8111156104ff576104ff610c87565b604051908082528060200260200182016040528015610528578160200160208202803683370190505b50905060008086610539818761142f565b6105439190611280565b90505b86610551818661142f565b61055b9190611280565b60020b8160020b136106b45760006008610575898461142f565b6040517f5339c29600000000000000000000000000000000000000000000000000000000815260029190910b90911d600181900b6004830152915060009073ffffffffffffffffffffffffffffffffffffffff8d1690635339c29690602401602060405180830381865afa1580156105f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061591906114ca565b90505b801561069457600061062982610b21565b90508960ff8216610640600186900b610100611280565b61064a919061138d565b6106549190611280565b868681518110610666576106666110d9565b60029290920b602092830291909101909101526106846001866114e3565b9450600160ff9091161b18610618565b506106a3905087610100611280565b6106ad908261138d565b9050610546565b508067ffffffffffffffff8111156106ce576106ce610c87565b60405190808252806020026020018201604052801561070157816020015b60608152602001906001900390816106ec5790505b50965060005b8181101561087e576000806000808d73ffffffffffffffffffffffffffffffffffffffff1663f30dba93888781518110610743576107436110d9565b60200260200101516040518263ffffffff1660e01b8152600401610770919060029190910b815260200190565b61010060405180830381865afa15801561078e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b2919061150f565b505050509350935093509350838383838a89815181106107d4576107d46110d9565b602002602001015160405160200161083b959493929190608095861b7fffffffffffffffffffffffffffffffff000000000000000000000000000000001681529390941b60108401526020830191909152604082015260e89190911b606082015260630190565b6040516020818303038152906040528c868151811061085c5761085c6110d9565b60200260200101819052505050505080806108769061116a565b915050610707565b5050505050505092915050565b6060815167ffffffffffffffff8111156108a7576108a7610c87565b6040519080825280602002602001820160405280156108da57816020015b60608152602001906001900390816108c55790505b50905060005b82518110156109bd578281815181106108fb576108fb6110d9565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1683828151811061092f5761092f6110d9565b6020026020010151602001516040516109489190611108565b6000604051808303816000865af19150503d8060008114610985576040519150601f19603f3d011682016040523d82523d6000602084013e61098a565b606091505b50905082828151811061099f5761099f6110d9565b602002602001018190525080806109b59061116a565b9150506108e0565b50919050565b60606000835167ffffffffffffffff8111156109e1576109e1610c87565b604051908082528060200260200182016040528015610a1457816020015b60608152602001906001900390816109ff5790505b50915060005b8451811015610b0557848181518110610a3557610a356110d9565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16858281518110610a6957610a696110d9565b602002602001015160200151604051610a829190611108565b6000604051808303816000865af19150503d8060008114610abf576040519150601f19603f3d011682016040523d82523d6000602084013e610ac4565b606091505b509050838281518110610ad957610ad96110d9565b6020026020010181905250835a1015610af3579050610b1a565b80610afd8161116a565b915050610a1a565b508160018551610b159190611153565b915091505b9250929050565b6000808211610b90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f7820697320300000000000000000000000000000000000000000000000000000604482015260640160405180910390fd5b7001000000000000000000000000000000008210610bbb57608091821c91610bb890826115c3565b90505b680100000000000000008210610bde57604091821c91610bdb90826115c3565b90505b6401000000008210610bfd57602091821c91610bfa90826115c3565b90505b620100008210610c1a57601091821c91610c1790826115c3565b90505b6101008210610c3657600891821c91610c3390826115c3565b90505b60108210610c5157600491821c91610c4e90826115c3565b90505b60048210610c6c57600291821c91610c6990826115c3565b90505b60028210610c8257610c7f6001826115c3565b90505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610cd957610cd9610c87565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610d2657610d26610c87565b604052919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610d5057600080fd5b50565b6000601f8381840112610d6557600080fd5b8235602067ffffffffffffffff80831115610d8257610d82610c87565b8260051b610d91838201610cdf565b9384528681018301938381019089861115610dab57600080fd5b84890192505b85831015610ea157823584811115610dc95760008081fd5b890160407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828d038101821315610e005760008081fd5b610e08610cb6565b88840135610e1581610d2e565b81528383013588811115610e295760008081fd5b8085019450508d603f850112610e3f5760008081fd5b8884013588811115610e5357610e53610c87565b610e628a848e84011601610cdf565b92508083528e84828701011115610e795760008081fd5b808486018b85013760009083018a015280890191909152845250509184019190840190610db1565b9998505050505050505050565b600060208284031215610ec057600080fd5b813567ffffffffffffffff811115610ed757600080fd5b610ee384828501610d53565b949350505050565b60005b83811015610f06578181015183820152602001610eee565b83811115610f15576000848401525b50505050565b600082825180855260208086019550808260051b84010181860160005b84811015610f9c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080878503018a5282518051808652610f7e81888801898501610eeb565b9a86019a601f01909116939093018401925090830190600101610f38565b5090979650505050505050565b604081526000610fbc6040830185610f1b565b82810360208481019190915284518083528582019282019060005b81811015610f9c57845183529383019391830191600101610fd7565b60006020828403121561100557600080fd5b813561101081610d2e565b9392505050565b8060020b8114610d5057600080fd5b6000806040838503121561103957600080fd5b823561104481610d2e565b9150602083013561105481611017565b809150509250929050565b6020815260006110106020830184610f1b565b6000806040838503121561108557600080fd5b823567ffffffffffffffff81111561109c57600080fd5b6110a885828601610d53565b95602094909401359450505050565b6040815260006110ca6040830185610f1b565b90508260208301529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000825161111a818460208701610eeb565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561116557611165611124565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561119c5761119c611124565b5060010190565b6000602082840312156111b557600080fd5b815161101081611017565b8051610c8281610d2e565b805161ffff81168114610c8257600080fd5b80518015158114610c8257600080fd5b600080600080600080600060e0888a03121561120857600080fd5b875161121381610d2e565b602089015190975061122481611017565b9550611232604089016111cb565b9450611240606089016111cb565b935061124e608089016111cb565b925060a088015160ff8116811461126457600080fd5b915061127260c089016111dd565b905092959891949750929550565b60008160020b8360020b627fffff6000821360008413838304851182821616156112ac576112ac611124565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000060008512868205861281841616156112e7576112e7611124565b6000871292508582058712848416161561130357611303611124565b8585058712818416161561131957611319611124565b5050509290910295945050505050565b60008160020b8360020b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000183128115161561136c5761136c611124565b81627fffff01831381161561138357611383611124565b5090039392505050565b60008160020b8360020b6000821282627fffff038213811516156113b3576113b3611124565b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000382128116156113e7576113e7611124565b50019392505050565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000081141561142657611426611124565b60000392915050565b60008160020b8360020b8061146d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000831416156114c1576114c1611124565b90059392505050565b6000602082840312156114dc57600080fd5b5051919050565b600082198211156114f6576114f6611124565b500190565b805163ffffffff81168114610c8257600080fd5b600080600080600080600080610100898b03121561152c57600080fd5b88516fffffffffffffffffffffffffffffffff8116811461154c57600080fd5b80985050602089015180600f0b811461156457600080fd5b80975050604089015195506060890151945060808901518060060b811461158a57600080fd5b935061159860a08a016111c0565b92506115a660c08a016114fb565b91506115b460e08a016111dd565b90509295985092959890939650565b600060ff821660ff84168060ff038211156115e0576115e0611124565b01939250505056fea26469706673582212205cf0bedb70968f9b50d31dda522d9ccf338357cd7ef4937c2e8ad77367bdae8864736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806370a082311161005b57806370a08231146100c0578063c078e90c146100e8578063caa5c23f14610108578063d699fe151461011b57600080fd5b80632a722839146100825780632ddb301b14610097578063489dba161461009f575b600080fd5b455b6040519081526020015b60405180910390f35b61008461013c565b6100b26100ad366004610eae565b610144565b60405161008e929190610fa9565b6100846100ce366004610ff3565b73ffffffffffffffffffffffffffffffffffffffff163190565b6100fb6100f6366004611026565b6102f0565b60405161008e919061105f565b6100fb610116366004610eae565b61088b565b61012e610129366004611072565b6109c3565b60405161008e9291906110b7565b60005a905090565b606080825167ffffffffffffffff81111561016157610161610c87565b60405190808252806020026020018201604052801561019457816020015b606081526020019060019003908161017f5790505b509150825167ffffffffffffffff8111156101b1576101b1610c87565b6040519080825280602002602001820160405280156101da578160200160208202803683370190505b50905060005b83518110156102ea5760005a9050848281518110610200576102006110d9565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16858381518110610234576102346110d9565b60200260200101516020015160405161024d9190611108565b6000604051808303816000865af19150503d806000811461028a576040519150601f19603f3d011682016040523d82523d6000602084013e61028f565b606091505b5090508483815181106102a4576102a46110d9565b60200260200101819052505a6102ba9082611153565b8383815181106102cc576102cc6110d9565b602090810291909101015250806102e28161116a565b9150506101e0565b50915091565b606060008373ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561033f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036391906111a3565b905060008473ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa1580156103b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d691906111ed565b5050505050915050600084836103ec9190611280565b6103f69083611329565b905060006104048685611280565b61040e908461138d565b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618600283900b1215610460577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761891505b6104897ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186113f0565b60020b8160020b13156104c2576104bf7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276186113f0565b90505b6000846104cf8484611329565b6104da90600161138d565b6104e4919061142f565b60020b67ffffffffffffffff8111156104ff576104ff610c87565b604051908082528060200260200182016040528015610528578160200160208202803683370190505b50905060008086610539818761142f565b6105439190611280565b90505b86610551818661142f565b61055b9190611280565b60020b8160020b136106b45760006008610575898461142f565b6040517f5339c29600000000000000000000000000000000000000000000000000000000815260029190910b90911d600181900b6004830152915060009073ffffffffffffffffffffffffffffffffffffffff8d1690635339c29690602401602060405180830381865afa1580156105f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061591906114ca565b90505b801561069457600061062982610b21565b90508960ff8216610640600186900b610100611280565b61064a919061138d565b6106549190611280565b868681518110610666576106666110d9565b60029290920b602092830291909101909101526106846001866114e3565b9450600160ff9091161b18610618565b506106a3905087610100611280565b6106ad908261138d565b9050610546565b508067ffffffffffffffff8111156106ce576106ce610c87565b60405190808252806020026020018201604052801561070157816020015b60608152602001906001900390816106ec5790505b50965060005b8181101561087e576000806000808d73ffffffffffffffffffffffffffffffffffffffff1663f30dba93888781518110610743576107436110d9565b60200260200101516040518263ffffffff1660e01b8152600401610770919060029190910b815260200190565b61010060405180830381865afa15801561078e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b2919061150f565b505050509350935093509350838383838a89815181106107d4576107d46110d9565b602002602001015160405160200161083b959493929190608095861b7fffffffffffffffffffffffffffffffff000000000000000000000000000000001681529390941b60108401526020830191909152604082015260e89190911b606082015260630190565b6040516020818303038152906040528c868151811061085c5761085c6110d9565b60200260200101819052505050505080806108769061116a565b915050610707565b5050505050505092915050565b6060815167ffffffffffffffff8111156108a7576108a7610c87565b6040519080825280602002602001820160405280156108da57816020015b60608152602001906001900390816108c55790505b50905060005b82518110156109bd578281815181106108fb576108fb6110d9565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1683828151811061092f5761092f6110d9565b6020026020010151602001516040516109489190611108565b6000604051808303816000865af19150503d8060008114610985576040519150601f19603f3d011682016040523d82523d6000602084013e61098a565b606091505b50905082828151811061099f5761099f6110d9565b602002602001018190525080806109b59061116a565b9150506108e0565b50919050565b60606000835167ffffffffffffffff8111156109e1576109e1610c87565b604051908082528060200260200182016040528015610a1457816020015b60608152602001906001900390816109ff5790505b50915060005b8451811015610b0557848181518110610a3557610a356110d9565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16858281518110610a6957610a696110d9565b602002602001015160200151604051610a829190611108565b6000604051808303816000865af19150503d8060008114610abf576040519150601f19603f3d011682016040523d82523d6000602084013e610ac4565b606091505b509050838281518110610ad957610ad96110d9565b6020026020010181905250835a1015610af3579050610b1a565b80610afd8161116a565b915050610a1a565b508160018551610b159190611153565b915091505b9250929050565b6000808211610b90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f7820697320300000000000000000000000000000000000000000000000000000604482015260640160405180910390fd5b7001000000000000000000000000000000008210610bbb57608091821c91610bb890826115c3565b90505b680100000000000000008210610bde57604091821c91610bdb90826115c3565b90505b6401000000008210610bfd57602091821c91610bfa90826115c3565b90505b620100008210610c1a57601091821c91610c1790826115c3565b90505b6101008210610c3657600891821c91610c3390826115c3565b90505b60108210610c5157600491821c91610c4e90826115c3565b90505b60048210610c6c57600291821c91610c6990826115c3565b90505b60028210610c8257610c7f6001826115c3565b90505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610cd957610cd9610c87565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610d2657610d26610c87565b604052919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610d5057600080fd5b50565b6000601f8381840112610d6557600080fd5b8235602067ffffffffffffffff80831115610d8257610d82610c87565b8260051b610d91838201610cdf565b9384528681018301938381019089861115610dab57600080fd5b84890192505b85831015610ea157823584811115610dc95760008081fd5b890160407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828d038101821315610e005760008081fd5b610e08610cb6565b88840135610e1581610d2e565b81528383013588811115610e295760008081fd5b8085019450508d603f850112610e3f5760008081fd5b8884013588811115610e5357610e53610c87565b610e628a848e84011601610cdf565b92508083528e84828701011115610e795760008081fd5b808486018b85013760009083018a015280890191909152845250509184019190840190610db1565b9998505050505050505050565b600060208284031215610ec057600080fd5b813567ffffffffffffffff811115610ed757600080fd5b610ee384828501610d53565b949350505050565b60005b83811015610f06578181015183820152602001610eee565b83811115610f15576000848401525b50505050565b600082825180855260208086019550808260051b84010181860160005b84811015610f9c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080878503018a5282518051808652610f7e81888801898501610eeb565b9a86019a601f01909116939093018401925090830190600101610f38565b5090979650505050505050565b604081526000610fbc6040830185610f1b565b82810360208481019190915284518083528582019282019060005b81811015610f9c57845183529383019391830191600101610fd7565b60006020828403121561100557600080fd5b813561101081610d2e565b9392505050565b8060020b8114610d5057600080fd5b6000806040838503121561103957600080fd5b823561104481610d2e565b9150602083013561105481611017565b809150509250929050565b6020815260006110106020830184610f1b565b6000806040838503121561108557600080fd5b823567ffffffffffffffff81111561109c57600080fd5b6110a885828601610d53565b95602094909401359450505050565b6040815260006110ca6040830185610f1b565b90508260208301529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000825161111a818460208701610eeb565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561116557611165611124565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561119c5761119c611124565b5060010190565b6000602082840312156111b557600080fd5b815161101081611017565b8051610c8281610d2e565b805161ffff81168114610c8257600080fd5b80518015158114610c8257600080fd5b600080600080600080600060e0888a03121561120857600080fd5b875161121381610d2e565b602089015190975061122481611017565b9550611232604089016111cb565b9450611240606089016111cb565b935061124e608089016111cb565b925060a088015160ff8116811461126457600080fd5b915061127260c089016111dd565b905092959891949750929550565b60008160020b8360020b627fffff6000821360008413838304851182821616156112ac576112ac611124565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000060008512868205861281841616156112e7576112e7611124565b6000871292508582058712848416161561130357611303611124565b8585058712818416161561131957611319611124565b5050509290910295945050505050565b60008160020b8360020b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000183128115161561136c5761136c611124565b81627fffff01831381161561138357611383611124565b5090039392505050565b60008160020b8360020b6000821282627fffff038213811516156113b3576113b3611124565b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000382128116156113e7576113e7611124565b50019392505050565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000081141561142657611426611124565b60000392915050565b60008160020b8360020b8061146d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000831416156114c1576114c1611124565b90059392505050565b6000602082840312156114dc57600080fd5b5051919050565b600082198211156114f6576114f6611124565b500190565b805163ffffffff81168114610c8257600080fd5b600080600080600080600080610100898b03121561152c57600080fd5b88516fffffffffffffffffffffffffffffffff8116811461154c57600080fd5b80985050602089015180600f0b811461156457600080fd5b80975050604089015195506060890151945060808901518060060b811461158a57600080fd5b935061159860a08a016111c0565b92506115a660c08a016114fb565b91506115b460e08a016111dd565b90509295985092959890939650565b600060ff821660ff84168060ff038211156115e0576115e0611124565b01939250505056fea26469706673582212205cf0bedb70968f9b50d31dda522d9ccf338357cd7ef4937c2e8ad77367bdae8864736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "address": "0x4EA90d283BD851c26EEfF1A3799FbC9CEfe50EA8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWETH",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ETHTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bool[]",
          "name": "statuses",
          "type": "bool[]"
        },
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "name": "EstimationResults",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ForceApproveFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughProfit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "arguments",
          "type": "bytes[]"
        }
      ],
      "name": "arbitraryCalls",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "arguments",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "arbitraryCalls",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "arguments",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "minReturn",
          "type": "uint256"
        }
      ],
      "name": "arbitraryCallsWithEthCheck",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "arguments",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minReturn",
          "type": "uint256"
        }
      ],
      "name": "arbitraryCallsWithEthCheck",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "arguments",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minReturn",
          "type": "uint256"
        }
      ],
      "name": "arbitraryCallsWithTokenCheck",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "arguments",
          "type": "bytes[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minReturn",
          "type": "uint256"
        }
      ],
      "name": "arbitraryCallsWithTokenCheck",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "arguments",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "estimateArbitraryCalls",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "arguments",
          "type": "bytes[]"
        }
      ],
      "name": "estimateArbitraryCalls",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rescueEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unwrapTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2853a6ccc069f950fd1f94a59d5b25ddf66fb73de6e834ab2a6545eb8895149e",
  "receipt": {
    "to": null,
    "from": "0xa38038f9Ac2b3A7b4247804A46C787960E160Aed",
    "contractAddress": "0x4EA90d283BD851c26EEfF1A3799FbC9CEfe50EA8",
    "transactionIndex": 23,
    "gasUsed": "1544160",
    "logsBloom": "0x
    "blockHash": "0x5c640fbafa20a9f57e2bac277acac22dd7bb2e853a633f4f539c6c68d35d4ab2",
    "transactionHash": "0x2853a6ccc069f950fd1f94a59d5b25ddf66fb73de6e834ab2a6545eb8895149e",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 65389628,
        "transactionHash": "0x2853a6ccc069f950fd1f94a59d5b25ddf66fb73de6e834ab2a6545eb8895149e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a38038f9ac2b3a7b4247804a46c787960e160aed",
          "0x000000000000000000000000a8b52f02108aa5f4b675bdcc973760022d7c6020"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000f6de3bc5a2e96000000000000000000000000000000000000000000000001b16e02d55d3e6436400000000000000000000000000000000000000000000073cad5b03f616f0142700000000000000000000000000000000000000000000001b15e94f1a0e435a0400000000000000000000000000000000000000000000073cae51e231dc92fd87",
        "logIndex": 96,
        "blockHash": "0x5c640fbafa20a9f57e2bac277acac22dd7bb2e853a633f4f539c6c68d35d4ab2"
      }
    ],
    "blockNumber": 65389628,
    "cumulativeGasUsed": "4379971",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
    "0xa98f85f55f259ef41548251c93409f1d60e804e4"
  ],
  "numDeployments": 1,
  "solcInputHash": "d7a9d5f8a1b1af5e713a88cd1337ed1d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"name\":\"EstimationResults\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ForceApproveFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughProfit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"arguments\",\"type\":\"bytes[]\"}],\"name\":\"arbitraryCalls\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"arguments\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"arbitraryCalls\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"arguments\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"arbitraryCallsWithEthCheck\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"arguments\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"arbitraryCallsWithEthCheck\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"arguments\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"arbitraryCallsWithTokenCheck\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"arguments\",\"type\":\"bytes[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"arbitraryCallsWithTokenCheck\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"arguments\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"estimateArbitraryCalls\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"arguments\",\"type\":\"bytes[]\"}],\"name\":\"estimateArbitraryCalls\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unwrapTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isValidSignature(bytes32,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided data\",\"params\":{\"hash\":\"Hash of the data to be signed\",\"signature\":\"Signature byte array associated with _data\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,address)\":{\"notice\":\"See {IBalanceManager-approve}.\"},\"arbitraryCalls(address[],bytes[])\":{\"notice\":\"See {IBalanceManager-arbitraryCalls}.\"},\"arbitraryCalls(address[],bytes[],uint256[])\":{\"notice\":\"See {IBalanceManager-arbitraryCalls}.\"},\"arbitraryCallsWithEthCheck(address[],bytes[],uint256)\":{\"notice\":\"See {IBalanceManager-arbitraryCallsWithEthCheck}.\"},\"arbitraryCallsWithEthCheck(address[],bytes[],uint256[],uint256)\":{\"notice\":\"See {IBalanceManager-arbitraryCallsWithEthCheck}.\"},\"arbitraryCallsWithTokenCheck(address[],bytes[],address,uint256)\":{\"notice\":\"See {IBalanceManager-arbitraryCallsWithTokenCheck}.\"},\"arbitraryCallsWithTokenCheck(address[],bytes[],uint256[],address,uint256)\":{\"notice\":\"See {IBalanceManager-arbitraryCallsWithTokenCheck}.\"},\"batchApprove(bytes)\":{\"notice\":\"See {IBalanceManager-batchApprove}.\"},\"batchTransfer(bytes)\":{\"notice\":\"See {IBalanceManager-batchTransfer}.\"},\"estimateArbitraryCalls(address[],bytes[])\":{\"notice\":\"See {IBalanceManager-estimateArbitraryCalls}.\"},\"estimateArbitraryCalls(address[],bytes[],uint256[])\":{\"notice\":\"See {IBalanceManager-estimateArbitraryCalls}.\"},\"rescueEther()\":{\"notice\":\"See {IBalanceManager-rescueEther}.\"},\"transfer(address,address,uint256)\":{\"notice\":\"See {IBalanceManager-transfer}.\"},\"unwrapTo(address,uint256)\":{\"notice\":\"See {IBalanceManager-unwrapTo}.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FeeCollector.sol\":\"FeeCollector\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@1inch/solidity-utils/contracts/interfaces/IDaiLikePermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IDaiLikePermit\\n * @dev Interface for Dai-like permit function allowing token spending via signatures.\\n */\\ninterface IDaiLikePermit {\\n    /**\\n     * @notice Approves spending of tokens via off-chain signatures.\\n     * @param holder Token holder's address.\\n     * @param spender Spender's address.\\n     * @param nonce Current nonce of the holder.\\n     * @param expiry Time when the permit expires.\\n     * @param allowed True to allow, false to disallow spending.\\n     * @param v, r, s Signature components.\\n     */\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf8636c1c4631641c7b40ac65cd69e6ae04a99cf3358426c642dec02c6c774c82\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IERC7597Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IERC7597Permit\\n * @dev A new extension for ERC-2612 permit, which has already been added to USDC v2.2.\\n */\\ninterface IERC7597Permit {\\n    /**\\n     * @notice Update allowance with a signed permit.\\n     * @dev Signature bytes can be used for both EOA wallets and contract wallets.\\n     * @param owner Token owner's address (Authorizer).\\n     * @param spender Spender's address.\\n     * @param value Amount of allowance.\\n     * @param deadline The time at which the signature expires (unixtime).\\n     * @param signature Unstructured bytes signature signed by an EOA wallet or a contract wallet.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external;\\n}\\n\",\"keccak256\":\"0xaf148ecd4db0f44989a7417f6945bcfd18273c5096bc2b364e314e42c85c78cd\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IPermit2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPermit2\\n * @dev Interface for a flexible permit system that extends ERC20 tokens to support permits in tokens lacking native permit functionality.\\n */\\ninterface IPermit2 {\\n    /**\\n     * @dev Struct for holding permit details.\\n     * @param token ERC20 token address for which the permit is issued.\\n     * @param amount The maximum amount allowed to spend.\\n     * @param expiration Timestamp until which the permit is valid.\\n     * @param nonce An incrementing value for each signature, unique per owner, token, and spender.\\n     */\\n    struct PermitDetails {\\n        address token;\\n        uint160 amount;\\n        uint48 expiration;\\n        uint48 nonce;\\n    }\\n\\n    /**\\n     * @dev Struct for a single token allowance permit.\\n     * @param details Permit details including token, amount, expiration, and nonce.\\n     * @param spender Address authorized to spend the tokens.\\n     * @param sigDeadline Deadline for the permit signature, ensuring timeliness of the permit.\\n     */\\n    struct PermitSingle {\\n        PermitDetails details;\\n        address spender;\\n        uint256 sigDeadline;\\n    }\\n\\n    /**\\n     * @dev Struct for packed allowance data to optimize storage.\\n     * @param amount Amount allowed.\\n     * @param expiration Permission expiry timestamp.\\n     * @param nonce Unique incrementing value for tracking allowances.\\n     */\\n    struct PackedAllowance {\\n        uint160 amount;\\n        uint48 expiration;\\n        uint48 nonce;\\n    }\\n\\n    /**\\n     * @notice Executes a token transfer from one address to another.\\n     * @param user The token owner's address.\\n     * @param spender The address authorized to spend the tokens.\\n     * @param amount The amount of tokens to transfer.\\n     * @param token The address of the token being transferred.\\n     */\\n    function transferFrom(address user, address spender, uint160 amount, address token) external;\\n\\n    /**\\n     * @notice Issues a permit for spending tokens via a signed authorization.\\n     * @param owner The token owner's address.\\n     * @param permitSingle Struct containing the permit details.\\n     * @param signature The signature proving the owner authorized the permit.\\n     */\\n    function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\\n\\n    /**\\n     * @notice Retrieves the allowance details between a token owner and spender.\\n     * @param user The token owner's address.\\n     * @param token The token address.\\n     * @param spender The spender's address.\\n     * @return The packed allowance details.\\n     */\\n    function allowance(address user, address token, address spender) external view returns (PackedAllowance memory);\\n\\n    /**\\n     * @notice Approves the spender to use up to amount of the specified token up until the expiration\\n     * @param token The token to approve\\n     * @param spender The spender address to approve\\n     * @param amount The approved amount of the token\\n     * @param expiration The timestamp at which the approval is no longer valid\\n     * @dev The packed allowance also holds a nonce, which will stay unchanged in approve\\n     * @dev Setting amount to type(uint160).max sets an unlimited approval\\n     */\\n    function approve(address token, address spender, uint160 amount, uint48 expiration) external;\\n}\\n\",\"keccak256\":\"0x2ac37c62bb4a4941c1d353df6ac08750542c540234aa24409ac67373651a478a\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IWETH\\n * @dev Interface for wrapper as WETH-like token.\\n */\\ninterface IWETH is IERC20 {\\n    /**\\n     * @notice Emitted when Ether is deposited to get wrapper tokens.\\n     */\\n    event Deposit(address indexed dst, uint256 wad);\\n\\n    /**\\n     * @notice Emitted when wrapper tokens is withdrawn as Ether.\\n     */\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    /**\\n     * @notice Deposit Ether to get wrapper tokens.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @notice Withdraw wrapped tokens as Ether.\\n     * @param amount Amount of wrapped tokens to withdraw.\\n     */\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x32989b79850e8a1ac6aab74878de2883f9537656ca06910dc0ae76833cc446e2\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @title ECDSA signature operations\\n * @notice Provides functions for recovering addresses from signatures and verifying signatures, including support for EIP-2098 compact signatures.\\n */\\nlibrary ECDSA {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    uint256 private constant _S_BOUNDARY = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 + 1;\\n    uint256 private constant _COMPACT_S_MASK = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n    uint256 private constant _COMPACT_V_SHIFT = 255;\\n\\n    /**\\n     * @notice Recovers the signer's address from the signature.\\n     * @dev Recovers the address that has signed a hash with `(v, r, s)` signature.\\n     * @param hash The keccak256 hash of the data signed.\\n     * @param v The recovery byte of the signature.\\n     * @param r The first 32 bytes of the signature.\\n     * @param s The second 32 bytes of the signature.\\n     * @return signer The address of the signer.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (address signer) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            if lt(s, _S_BOUNDARY) {\\n                let ptr := mload(0x40)\\n\\n                mstore(ptr, hash)\\n                mstore(add(ptr, 0x20), v)\\n                mstore(add(ptr, 0x40), r)\\n                mstore(add(ptr, 0x60), s)\\n                mstore(0, 0)\\n                pop(staticcall(gas(), 0x1, ptr, 0x80, 0, 0x20))\\n                signer := mload(0)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Recovers the signer's address from the signature using `r` and `vs` components.\\n     * @dev Recovers the address that has signed a hash with `r` and `vs`, where `vs` combines `v` and `s`.\\n     * @param hash The keccak256 hash of the data signed.\\n     * @param r The first 32 bytes of the signature.\\n     * @param vs The combined `v` and `s` values of the signature.\\n     * @return signer The address of the signer.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (address signer) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let s := and(vs, _COMPACT_S_MASK)\\n            if lt(s, _S_BOUNDARY) {\\n                let ptr := mload(0x40)\\n\\n                mstore(ptr, hash)\\n                mstore(add(ptr, 0x20), add(27, shr(_COMPACT_V_SHIFT, vs)))\\n                mstore(add(ptr, 0x40), r)\\n                mstore(add(ptr, 0x60), s)\\n                mstore(0, 0)\\n                pop(staticcall(gas(), 0x1, ptr, 0x80, 0, 0x20))\\n                signer := mload(0)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Recovers the signer's address from a hash and a signature.\\n     * @param hash The keccak256 hash of the signed data.\\n     * @param signature The full signature from which the signer will be recovered.\\n     * @return signer The address of the signer.\\n     */\\n    /// @dev WARNING!!!\\n    /// There is a known signature malleability issue with two representations of signatures!\\n    /// Even though this function is able to verify both standard 65-byte and compact 64-byte EIP-2098 signatures\\n    /// one should never use raw signatures for any kind of invalidation logic in their code.\\n    /// As the standard and compact representations are interchangeable any invalidation logic that relies on\\n    /// signature uniqueness will get rekt.\\n    /// More info: https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-4h98-2769-gh6h\\n    function recover(bytes32 hash, bytes calldata signature) internal view returns (address signer) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            // memory[ptr:ptr+0x80] = (hash, v, r, s)\\n            switch signature.length\\n            case 65 {\\n                // memory[ptr+0x20:ptr+0x80] = (v, r, s)\\n                mstore(add(ptr, 0x20), byte(0, calldataload(add(signature.offset, 0x40))))\\n                calldatacopy(add(ptr, 0x40), signature.offset, 0x40)\\n            }\\n            case 64 {\\n                // memory[ptr+0x20:ptr+0x80] = (v, r, s)\\n                let vs := calldataload(add(signature.offset, 0x20))\\n                mstore(add(ptr, 0x20), add(27, shr(_COMPACT_V_SHIFT, vs)))\\n                calldatacopy(add(ptr, 0x40), signature.offset, 0x20)\\n                mstore(add(ptr, 0x60), and(vs, _COMPACT_S_MASK))\\n            }\\n            default {\\n                ptr := 0\\n            }\\n\\n            if ptr {\\n                if lt(mload(add(ptr, 0x60)), _S_BOUNDARY) {\\n                    // memory[ptr:ptr+0x20] = (hash)\\n                    mstore(ptr, hash)\\n\\n                    mstore(0, 0)\\n                    pop(staticcall(gas(), 0x1, ptr, 0x80, 0, 0x20))\\n                    signer := mload(0)\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies the signature for a hash, either by recovering the signer or using EIP-1271's `isValidSignature` function.\\n     * @dev Attempts to recover the signer's address from the signature; if the address is non-zero, checks if it's valid according to EIP-1271.\\n     * @param signer The address to validate the signature against.\\n     * @param hash The hash of the signed data.\\n     * @param signature The signature to verify.\\n     * @return success True if the signature is verified, false otherwise.\\n     */\\n    function recoverOrIsValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        bytes calldata signature\\n    ) internal view returns (bool success) {\\n        if (signer == address(0)) return false;\\n        if ((signature.length == 64 || signature.length == 65) && recover(hash, signature) == signer) {\\n            return true;\\n        }\\n        return isValidSignature(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @notice Verifies the signature for a hash, either by recovering the signer or using EIP-1271's `isValidSignature` function.\\n     * @dev Attempts to recover the signer's address from the signature; if the address is non-zero, checks if it's valid according to EIP-1271.\\n     * @param signer The address to validate the signature against.\\n     * @param hash The hash of the signed data.\\n     * @param v The recovery byte of the signature.\\n     * @param r The first 32 bytes of the signature.\\n     * @param s The second 32 bytes of the signature.\\n     * @return success True if the signature is verified, false otherwise.\\n     */\\n    function recoverOrIsValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (bool success) {\\n        if (signer == address(0)) return false;\\n        if (recover(hash, v, r, s) == signer) {\\n            return true;\\n        }\\n        return isValidSignature(signer, hash, v, r, s);\\n    }\\n\\n    /**\\n     * @notice Verifies the signature for a hash, either by recovering the signer or using EIP-1271's `isValidSignature` function.\\n     * @dev Attempts to recover the signer's address from the signature; if the address is non-zero, checks if it's valid according to EIP-1271.\\n     * @param signer The address to validate the signature against.\\n     * @param hash The hash of the signed data.\\n     * @param r The first 32 bytes of the signature.\\n     * @param vs The combined `v` and `s` values of the signature.\\n     * @return success True if the signature is verified, false otherwise.\\n     */\\n    function recoverOrIsValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (bool success) {\\n        if (signer == address(0)) return false;\\n        if (recover(hash, r, vs) == signer) {\\n            return true;\\n        }\\n        return isValidSignature(signer, hash, r, vs);\\n    }\\n\\n    /**\\n     * @notice Verifies the signature for a given hash, attempting to recover the signer's address or validates it using EIP-1271 for 65-byte signatures.\\n     * @dev Attempts to recover the signer's address from the signature. If the address is a contract, checks if the signature is valid according to EIP-1271.\\n     * @param signer The expected signer's address.\\n     * @param hash The keccak256 hash of the signed data.\\n     * @param r The first 32 bytes of the signature.\\n     * @param vs The last 32 bytes of the signature, with the last byte being the recovery id.\\n     * @return success True if the signature is valid, false otherwise.\\n     */\\n    function recoverOrIsValidSignature65(\\n        address signer,\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (bool success) {\\n        if (signer == address(0)) return false;\\n        if (recover(hash, r, vs) == signer) {\\n            return true;\\n        }\\n        return isValidSignature65(signer, hash, r, vs);\\n    }\\n\\n    /**\\n     * @notice Validates a signature for a hash using EIP-1271, if `signer` is a contract.\\n     * @dev Makes a static call to `signer` with `isValidSignature` function selector from EIP-1271.\\n     * @param signer The address of the signer to validate against, which could be an EOA or a contract.\\n     * @param hash The hash of the signed data.\\n     * @param signature The signature to validate.\\n     * @return success True if the signature is valid according to EIP-1271, false otherwise.\\n     */\\n    function isValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        bytes calldata signature\\n    ) internal view returns (bool success) {\\n        // (bool success, bytes memory data) = signer.staticcall(abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature));\\n        // return success && data.length == 32 && abi.decode(data, (bytes4)) == IERC1271.isValidSignature.selector;\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), signature.length)\\n            calldatacopy(add(ptr, 0x64), signature.offset, signature.length)\\n            if staticcall(gas(), signer, ptr, add(0x64, signature.length), 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Validates a signature for a hash using EIP-1271, if `signer` is a contract.\\n     * @dev Makes a static call to `signer` with `isValidSignature` function selector from EIP-1271.\\n     * @param signer The address of the signer to validate against, which could be an EOA or a contract.\\n     * @param hash The hash of the signed data.\\n     * @param v The recovery byte of the signature.\\n     * @param r The first 32 bytes of the signature.\\n     * @param s The second 32 bytes of the signature.\\n     * @return success True if the signature is valid according to EIP-1271, false otherwise.\\n     */\\n    function isValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (bool success) {\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), 65)\\n            mstore(add(ptr, 0x64), r)\\n            mstore(add(ptr, 0x84), s)\\n            mstore8(add(ptr, 0xa4), v)\\n            if staticcall(gas(), signer, ptr, 0xa5, 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Validates a signature for a hash using EIP-1271, if `signer` is a contract.\\n     * @dev Makes a static call to `signer` with `isValidSignature` function selector from EIP-1271.\\n     * @param signer The address of the signer to validate against, which could be an EOA or a contract.\\n     * @param hash The hash of the signed data.\\n     * @param r The first 32 bytes of the signature.\\n     * @param vs The last 32 bytes of the signature, with the last byte being the recovery id.\\n     * @return success True if the signature is valid according to EIP-1271, false otherwise.\\n     */\\n    function isValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (bool success) {\\n        // (bool success, bytes memory data) = signer.staticcall(abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, abi.encodePacked(r, vs)));\\n        // return success && data.length == 32 && abi.decode(data, (bytes4)) == IERC1271.isValidSignature.selector;\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), 64)\\n            mstore(add(ptr, 0x64), r)\\n            mstore(add(ptr, 0x84), vs)\\n            if staticcall(gas(), signer, ptr, 0xa4, 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies if a 65-byte signature is valid for a given hash, according to EIP-1271.\\n     * @param signer The address of the signer to validate against, which could be an EOA or a contract.\\n     * @param hash The hash of the signed data.\\n     * @param r The first 32 bytes of the signature.\\n     * @param vs The combined `v` (recovery id) and `s` component of the signature, packed into the last 32 bytes.\\n     * @return success True if the signature is valid according to EIP-1271, false otherwise.\\n     */\\n    function isValidSignature65(\\n        address signer,\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (bool success) {\\n        // (bool success, bytes memory data) = signer.staticcall(abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, abi.encodePacked(r, vs & ~uint256(1 << 255), uint8(vs >> 255))));\\n        // return success && data.length == 32 && abi.decode(data, (bytes4)) == IERC1271.isValidSignature.selector;\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), 65)\\n            mstore(add(ptr, 0x64), r)\\n            mstore(add(ptr, 0x84), and(vs, _COMPACT_S_MASK))\\n            mstore8(add(ptr, 0xa4), add(27, shr(_COMPACT_V_SHIFT, vs)))\\n            if staticcall(gas(), signer, ptr, 0xa5, 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Generates a hash compatible with Ethereum's signed message format.\\n     * @dev Prepends the hash with Ethereum's message prefix before hashing it.\\n     * @param hash The hash of the data to sign.\\n     * @return res The Ethereum signed message hash.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 res) {\\n        // 32 is the length in bytes of hash, enforced by the type signature above\\n        // return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            mstore(0, 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000) // \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"\\n            mstore(28, hash)\\n            res := keccak256(0, 60)\\n        }\\n    }\\n\\n    /**\\n     * @notice Generates an EIP-712 compliant hash.\\n     * @dev Encodes the domain separator and the struct hash according to EIP-712.\\n     * @param domainSeparator The EIP-712 domain separator.\\n     * @param structHash The EIP-712 struct hash.\\n     * @return res The EIP-712 compliant hash.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 res) {\\n        // return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x1901000000000000000000000000000000000000000000000000000000000000) // \\\"\\\\x19\\\\x01\\\"\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            res := keccak256(ptr, 66)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x501b8b300cf98af055d4bb26eb936ec8cb8aac7cde5caae9c2d045a43d15c5e5\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/RevertReasonForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title RevertReasonForwarder\\n * @notice Provides utilities for forwarding and retrieving revert reasons from failed external calls.\\n */\\nlibrary RevertReasonForwarder {\\n    /**\\n     * @dev Forwards the revert reason from the latest external call.\\n     * This method allows propagating the revert reason of a failed external call to the caller.\\n     */\\n    function reRevert() internal pure {\\n        // bubble up revert reason from latest external call\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            revert(ptr, returndatasize())\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieves the revert reason from the latest external call.\\n     * This method enables capturing the revert reason of a failed external call for inspection or processing.\\n     * @return reason The latest external call revert reason.\\n     */\\n    function reReason() internal pure returns (bytes memory reason) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            reason := mload(0x40)\\n            let length := returndatasize()\\n            mstore(reason, length)\\n            returndatacopy(add(reason, 0x20), 0, length)\\n            mstore(0x40, add(reason, add(0x20, length)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x97d8c950981f4da44ae1b01d9e597c4f99377797ec7ff7b1ef9648e4ecc1baa4\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\nimport \\\"../interfaces/IPermit2.sol\\\";\\nimport \\\"../interfaces/IERC7597Permit.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../libraries/RevertReasonForwarder.sol\\\";\\n\\n/**\\n * @title Implements efficient safe methods for ERC20 interface.\\n * @notice Compared to the standard ERC20, this implementation offers several enhancements:\\n * 1. more gas-efficient, providing significant savings in transaction costs.\\n * 2. support for different permit implementations\\n * 3. forceApprove functionality\\n * 4. support for WETH deposit and withdraw\\n */\\nlibrary SafeERC20 {\\n    error SafeTransferFailed();\\n    error SafeTransferFromFailed();\\n    error ForceApproveFailed();\\n    error SafeIncreaseAllowanceFailed();\\n    error SafeDecreaseAllowanceFailed();\\n    error SafePermitBadLength();\\n    error Permit2TransferAmountTooHigh();\\n\\n    // Uniswap Permit2 address\\n    address private constant _PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\\n    bytes4 private constant _PERMIT_LENGTH_ERROR = 0x68275857;  // SafePermitBadLength.selector\\n    uint256 private constant _RAW_CALL_GAS_LIMIT = 5000;\\n\\n    /**\\n     * @notice Fetches the balance of a specific ERC20 token held by an account.\\n     * Consumes less gas then regular `ERC20.balanceOf`.\\n     * @dev Note that the implementation does not perform dirty bits cleaning, so it is the\\n     * responsibility of the caller to make sure that the higher 96 bits of the `account` parameter are clean.\\n     * @param token The IERC20 token contract for which the balance will be fetched.\\n     * @param account The address of the account whose token balance will be fetched.\\n     * @return tokenBalance The balance of the specified ERC20 token held by the account.\\n     */\\n    function safeBalanceOf(\\n        IERC20 token,\\n        address account\\n    ) internal view returns(uint256 tokenBalance) {\\n        bytes4 selector = IERC20.balanceOf.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            mstore(0x00, selector)\\n            mstore(0x04, account)\\n            let success := staticcall(gas(), token, 0x00, 0x24, 0x00, 0x20)\\n            tokenBalance := mload(0)\\n\\n            if or(iszero(success), lt(returndatasize(), 0x20)) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens from one address to another.\\n     * @dev If permit2 is true, uses the Permit2 standard; otherwise uses the standard ERC20 transferFrom.\\n     * Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `from` and `to` parameters are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     * @param permit2 If true, uses the Permit2 standard for the transfer; otherwise uses the standard ERC20 transferFrom.\\n     */\\n    function safeTransferFromUniversal(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool permit2\\n    ) internal {\\n        if (permit2) {\\n            safeTransferFromPermit2(token, from, to, amount);\\n        } else {\\n            safeTransferFrom(token, from, to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens from one address to another using the ERC20 standard.\\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `from` and `to` parameters are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bytes4 selector = token.transferFrom.selector;\\n        bool success;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            success := call(gas(), token, 0, data, 100, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens from one address to another using the Permit2 standard.\\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `from` and `to` parameters are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function safeTransferFromPermit2(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > type(uint160).max) revert Permit2TransferAmountTooHigh();\\n        bytes4 selector = IPermit2.transferFrom.selector;\\n        bool success;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            mstore(add(data, 0x64), token)\\n            success := call(gas(), _PERMIT2, 0, data, 0x84, 0x0, 0x0)\\n            if success {\\n                success := gt(extcodesize(_PERMIT2), 0)\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens to another address.\\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `to` parameter are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param value The amount of tokens to transfer.\\n     */\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.transfer.selector, to, value)) {\\n            revert SafeTransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Attempts to approve a spender to spend a certain amount of tokens.\\n     * @dev If `approve(from, to, amount)` fails, it tries to set the allowance to zero, and retries the `approve` call.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `spender` parameter are clean.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     */\\n    function forceApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.approve.selector, spender, value)) {\\n            if (\\n                !_makeCall(token, token.approve.selector, spender, 0) ||\\n                !_makeCall(token, token.approve.selector, spender, value)\\n            ) {\\n                revert ForceApproveFailed();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely increases the allowance of a spender.\\n     * @dev Increases with safe math check. Checks if the increased allowance will overflow, if yes, then it reverts the transaction.\\n     * Then uses `forceApprove` to increase the allowance.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `spender` parameter are clean.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to increase the allowance by.\\n     */\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > type(uint256).max - allowance) revert SafeIncreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance + value);\\n    }\\n\\n    /**\\n     * @notice Safely decreases the allowance of a spender.\\n     * @dev Decreases with safe math check. Checks if the decreased allowance will underflow, if yes, then it reverts the transaction.\\n     * Then uses `forceApprove` to increase the allowance.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `spender` parameter are clean.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to decrease the allowance by.\\n     */\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > allowance) revert SafeDecreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance - value);\\n    }\\n\\n    /**\\n     * @notice Attempts to execute the `permit` function on the provided token with the sender and contract as parameters.\\n     * Permit type is determined automatically based on permit calldata (IERC20Permit, IDaiLikePermit, and IPermit2).\\n     * @dev Wraps `tryPermit` function and forwards revert reason if permit fails.\\n     * @param token The IERC20 token to execute the permit function on.\\n     * @param permit The permit data to be used in the function call.\\n     */\\n    function safePermit(IERC20 token, bytes calldata permit) internal {\\n        if (!tryPermit(token, msg.sender, address(this), permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    /**\\n     * @notice Attempts to execute the `permit` function on the provided token with custom owner and spender parameters.\\n     * Permit type is determined automatically based on permit calldata (IERC20Permit, IDaiLikePermit, and IPermit2).\\n     * @dev Wraps `tryPermit` function and forwards revert reason if permit fails.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `owner` and `spender` parameters are clean.\\n     * @param token The IERC20 token to execute the permit function on.\\n     * @param owner The owner of the tokens for which the permit is made.\\n     * @param spender The spender allowed to spend the tokens by the permit.\\n     * @param permit The permit data to be used in the function call.\\n     */\\n    function safePermit(IERC20 token, address owner, address spender, bytes calldata permit) internal {\\n        if (!tryPermit(token, owner, spender, permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    /**\\n     * @notice Attempts to execute the `permit` function on the provided token with the sender and contract as parameters.\\n     * @dev Invokes `tryPermit` with sender as owner and contract as spender.\\n     * @param token The IERC20 token to execute the permit function on.\\n     * @param permit The permit data to be used in the function call.\\n     * @return success Returns true if the permit function was successfully executed, false otherwise.\\n     */\\n    function tryPermit(IERC20 token, bytes calldata permit) internal returns(bool success) {\\n        return tryPermit(token, msg.sender, address(this), permit);\\n    }\\n\\n    /**\\n     * @notice The function attempts to call the permit function on a given ERC20 token.\\n     * @dev The function is designed to support a variety of permit functions, namely: IERC20Permit, IDaiLikePermit, IERC7597Permit and IPermit2.\\n     * It accommodates both Compact and Full formats of these permit types.\\n     * Please note, it is expected that the `expiration` parameter for the compact Permit2 and the `deadline` parameter\\n     * for the compact Permit are to be incremented by one before invoking this function. This approach is motivated by\\n     * gas efficiency considerations; as the unlimited expiration period is likely to be the most common scenario, and\\n     * zeros are cheaper to pass in terms of gas cost. Thus, callers should increment the expiration or deadline by one\\n     * before invocation for optimized performance.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `owner` and `spender` parameters are clean.\\n     * @param token The address of the ERC20 token on which to call the permit function.\\n     * @param owner The owner of the tokens. This address should have signed the off-chain permit.\\n     * @param spender The address which will be approved for transfer of tokens.\\n     * @param permit The off-chain permit data, containing different fields depending on the type of permit function.\\n     * @return success A boolean indicating whether the permit call was successful.\\n     */\\n    function tryPermit(IERC20 token, address owner, address spender, bytes calldata permit) internal returns(bool success) {\\n        // load function selectors for different permit standards\\n        bytes4 permitSelector = IERC20Permit.permit.selector;\\n        bytes4 daiPermitSelector = IDaiLikePermit.permit.selector;\\n        bytes4 permit2Selector = IPermit2.permit.selector;\\n        bytes4 erc7597PermitSelector = IERC7597Permit.permit.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            // Switch case for different permit lengths, indicating different permit standards\\n            switch permit.length\\n            // Compact IERC20Permit\\n            case 100 {\\n                mstore(ptr, permitSelector)     // store selector\\n                mstore(add(ptr, 0x04), owner)   // store owner\\n                mstore(add(ptr, 0x24), spender) // store spender\\n\\n                // Compact IERC20Permit.permit(uint256 value, uint32 deadline, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let deadline := shr(224, calldataload(add(permit.offset, 0x20))) // loads permit.offset 0x20..0x23\\n                    let vs := calldataload(add(permit.offset, 0x44))                 // loads permit.offset 0x44..0x63\\n\\n                    calldatacopy(add(ptr, 0x44), permit.offset, 0x20)            // store value     = copy permit.offset 0x00..0x19\\n                    mstore(add(ptr, 0x64), sub(deadline, 1))                     // store deadline  = deadline - 1\\n                    mstore(add(ptr, 0x84), add(27, shr(255, vs)))                // store v         = most significant bit of vs + 27 (27 or 28)\\n                    calldatacopy(add(ptr, 0xa4), add(permit.offset, 0x24), 0x20) // store r         = copy permit.offset 0x24..0x43\\n                    mstore(add(ptr, 0xc4), shr(1, shl(1, vs)))                   // store s         = vs without most significant bit\\n                }\\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            // Compact IDaiLikePermit\\n            case 72 {\\n                mstore(ptr, daiPermitSelector)  // store selector\\n                mstore(add(ptr, 0x04), owner)   // store owner\\n                mstore(add(ptr, 0x24), spender) // store spender\\n\\n                // Compact IDaiLikePermit.permit(uint32 nonce, uint32 expiry, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let expiry := shr(224, calldataload(add(permit.offset, 0x04))) // loads permit.offset 0x04..0x07\\n                    let vs := calldataload(add(permit.offset, 0x28))               // loads permit.offset 0x28..0x47\\n\\n                    mstore(add(ptr, 0x44), shr(224, calldataload(permit.offset))) // store nonce   = copy permit.offset 0x00..0x03\\n                    mstore(add(ptr, 0x64), sub(expiry, 1))                        // store expiry  = expiry - 1\\n                    mstore(add(ptr, 0x84), true)                                  // store allowed = true\\n                    mstore(add(ptr, 0xa4), add(27, shr(255, vs)))                 // store v       = most significant bit of vs + 27 (27 or 28)\\n                    calldatacopy(add(ptr, 0xc4), add(permit.offset, 0x08), 0x20)  // store r       = copy permit.offset 0x08..0x27\\n                    mstore(add(ptr, 0xe4), shr(1, shl(1, vs)))                    // store s       = vs without most significant bit\\n                }\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            // IERC20Permit\\n            case 224 {\\n                mstore(ptr, permitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            // IDaiLikePermit\\n            case 256 {\\n                mstore(ptr, daiPermitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            // Compact IPermit2\\n            case 96 {\\n                // Compact IPermit2.permit(uint160 amount, uint32 expiration, uint32 nonce, uint32 sigDeadline, uint256 r, uint256 vs)\\n                mstore(ptr, permit2Selector)  // store selector\\n                mstore(add(ptr, 0x04), owner) // store owner\\n                mstore(add(ptr, 0x24), token) // store token\\n\\n                calldatacopy(add(ptr, 0x50), permit.offset, 0x14)             // store amount = copy permit.offset 0x00..0x13\\n                // and(0xffffffffffff, ...) - conversion to uint48\\n                mstore(add(ptr, 0x64), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x14))), 1))) // store expiration = ((permit.offset 0x14..0x17 - 1) & 0xffffffffffff)\\n                mstore(add(ptr, 0x84), shr(224, calldataload(add(permit.offset, 0x18)))) // store nonce = copy permit.offset 0x18..0x1b\\n                mstore(add(ptr, 0xa4), spender)                               // store spender\\n                // and(0xffffffffffff, ...) - conversion to uint48\\n                mstore(add(ptr, 0xc4), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x1c))), 1))) // store sigDeadline = ((permit.offset 0x1c..0x1f - 1) & 0xffffffffffff)\\n                mstore(add(ptr, 0xe4), 0x100)                                 // store offset = 256\\n                mstore(add(ptr, 0x104), 0x40)                                 // store length = 64\\n                calldatacopy(add(ptr, 0x124), add(permit.offset, 0x20), 0x20) // store r      = copy permit.offset 0x20..0x3f\\n                calldatacopy(add(ptr, 0x144), add(permit.offset, 0x40), 0x20) // store vs     = copy permit.offset 0x40..0x5f\\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\\n                success := call(gas(), _PERMIT2, 0, ptr, 0x164, 0, 0)\\n            }\\n            // IPermit2\\n            case 352 {\\n                mstore(ptr, permit2Selector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\\n                success := call(gas(), _PERMIT2, 0, ptr, 0x164, 0, 0)\\n            }\\n            // Dynamic length\\n            default {\\n                mstore(ptr, erc7597PermitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IERC7597Permit.permit(address owner, address spender, uint256 value, uint256 deadline, bytes memory signature)\\n                success := call(gas(), token, 0, ptr, add(permit.length, 4), 0, 0)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Executes a low level call to a token contract, making it resistant to reversion and erroneous boolean returns.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param selector The function signature that is to be called on the token contract.\\n     * @param to The address to which the token amount will be transferred.\\n     * @param amount The token amount to be transferred.\\n     * @return success A boolean indicating if the call was successful. Returns 'true' on success and 'false' on failure.\\n     * In case of success but no returned data, validates that the contract code exists.\\n     * In case of returned data, ensures that it's a boolean `true`.\\n     */\\n    function _makeCall(\\n        IERC20 token,\\n        bytes4 selector,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool success) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), to)\\n            mstore(add(data, 0x24), amount)\\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely deposits a specified amount of Ether into the IWETH contract. Consumes less gas then regular `IWETH.deposit`.\\n     * @param weth The IWETH token contract.\\n     * @param amount The amount of Ether to deposit into the IWETH contract.\\n     */\\n    function safeDeposit(IWETH weth, uint256 amount) internal {\\n        if (amount > 0) {\\n            bytes4 selector = IWETH.deposit.selector;\\n            assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n                mstore(0, selector)\\n                if iszero(call(gas(), weth, amount, 0, 4, 0, 0)) {\\n                    let ptr := mload(0x40)\\n                    returndatacopy(ptr, 0, returndatasize())\\n                    revert(ptr, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely withdraws a specified amount of wrapped Ether from the IWETH contract. Consumes less gas then regular `IWETH.withdraw`.\\n     * @dev Uses inline assembly to interact with the IWETH contract.\\n     * @param weth The IWETH token contract.\\n     * @param amount The amount of wrapped Ether to withdraw from the IWETH contract.\\n     */\\n    function safeWithdraw(IWETH weth, uint256 amount) internal {\\n        bytes4 selector = IWETH.withdraw.selector;\\n        assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n            mstore(0, selector)\\n            mstore(4, amount)\\n            if iszero(call(gas(), weth, 0, 0, 0x24, 0, 0)) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely withdraws a specified amount of wrapped Ether from the IWETH contract to a specified recipient.\\n     * Consumes less gas then regular `IWETH.withdraw`.\\n     * @param weth The IWETH token contract.\\n     * @param amount The amount of wrapped Ether to withdraw from the IWETH contract.\\n     * @param to The recipient of the withdrawn Ether.\\n     */\\n    function safeWithdrawTo(IWETH weth, uint256 amount, address to) internal {\\n        safeWithdraw(weth, amount);\\n        if (to != address(this)) {\\n            assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n                if iszero(call(_RAW_CALL_GAS_LIMIT, to, amount, 0, 0, 0, 0)) {\\n                    let ptr := mload(0x40)\\n                    returndatacopy(ptr, 0, returndatasize())\\n                    revert(ptr, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5010526a91c8fe876a0959e952186156a0c8f1888bf392eb406a93f449b2716\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x4aaaf1c0737dd16e81f0d2b9833c549747a5ede6873bf1444bc72aa572d03e98\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x27dbc90e5136ffe46c04f7596fc2dbcc3acebd8d504da3d93fdb8496e6de04f6\",\"license\":\"MIT\"},\"contracts/BalanceManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport { IERC1271 } from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IWETH } from \\\"@1inch/solidity-utils/contracts/interfaces/IWETH.sol\\\";\\nimport { RevertReasonForwarder } from \\\"@1inch/solidity-utils/contracts/libraries/RevertReasonForwarder.sol\\\";\\nimport { SafeERC20 } from \\\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\\\";\\n\\nimport { IBalanceManager } from \\\"./interfaces/IBalanceManager.sol\\\";\\n\\n/* solhint-disable avoid-low-level-calls */\\n\\nabstract contract BalanceManager is IERC1271, IBalanceManager {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IWETH;\\n\\n    IWETH internal immutable _WETH;\\n\\n    constructor(IWETH weth) {\\n        _WETH = weth;\\n    }\\n\\n    modifier onlyOwner() virtual;\\n\\n    receive() external payable {} // solhint-disable-line no-empty-blocks;\\n\\n    /**\\n     * @notice See {IBalanceManager-arbitraryCalls}.\\n     */\\n    function arbitraryCalls(address[] calldata targets, bytes[] calldata arguments) public payable {\\n        uint256[] calldata values;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            values.offset := calldatasize()\\n            values.length := arguments.length\\n        }\\n        arbitraryCalls(targets, arguments, values);\\n    }\\n\\n    /**\\n     * @notice See {IBalanceManager-arbitraryCalls}.\\n     */\\n    function arbitraryCalls(address[] calldata targets, bytes[] calldata arguments, uint256[] calldata values) public payable onlyOwner {\\n        unchecked {\\n            uint256 length = targets.length;\\n            if (length != arguments.length) revert LengthMismatch();\\n            if (length != values.length) revert LengthMismatch();\\n            for (uint256 i = 0; i < length; ++i) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (bool success,) = targets[i].call{value: values[i]}(arguments[i]);\\n                if (!success) RevertReasonForwarder.reRevert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice See {IBalanceManager-arbitraryCallsWithEthCheck}.\\n     */\\n    function arbitraryCallsWithEthCheck(address[] calldata targets, bytes[] calldata arguments, uint256 minReturn) external payable {\\n        uint256[] calldata values;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            values.offset := calldatasize()\\n            values.length := arguments.length\\n        }\\n        arbitraryCallsWithEthCheck(targets, arguments, values, minReturn);\\n    }\\n\\n    /**\\n     * @notice See {IBalanceManager-arbitraryCallsWithEthCheck}.\\n     */\\n    function arbitraryCallsWithEthCheck(\\n        address[] calldata targets,\\n        bytes[] calldata arguments,\\n        uint256[] calldata values,\\n        uint256 minReturn\\n    ) public payable {\\n        address target = _targetToCheck();\\n        uint256 balanceBefore = target.balance;\\n        arbitraryCalls(targets, arguments, values);\\n        if (target.balance < minReturn + balanceBefore) revert NotEnoughProfit();\\n    }\\n\\n    /**\\n     * @notice See {IBalanceManager-arbitraryCallsWithTokenCheck}.\\n     */\\n    function arbitraryCallsWithTokenCheck(\\n        address[] calldata targets,\\n        bytes[] calldata arguments,\\n        IERC20 token,\\n        uint256 minReturn\\n    ) external payable {\\n        uint256[] calldata values;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            values.offset := calldatasize()\\n            values.length := arguments.length\\n        }\\n        arbitraryCallsWithTokenCheck(targets, arguments, values, token, minReturn);\\n    }\\n\\n    /**\\n     * @notice See {IBalanceManager-arbitraryCallsWithTokenCheck}.\\n     */\\n    function arbitraryCallsWithTokenCheck(\\n        address[] calldata targets,\\n        bytes[] calldata arguments,\\n        uint256[] calldata values,\\n        IERC20 token,\\n        uint256 minReturn\\n    ) public payable {\\n        address target = _targetToCheck();\\n        uint256 balanceBefore = token.balanceOf(target);\\n        arbitraryCalls(targets, arguments, values);\\n        if (token.balanceOf(target) < minReturn + balanceBefore) revert NotEnoughProfit();\\n    }\\n\\n    /**\\n     * @notice See {IBalanceManager-estimateArbitraryCalls}.\\n     */\\n    function estimateArbitraryCalls(address[] calldata targets, bytes[] calldata arguments) external payable {\\n        uint256[] calldata values;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            values.offset := calldatasize()\\n            values.length := arguments.length\\n        }\\n        estimateArbitraryCalls(targets, arguments, values);\\n    }\\n\\n    /**\\n     * @notice See {IBalanceManager-estimateArbitraryCalls}.\\n     */\\n    function estimateArbitraryCalls(address[] calldata targets, bytes[] calldata arguments, uint256[] calldata values) public payable onlyOwner {\\n        unchecked {\\n            uint256 length = targets.length;\\n            if (length != arguments.length) revert LengthMismatch();\\n            bool[] memory statuses = new bool[](length);\\n            bytes[] memory results = new bytes[](length);\\n            for (uint256 i = 0; i < length; i++) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (statuses[i], results[i]) = targets[i].call{value: values[i]}(arguments[i]);\\n            }\\n            revert EstimationResults(statuses, results);\\n        }\\n    }\\n\\n    /**\\n     * @notice See {IBalanceManager-approve}.\\n     */\\n    function approve(IERC20 token, address to) external onlyOwner {\\n        token.forceApprove(to, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice See {IBalanceManager-transfer}.\\n     */\\n    function transfer(IERC20 token, address to, uint256 amount) external onlyOwner {\\n        token.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice See {IBalanceManager-batchApprove}.\\n     */\\n    function batchApprove(bytes calldata data) external onlyOwner {\\n        unchecked {\\n            uint256 length = data.length;\\n            if (length % 40 != 0) revert InvalidLength();\\n            for (uint256 i = 0; i < length; i += 40) {\\n                IERC20(address(bytes20(data[i:i+20]))).forceApprove(address(bytes20(data[i+20:i+40])), type(uint256).max);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice See {IBalanceManager-batchTransfer}.\\n     */\\n    function batchTransfer(bytes calldata data) external onlyOwner {\\n        unchecked {\\n            uint256 length = data.length;\\n            if (length % 72 != 0) revert InvalidLength();\\n            for (uint256 i = 0; i < length; i += 72) {\\n                IERC20 token = IERC20(address(bytes20(data[i:i+20])));\\n                address target = address(bytes20(data[i+20:i+40]));\\n                uint256 amount = uint256(bytes32(data[i+40:i+72]));\\n                token.safeTransfer(target, amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice See {IBalanceManager-unwrapTo}.\\n     */\\n    function unwrapTo(address payable receiver, uint256 amount) external onlyOwner {\\n        _WETH.safeWithdrawTo(amount, receiver);\\n    }\\n\\n    /**\\n     * @notice See {IBalanceManager-rescueEther}.\\n     */\\n    function rescueEther() external onlyOwner {\\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        if (!success) revert ETHTransferFailed();\\n    }\\n\\n    function _targetToCheck() internal view virtual returns (address);\\n}\\n\\n/* solhint-enable avoid-low-level-calls */\\n\",\"keccak256\":\"0x6c942dcd0b44a69a5cd2ee05c93784d6889f8a0c3d51c9cf4f4f0aff2c99ac1e\",\"license\":\"MIT\"},\"contracts/FeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport { IWETH } from \\\"@1inch/solidity-utils/contracts/interfaces/IWETH.sol\\\";\\nimport { ECDSA } from \\\"@1inch/solidity-utils/contracts/libraries/ECDSA.sol\\\";\\n\\nimport { BalanceManager } from \\\"./BalanceManager.sol\\\";\\n\\ncontract FeeCollector is BalanceManager {\\n    address private immutable _OWNER;\\n\\n    constructor(IWETH weth, address owner) BalanceManager(weth) {\\n        _OWNER = owner;\\n    }\\n\\n    modifier onlyOwner() override {\\n        if(msg.sender != _OWNER) revert OnlyOwner();\\n        _;\\n    }\\n\\n    function isValidSignature(bytes32 hash, bytes calldata signature) external view override returns (bytes4 magicValue) {\\n        if (ECDSA.recover(hash, signature) == _OWNER) magicValue = this.isValidSignature.selector;\\n    }\\n\\n    function _targetToCheck() internal view override returns(address) {\\n        return address(this);\\n    }\\n}\\n\",\"keccak256\":\"0xed812697087ef434dee6884dd41e46008b93fb81824a81345145e0fbcba42828\",\"license\":\"MIT\"},\"contracts/interfaces/IBalanceManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Interface to manage contract balance.\\n */\\ninterface IBalanceManager{\\n    error EstimationResults(bool[] statuses, bytes[] results);\\n    error ETHTransferFailed();\\n    error InvalidLength();\\n    error LengthMismatch();\\n    error NotEnoughProfit();\\n    error OnlyOwner();\\n\\n    /**\\n     * @notice Execute arbitrary calls.\\n     * @param targets Addresses of the contracts to call.\\n     * @param arguments Data to send to each contract.\\n     */\\n    function arbitraryCalls(address[] calldata targets, bytes[] calldata arguments) external payable;\\n\\n    /**\\n     * @notice Execute arbitrary calls.\\n     * @param targets Addresses of the contracts to call.\\n     * @param arguments Data to send to each contract.\\n     * @param values Values to send to each contract.\\n     */\\n    function arbitraryCalls(address[] calldata targets, bytes[] calldata arguments, uint256[] calldata values) external payable;\\n\\n    /**\\n     * @notice Execute arbitrary calls and check the ETH balance after.\\n     * @param targets Addresses of the contracts to call.\\n     * @param arguments Data to send to each contract.\\n     * @param minReturn Minimum amount of ETH balance after all calls.\\n     */\\n    function arbitraryCallsWithEthCheck(address[] calldata targets, bytes[] calldata arguments, uint256 minReturn) external payable;\\n\\n    /**\\n     * @notice Execute arbitrary calls and check the ETH balance after.\\n     * @param targets Addresses of the contracts to call.\\n     * @param arguments Data to send to each contract.\\n     * @param values Values to send to each contract.\\n     * @param minReturn Minimum amount of ETH balance after all calls.\\n     */\\n    function arbitraryCallsWithEthCheck(\\n        address[] calldata targets,\\n        bytes[] calldata arguments,\\n        uint256[] calldata values,\\n        uint256 minReturn\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute arbitrary calls and check the token balance after.\\n     * @param targets Addresses of the contracts to call.\\n     * @param arguments Data to send to each contract.\\n     * @param token Token to check the balance of.\\n     * @param minReturn Minimum amount of token balance after all calls.\\n     */\\n    function arbitraryCallsWithTokenCheck(\\n        address[] calldata targets,\\n        bytes[] calldata arguments,\\n        IERC20 token,\\n        uint256 minReturn\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute arbitrary calls and check the token balance after.\\n     * @param targets Addresses of the contracts to call.\\n     * @param arguments Data to send to each contract.\\n     * @param values Values to send to each contract.\\n     * @param token Token to check the balance of.\\n     * @param minReturn Minimum amount of token balance after all calls.\\n     */\\n    function arbitraryCallsWithTokenCheck(\\n        address[] calldata targets,\\n        bytes[] calldata arguments,\\n        uint256[] calldata values,\\n        IERC20 token,\\n        uint256 minReturn\\n    ) external payable;\\n\\n    /**\\n     * @notice Estimate the results of arbitrary calls.\\n     * @param targets Addresses of the contracts to call.\\n     * @param arguments Data to send to each contract.\\n     * @dev This function reverts results with `EstimationResults` error.\\n     */\\n    function estimateArbitraryCalls(address[] calldata targets, bytes[] calldata arguments) external payable;\\n\\n    /**\\n     * @notice Estimate the results of arbitrary calls.\\n     * @param targets Addresses of the contracts to call.\\n     * @param arguments Data to send to each contract.\\n     * @param values Values to send to each contract.\\n     * @dev This function reverts results with `EstimationResults` error.\\n     */\\n    function estimateArbitraryCalls(address[] calldata targets, bytes[] calldata arguments, uint256[] calldata values) external payable;\\n\\n    /**\\n     * @notice Approves a spender to spend an infinite amount of tokens.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param to The address which will spend the funds.\\n     */\\n    function approve(IERC20 token, address to) external;\\n\\n    /**\\n     * @notice Transfers a certain amount of tokens to a recipient.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param to The address which will receive the funds.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function transfer(IERC20 token, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Batch approves a spender to spend an infinite amount of multiple tokens.\\n     * @param data The data containing the token addresses and the respective spender addresses.\\n     */\\n    function batchApprove(bytes calldata data) external;\\n\\n    /**\\n     * @notice Batch transfers multiple tokens to the respective recipients.\\n     * @param data The data containing the token addresses, recipients and amounts.\\n     */\\n    function batchTransfer(bytes calldata data) external;\\n\\n    /**\\n     * @notice Unwrap the contract's WETH balance to a recipient.\\n     * @param receiver The address which will receive ETH.\\n     * @param amount The amount of tokens to unwrap.\\n     */\\n    function unwrapTo(address payable receiver, uint256 amount) external;\\n\\n    /**\\n     * @notice Rescue all ETH from the contract.\\n     */\\n    function rescueEther() external;\\n}\\n\\n/* solhint-enable avoid-low-level-calls */\\n\",\"keccak256\":\"0xef6fd74f4da66b7043ec341b685ef5ad63c6350f039195ed40b5413c587ef335\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0346100d957601f611c1638819003918201601f19168301916001600160401b038311848410176100dd5780849260409485528339810103126100d95780516001600160a01b039182821682036100d9576020015191821682036100d95760805260a052604051611b2490816100f2823960805181610171015260a05181818161011d01528181610249015281816102c901528181610597015281816106d601528181610902015281816109ce01528181610cbd01528181610d6a01528181610e8d015281816110130152818161145501526117e80152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60406080815260048036101561001e575b5050361561001c575f80fd5b005b5f3560e01c8063038ec2ab1461110357806310a890af14610fa85780631626ba7e14610dfd5780631f3177ba14610d4757806320969d0714610c76578063295861b1146109a7578063343590a41461089c5780633a9d666f146108055780633d006abd146107925780634cbdf31c146107065780637e5465ba1461067e57806385c014381461056f578063bdbb216a146102a4578063beabacc8146101ef5763c12ea3ca0361001057346101eb57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb57803573ffffffffffffffffffffffffffffffffffffffff918282168092036101eb57602435927f00000000000000000000000000000000000000000000000000000000000000001633036101c45782907f2e1a7d4d000000000000000000000000000000000000000000000000000000005f52525f80602481807f00000000000000000000000000000000000000000000000000000000000000005af1156101ba573081036101a057005b5f8080938193611388f1156101b157005b513d5f823e3d90fd5b82513d5f823e3d90fd5b83517f5fc483c5000000000000000000000000000000000000000000000000000000008152fd5b5f80fd5b5090346101eb5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb576102286111e0565b9061023161131a565b9073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016330361027c5761001c6044358385611911565b8390517f5fc483c5000000000000000000000000000000000000000000000000000000008152fd5b506102ae36611231565b9092919373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163303610548578185036105215794939290610303846116df565b956103108651978861133d565b84875261031c856116df565b93602092838901947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0809701368737610354886116df565b976103618a51998a61133d565b8089528761036e826116df565b015f5b8181106105125750505f5b81811061049a57505050505085519687967f9cb0e09d0000000000000000000000000000000000000000000000000000000088526044880192880152518091526064860192905f5b818110610481575050507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8583030160248601528351908183528083019281808460051b8301019601945f915b84831061041e5788880389fd5b919395975091939582828203018752848389518051908185525f5b82811061046a575050838392601f835f86809660019a01015201160101990197019301909188979695939492610411565b818101850151868201860152899488945001610439565b82511515855288975093830193918301916001016103c4565b805f808d9e98999a9c9d6104b96104b4600196888c6116f7565b611734565b906104c5858a366116f7565b356104d1868b8b611755565b8093519384928337810185815203925af18c6104f5836104ef611682565b926117b5565b5261050082896117b5565b9015159052019a99989695949a61037c565b60608b82018901528701610371565b85517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b85517f5fc483c5000000000000000000000000000000000000000000000000000000008152fd5b506105793661129a565b9573ffffffffffffffffffffffffffffffffffffffff9594919392957f0000000000000000000000000000000000000000000000000000000000000000163303610657578582036106305786820361063057505f5b8181106105d757005b5f806105e76104b484868a6116f7565b8a6105f3858c8a6116f7565b356105ff868c8a611755565b8093519384928337810185815203925af1610618611682565b5015610626576001016105ce565b87513d5f823e3d90fd5b87517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b87517f5fc483c5000000000000000000000000000000000000000000000000000000008152fd5b5090346101eb57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb576106b66111e0565b6106be61131a565b9173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016330361027c5761001c83836119a9565b5060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb5767ffffffffffffffff81358181116101eb5761075090369084016111af565b6024929192358281116101eb5761076a90369086016111af565b90926044359081116101eb5761001c95610786913691016111af565b939092606435956117c9565b5060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb5767ffffffffffffffff81358181116101eb576107dc90369084016111af565b916024359081116101eb5761001c936107f7913691016111af565b8092916044359436936117c9565b5060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb5767ffffffffffffffff81358181116101eb5761084f90369084016111af565b9190926024359182116101eb57610868913691016111af565b6044939193359173ffffffffffffffffffffffffffffffffffffffff831683036101eb578161001c956064359536936113e5565b50346101eb5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb57803567ffffffffffffffff81116101eb576108ea9036908301611203565b9173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633036101c457602893602884066109815750505f5b82811061094057005b8061097b601486930161095e61095882858989611626565b9061163e565b610972610958606093878701908a8a611626565b821c911c6119a9565b01610937565b517f947d5a84000000000000000000000000000000000000000000000000000000008152fd5b506109b13661129a565b9473ffffffffffffffffffffffffffffffffffffffff96929394967f0000000000000000000000000000000000000000000000000000000000000000163303610c4e57838703610c2657610a0a879694939298976116df565b97610a178851998a61133d565b868952610a23876116df565b95602094858b01967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0809901368937610a5b8a6116df565b99610a688c519b8c61133d565b808b5289610a75826116df565b015f5b818110610c175750505f5b818110610ba3575050505050505085519687967f9cb0e09d0000000000000000000000000000000000000000000000000000000088526044880192880152518091526064860192905f5b818110610b8a575050507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8583030160248601528351908183528083019281808460051b8301019601945f915b848310610b275788880389fd5b919395975091939582828203018752848389518051908185525f5b828110610b73575050838392601f835f86809660019a01015201160101990197019301909188979695939492610b1a565b818101850151868201860152899488945001610b42565b8251151585528897509383019391830191600101610acd565b808c8e9f999a9b9d9e5f8981928a610bdc878f610bd5828f928f908f60019f6104b491610bcf936116f7565b986116f7565b3593611755565b8093519384928337810185815203925af190610bfa836104ef611682565b52610c05828b6117b5565b9015159052019c9b9a9897969c610a83565b60608d82018b01528901610a78565b8288517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b8288517f5fc483c5000000000000000000000000000000000000000000000000000000008152fd5b5090346101eb575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb5773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163303610d21575f80808047335af1610cf3611682565b5015610cfb57005b517fb12d13eb000000000000000000000000000000000000000000000000000000008152fd5b517f5fc483c5000000000000000000000000000000000000000000000000000000008152fd5b50610d5136611231565b909373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633036105485781830361052157505f5b828110610da357005b5f80610db36104b48487896116f7565b610dbe8486366116f7565b35610dca85878b611755565b9190828c519384928337810185815203925af1610de5611682565b5015610df357600101610d9a565b85513d5f823e3d90fd5b50346101eb57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb576024359167ffffffffffffffff83116101eb57610e4e60209336908401611203565b5f935f92845192838682604114610f91575050604014610f4e57505f9150815b610f06575b505073ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016911614610ede575b7fffffffff00000000000000000000000000000000000000000000000000000000905191168152f35b7f1626ba7e000000000000000000000000000000000000000000000000000000009150610eb5565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a160608301511015610e73578592505f9160809135815282805260015afa505f515f80610e73565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81888086940135918260ff1c601b018286015288850137166060820152610e6e565b80925083919301355f1a8984015281830137610e6e565b50346101eb5760209060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb57803567ffffffffffffffff81116101eb57610ff99036908301611203565b92909173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633036110dc57604894604885066109815750505f5b83811061105157005b806110a4601487930161106961095882858a8a611626565b906060916110916110836109586028880180958d8d611626565b841c92878701908b8b611626565b939035938881106110aa575b501c611911565b01611048565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90890360031b1b909316925f61109d565b84517f5fc483c5000000000000000000000000000000000000000000000000000000008152fd5b5060a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb5767ffffffffffffffff81358181116101eb5761114d90369084016111af565b9290916024358181116101eb5761116790369084016111af565b9190926044359182116101eb57611180913691016111af565b916064359373ffffffffffffffffffffffffffffffffffffffff851685036101eb5761001c96608435966113e5565b9181601f840112156101eb5782359167ffffffffffffffff83116101eb576020808501948460051b0101116101eb57565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036101eb57565b9181601f840112156101eb5782359167ffffffffffffffff83116101eb57602083818601950101116101eb57565b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126101eb5767ffffffffffffffff916004358381116101eb578261127c916004016111af565b939093926024359182116101eb57611296916004016111af565b9091565b9060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126101eb5767ffffffffffffffff6004358181116101eb57836112e5916004016111af565b939093926024358381116101eb5782611300916004016111af565b939093926044359182116101eb57611296916004016111af565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036101eb57565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761137e57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b919082018092116113b857565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b969490969593919573ffffffffffffffffffffffffffffffffffffffff809516926040978851957f70a08231000000000000000000000000000000000000000000000000000000009485885260049b308d8a01526020998a8a6024818c5afa998a1561161c575f9a6115ed575b507f00000000000000000000000000000000000000000000000000000000000000001633036115c55782810361159d5781810361159d5790899695949392915f5b8d82821061152f57955050505050506024915051809481938252308b8301525afa928315610df3575f936114fd575b50506114ce91926113ab565b116114d7575050565b517f3b5c3088000000000000000000000000000000000000000000000000000000008152fd5b90809350813d8311611528575b611514818361133d565b810103126101eb576114ce9151915f6114c2565b503d61150a565b879899505f919293949596979061154b6104b4858786956116f7565b9061155785888c6116f7565b35611563868a8c611755565b8093519384928337810185815203925af161157c611682565b501561159357600101908a97969594939291611493565b8c513d5f823e3d90fd5b8c8c517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b8c8c517f5fc483c5000000000000000000000000000000000000000000000000000000008152fd5b9099508a81813d8311611615575b611605818361133d565b810103126101eb5751985f611452565b503d6115fb565b8d513d5f823e3d90fd5b909392938483116101eb5784116101eb578101920390565b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000903581811693926014811061167357505050565b60140360031b82901b16169150565b3d156116da573d9067ffffffffffffffff821161137e57604051916116cf60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018461133d565b82523d5f602084013e565b606090565b67ffffffffffffffff811161137e5760051b60200190565b91908110156117075760051b0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b3573ffffffffffffffffffffffffffffffffffffffff811681036101eb5790565b91908110156117075760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1813603018212156101eb57019081359167ffffffffffffffff83116101eb5760200182360381136101eb579190565b80518210156117075760209160051b010190565b929094939193479573ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633036118e7578281036118bd578181036118bd575f5b81811061186857505050505050506118379047926113ab565b1161183e57565b60046040517f3b5c3088000000000000000000000000000000000000000000000000000000008152fd5b6118766104b48284896116f7565b5f8061188384878a6116f7565b359261189085898d611755565b90946040958287519384928337810185815203925af16118ae611682565b50156101b1575060010161181e565b60046040517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b60046040517f5fc483c5000000000000000000000000000000000000000000000000000000008152fd5b9160446020925f92604051917fa9059cbb0000000000000000000000000000000000000000000000000000000083526004830152602482015282855af19081611987575b501561195d57565b60046040517ffb7f5079000000000000000000000000000000000000000000000000000000008152fd5b90503d156119a1575060015f5114601f3d11165b5f611955565b3b151561199b565b906119b48183611a6a565b156119bd575050565b60205f60446040517f095ea7b300000000000000000000000000000000000000000000000000000000815284600482015282602482015282865af180611a4b575b15918215611a39575b5050611a0f57565b60046040517f19be9a90000000000000000000000000000000000000000000000000000000008152fd5b611a439250611a6a565b155f80611a07565b503d15611a615760015f5114601f3d11166119fe565b813b15156119fe565b91905f6044602092604051907f095ea7b300000000000000000000000000000000000000000000000000000000825260048201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602482015282865af19182611ad15750565b9091503d15611ae8575060015f5114601f3d111690565b3b15159056fea2646970667358221220ad951d22db9dc027832f55db9d5740daa6e4e28cf5e87fcc09b12ed82443a19d64736f6c63430008170033",
  "deployedBytecode": "0x60406080815260048036101561001e575b5050361561001c575f80fd5b005b5f3560e01c8063038ec2ab1461110357806310a890af14610fa85780631626ba7e14610dfd5780631f3177ba14610d4757806320969d0714610c76578063295861b1146109a7578063343590a41461089c5780633a9d666f146108055780633d006abd146107925780634cbdf31c146107065780637e5465ba1461067e57806385c014381461056f578063bdbb216a146102a4578063beabacc8146101ef5763c12ea3ca0361001057346101eb57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb57803573ffffffffffffffffffffffffffffffffffffffff918282168092036101eb57602435927f00000000000000000000000000000000000000000000000000000000000000001633036101c45782907f2e1a7d4d000000000000000000000000000000000000000000000000000000005f52525f80602481807f00000000000000000000000000000000000000000000000000000000000000005af1156101ba573081036101a057005b5f8080938193611388f1156101b157005b513d5f823e3d90fd5b82513d5f823e3d90fd5b83517f5fc483c5000000000000000000000000000000000000000000000000000000008152fd5b5f80fd5b5090346101eb5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb576102286111e0565b9061023161131a565b9073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016330361027c5761001c6044358385611911565b8390517f5fc483c5000000000000000000000000000000000000000000000000000000008152fd5b506102ae36611231565b9092919373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163303610548578185036105215794939290610303846116df565b956103108651978861133d565b84875261031c856116df565b93602092838901947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0809701368737610354886116df565b976103618a51998a61133d565b8089528761036e826116df565b015f5b8181106105125750505f5b81811061049a57505050505085519687967f9cb0e09d0000000000000000000000000000000000000000000000000000000088526044880192880152518091526064860192905f5b818110610481575050507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8583030160248601528351908183528083019281808460051b8301019601945f915b84831061041e5788880389fd5b919395975091939582828203018752848389518051908185525f5b82811061046a575050838392601f835f86809660019a01015201160101990197019301909188979695939492610411565b818101850151868201860152899488945001610439565b82511515855288975093830193918301916001016103c4565b805f808d9e98999a9c9d6104b96104b4600196888c6116f7565b611734565b906104c5858a366116f7565b356104d1868b8b611755565b8093519384928337810185815203925af18c6104f5836104ef611682565b926117b5565b5261050082896117b5565b9015159052019a99989695949a61037c565b60608b82018901528701610371565b85517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b85517f5fc483c5000000000000000000000000000000000000000000000000000000008152fd5b506105793661129a565b9573ffffffffffffffffffffffffffffffffffffffff9594919392957f0000000000000000000000000000000000000000000000000000000000000000163303610657578582036106305786820361063057505f5b8181106105d757005b5f806105e76104b484868a6116f7565b8a6105f3858c8a6116f7565b356105ff868c8a611755565b8093519384928337810185815203925af1610618611682565b5015610626576001016105ce565b87513d5f823e3d90fd5b87517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b87517f5fc483c5000000000000000000000000000000000000000000000000000000008152fd5b5090346101eb57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb576106b66111e0565b6106be61131a565b9173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016330361027c5761001c83836119a9565b5060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb5767ffffffffffffffff81358181116101eb5761075090369084016111af565b6024929192358281116101eb5761076a90369086016111af565b90926044359081116101eb5761001c95610786913691016111af565b939092606435956117c9565b5060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb5767ffffffffffffffff81358181116101eb576107dc90369084016111af565b916024359081116101eb5761001c936107f7913691016111af565b8092916044359436936117c9565b5060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb5767ffffffffffffffff81358181116101eb5761084f90369084016111af565b9190926024359182116101eb57610868913691016111af565b6044939193359173ffffffffffffffffffffffffffffffffffffffff831683036101eb578161001c956064359536936113e5565b50346101eb5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb57803567ffffffffffffffff81116101eb576108ea9036908301611203565b9173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633036101c457602893602884066109815750505f5b82811061094057005b8061097b601486930161095e61095882858989611626565b9061163e565b610972610958606093878701908a8a611626565b821c911c6119a9565b01610937565b517f947d5a84000000000000000000000000000000000000000000000000000000008152fd5b506109b13661129a565b9473ffffffffffffffffffffffffffffffffffffffff96929394967f0000000000000000000000000000000000000000000000000000000000000000163303610c4e57838703610c2657610a0a879694939298976116df565b97610a178851998a61133d565b868952610a23876116df565b95602094858b01967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0809901368937610a5b8a6116df565b99610a688c519b8c61133d565b808b5289610a75826116df565b015f5b818110610c175750505f5b818110610ba3575050505050505085519687967f9cb0e09d0000000000000000000000000000000000000000000000000000000088526044880192880152518091526064860192905f5b818110610b8a575050507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8583030160248601528351908183528083019281808460051b8301019601945f915b848310610b275788880389fd5b919395975091939582828203018752848389518051908185525f5b828110610b73575050838392601f835f86809660019a01015201160101990197019301909188979695939492610b1a565b818101850151868201860152899488945001610b42565b8251151585528897509383019391830191600101610acd565b808c8e9f999a9b9d9e5f8981928a610bdc878f610bd5828f928f908f60019f6104b491610bcf936116f7565b986116f7565b3593611755565b8093519384928337810185815203925af190610bfa836104ef611682565b52610c05828b6117b5565b9015159052019c9b9a9897969c610a83565b60608d82018b01528901610a78565b8288517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b8288517f5fc483c5000000000000000000000000000000000000000000000000000000008152fd5b5090346101eb575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb5773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163303610d21575f80808047335af1610cf3611682565b5015610cfb57005b517fb12d13eb000000000000000000000000000000000000000000000000000000008152fd5b517f5fc483c5000000000000000000000000000000000000000000000000000000008152fd5b50610d5136611231565b909373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633036105485781830361052157505f5b828110610da357005b5f80610db36104b48487896116f7565b610dbe8486366116f7565b35610dca85878b611755565b9190828c519384928337810185815203925af1610de5611682565b5015610df357600101610d9a565b85513d5f823e3d90fd5b50346101eb57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb576024359167ffffffffffffffff83116101eb57610e4e60209336908401611203565b5f935f92845192838682604114610f91575050604014610f4e57505f9150815b610f06575b505073ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016911614610ede575b7fffffffff00000000000000000000000000000000000000000000000000000000905191168152f35b7f1626ba7e000000000000000000000000000000000000000000000000000000009150610eb5565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a160608301511015610e73578592505f9160809135815282805260015afa505f515f80610e73565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81888086940135918260ff1c601b018286015288850137166060820152610e6e565b80925083919301355f1a8984015281830137610e6e565b50346101eb5760209060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb57803567ffffffffffffffff81116101eb57610ff99036908301611203565b92909173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633036110dc57604894604885066109815750505f5b83811061105157005b806110a4601487930161106961095882858a8a611626565b906060916110916110836109586028880180958d8d611626565b841c92878701908b8b611626565b939035938881106110aa575b501c611911565b01611048565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90890360031b1b909316925f61109d565b84517f5fc483c5000000000000000000000000000000000000000000000000000000008152fd5b5060a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb5767ffffffffffffffff81358181116101eb5761114d90369084016111af565b9290916024358181116101eb5761116790369084016111af565b9190926044359182116101eb57611180913691016111af565b916064359373ffffffffffffffffffffffffffffffffffffffff851685036101eb5761001c96608435966113e5565b9181601f840112156101eb5782359167ffffffffffffffff83116101eb576020808501948460051b0101116101eb57565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036101eb57565b9181601f840112156101eb5782359167ffffffffffffffff83116101eb57602083818601950101116101eb57565b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126101eb5767ffffffffffffffff916004358381116101eb578261127c916004016111af565b939093926024359182116101eb57611296916004016111af565b9091565b9060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126101eb5767ffffffffffffffff6004358181116101eb57836112e5916004016111af565b939093926024358381116101eb5782611300916004016111af565b939093926044359182116101eb57611296916004016111af565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036101eb57565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761137e57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b919082018092116113b857565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b969490969593919573ffffffffffffffffffffffffffffffffffffffff809516926040978851957f70a08231000000000000000000000000000000000000000000000000000000009485885260049b308d8a01526020998a8a6024818c5afa998a1561161c575f9a6115ed575b507f00000000000000000000000000000000000000000000000000000000000000001633036115c55782810361159d5781810361159d5790899695949392915f5b8d82821061152f57955050505050506024915051809481938252308b8301525afa928315610df3575f936114fd575b50506114ce91926113ab565b116114d7575050565b517f3b5c3088000000000000000000000000000000000000000000000000000000008152fd5b90809350813d8311611528575b611514818361133d565b810103126101eb576114ce9151915f6114c2565b503d61150a565b879899505f919293949596979061154b6104b4858786956116f7565b9061155785888c6116f7565b35611563868a8c611755565b8093519384928337810185815203925af161157c611682565b501561159357600101908a97969594939291611493565b8c513d5f823e3d90fd5b8c8c517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b8c8c517f5fc483c5000000000000000000000000000000000000000000000000000000008152fd5b9099508a81813d8311611615575b611605818361133d565b810103126101eb5751985f611452565b503d6115fb565b8d513d5f823e3d90fd5b909392938483116101eb5784116101eb578101920390565b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000903581811693926014811061167357505050565b60140360031b82901b16169150565b3d156116da573d9067ffffffffffffffff821161137e57604051916116cf60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018461133d565b82523d5f602084013e565b606090565b67ffffffffffffffff811161137e5760051b60200190565b91908110156117075760051b0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b3573ffffffffffffffffffffffffffffffffffffffff811681036101eb5790565b91908110156117075760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1813603018212156101eb57019081359167ffffffffffffffff83116101eb5760200182360381136101eb579190565b80518210156117075760209160051b010190565b929094939193479573ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633036118e7578281036118bd578181036118bd575f5b81811061186857505050505050506118379047926113ab565b1161183e57565b60046040517f3b5c3088000000000000000000000000000000000000000000000000000000008152fd5b6118766104b48284896116f7565b5f8061188384878a6116f7565b359261189085898d611755565b90946040958287519384928337810185815203925af16118ae611682565b50156101b1575060010161181e565b60046040517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b60046040517f5fc483c5000000000000000000000000000000000000000000000000000000008152fd5b9160446020925f92604051917fa9059cbb0000000000000000000000000000000000000000000000000000000083526004830152602482015282855af19081611987575b501561195d57565b60046040517ffb7f5079000000000000000000000000000000000000000000000000000000008152fd5b90503d156119a1575060015f5114601f3d11165b5f611955565b3b151561199b565b906119b48183611a6a565b156119bd575050565b60205f60446040517f095ea7b300000000000000000000000000000000000000000000000000000000815284600482015282602482015282865af180611a4b575b15918215611a39575b5050611a0f57565b60046040517f19be9a90000000000000000000000000000000000000000000000000000000008152fd5b611a439250611a6a565b155f80611a07565b503d15611a615760015f5114601f3d11166119fe565b813b15156119fe565b91905f6044602092604051907f095ea7b300000000000000000000000000000000000000000000000000000000825260048201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602482015282865af19182611ad15750565b9091503d15611ae8575060015f5114601f3d111690565b3b15159056fea2646970667358221220ad951d22db9dc027832f55db9d5740daa6e4e28cf5e87fcc09b12ed82443a19d64736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "isValidSignature(bytes32,bytes)": {
        "details": "Should return whether the signature provided is valid for the provided data",
        "params": {
          "hash": "Hash of the data to be signed",
          "signature": "Signature byte array associated with _data"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,address)": {
        "notice": "See {IBalanceManager-approve}."
      },
      "arbitraryCalls(address[],bytes[])": {
        "notice": "See {IBalanceManager-arbitraryCalls}."
      },
      "arbitraryCalls(address[],bytes[],uint256[])": {
        "notice": "See {IBalanceManager-arbitraryCalls}."
      },
      "arbitraryCallsWithEthCheck(address[],bytes[],uint256)": {
        "notice": "See {IBalanceManager-arbitraryCallsWithEthCheck}."
      },
      "arbitraryCallsWithEthCheck(address[],bytes[],uint256[],uint256)": {
        "notice": "See {IBalanceManager-arbitraryCallsWithEthCheck}."
      },
      "arbitraryCallsWithTokenCheck(address[],bytes[],address,uint256)": {
        "notice": "See {IBalanceManager-arbitraryCallsWithTokenCheck}."
      },
      "arbitraryCallsWithTokenCheck(address[],bytes[],uint256[],address,uint256)": {
        "notice": "See {IBalanceManager-arbitraryCallsWithTokenCheck}."
      },
      "batchApprove(bytes)": {
        "notice": "See {IBalanceManager-batchApprove}."
      },
      "batchTransfer(bytes)": {
        "notice": "See {IBalanceManager-batchTransfer}."
      },
      "estimateArbitraryCalls(address[],bytes[])": {
        "notice": "See {IBalanceManager-estimateArbitraryCalls}."
      },
      "estimateArbitraryCalls(address[],bytes[],uint256[])": {
        "notice": "See {IBalanceManager-estimateArbitraryCalls}."
      },
      "rescueEther()": {
        "notice": "See {IBalanceManager-rescueEther}."
      },
      "transfer(address,address,uint256)": {
        "notice": "See {IBalanceManager-transfer}."
      },
      "unwrapTo(address,uint256)": {
        "notice": "See {IBalanceManager-unwrapTo}."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
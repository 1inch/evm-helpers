{
  "address": "0xE93293A6088d3a8abDDf62e6CA1A085Cec97D06F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IKyber",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxTickNum",
          "type": "uint256"
        }
      ],
      "name": "getTicks",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "ticks",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc0a0dee215add6d228d24d0589ee7a3c1d5333db6d7a744907e7c0e5c79a7848",
  "receipt": {
    "to": null,
    "from": "0x56E44874F624EbDE6efCc783eFD685f0FBDC6dcF",
    "contractAddress": "0xE93293A6088d3a8abDDf62e6CA1A085Cec97D06F",
    "transactionIndex": 21,
    "gasUsed": "514579",
    "logsBloom": "0x
    "blockHash": "0x811d94f8b8e300d64157e5e24d237a60002c3b492192420003f3c14156afd2e7",
    "transactionHash": "0xc0a0dee215add6d228d24d0589ee7a3c1d5333db6d7a744907e7c0e5c79a7848",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 43069429,
        "transactionHash": "0xc0a0dee215add6d228d24d0589ee7a3c1d5333db6d7a744907e7c0e5c79a7848",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000056e44874f624ebde6efcc783efd685f0fbdc6dcf",
          "0x000000000000000000000000448aa1665fe1fae6d1a00a9209ea62d7dcd81a4b"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003c3468ef8e06830000000000000000000000000000000000000000000000000e4da34b75549c080000000000000000000000000000000000000000000001ff5fea866887bff9fb0000000000000000000000000000000000000000000000000e116ee285c695850000000000000000000000000000000000000000000001ff6026bad1774e007e",
        "logIndex": 84,
        "blockHash": "0x811d94f8b8e300d64157e5e24d237a60002c3b492192420003f3c14156afd2e7"
      }
    ],
    "blockNumber": 43069429,
    "cumulativeGasUsed": "3701538",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e02235c3b1b7c2897bad8bd80c4e15b1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IKyber\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTickNum\",\"type\":\"uint256\"}],\"name\":\"getTicks\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"ticks\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KyberHelper.sol\":\"KyberHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/KyberHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IKyber.sol\\\";\\n\\ncontract KyberHelper {\\n\\n    function getTicks(IKyber pool, uint maxTickNum) external view returns (bytes[] memory ticks) {\\n        (,,int24 tick,) = pool.getPoolState();\\n\\n        int24[] memory initTicks = new int24[](maxTickNum);\\n\\n        uint counter = 1;\\n        initTicks[0] = tick;\\n\\n        (int24 previous, int24 next) = pool.initializedTicks(tick);\\n        if (previous != tick && previous != 0) {\\n            initTicks[counter] = previous;\\n            counter++;\\n        }\\n        if (next != tick && next != 0) {\\n            initTicks[counter] = next;\\n            counter++;\\n        }\\n\\n        while ((next != 0 || previous != 0)) {\\n            if (previous != 0) {\\n                (int24 p, ) = pool.initializedTicks(previous);\\n                if (previous != p && p != 0) {\\n                    initTicks[counter] = p;\\n                    previous = p;\\n                    counter++;\\n                } else {\\n                    previous = 0;\\n                }\\n            }\\n\\n            if (counter == maxTickNum) {\\n                break;\\n            }\\n\\n            if (next != 0) {\\n                (, int24 n) = pool.initializedTicks(next);\\n                if (next != n && n != 0) {\\n                    initTicks[counter] = n;\\n                    next = n;\\n                    counter++;\\n                } else {\\n                    next = 0;\\n                }\\n            }\\n\\n            if (counter == maxTickNum) {\\n                break;\\n            }\\n        }\\n\\n        ticks = new bytes[](counter);\\n        for (uint i = 0; i < counter; i++) {\\n            (\\n                uint128 liquidityGross,\\n                int128 liquidityNet,\\n                ,\\n            ) = pool.ticks(initTicks[i]);\\n\\n             ticks[i] = abi.encodePacked(\\n                 liquidityGross,\\n                 liquidityNet,\\n                 initTicks[i]\\n             );\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x9cda3bb5368e30d7edb8ac67d3f374da14bd6900b29b4608824a3f0c31ed0b48\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IKyber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IKyber {\\n  /// @notice Look up information about a specific tick in the pool\\n  /// @param tick The tick to look up\\n  /// @return liquidityGross total liquidity amount from positions that uses this tick as a lower or upper tick\\n  /// liquidityNet how much liquidity changes when the pool tick crosses above the tick\\n  /// feeGrowthOutside the fee growth on the other side of the tick relative to the current tick\\n  /// secondsPerLiquidityOutside the seconds per unit of liquidity  spent on the other side of the tick relative to the current tick\\n  function ticks(int24 tick)\\n    external\\n    view\\n    returns (\\n      uint128 liquidityGross,\\n      int128 liquidityNet,\\n      uint256 feeGrowthOutside,\\n      uint128 secondsPerLiquidityOutside\\n    );\\n\\n  /// @notice Returns the previous and next initialized ticks of a specific tick\\n  /// @dev If specified tick is uninitialized, the returned values are zero.\\n  /// @param tick The tick to look up\\n  function initializedTicks(int24 tick) external view returns (int24 previous, int24 next);\\n\\n  /// @notice Fetches the pool's prices, ticks and lock status\\n  /// @return sqrtP sqrt of current price: sqrt(token1/token0)\\n  /// @return currentTick pool's current tick\\n  /// @return nearestCurrentTick pool's nearest initialized tick that is <= currentTick\\n  /// @return locked true if pool is locked, false otherwise\\n  function getPoolState()\\n    external\\n    view\\n    returns (\\n      uint160 sqrtP,\\n      int24 currentTick,\\n      int24 nearestCurrentTick,\\n      bool locked\\n    );\\n}\\n\",\"keccak256\":\"0xc03ec9bd4c3932cf6f87c939e7adbe87e80870e132862b61d0bb609970c808c9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610864908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c638d8fdc041461002857600080fd5b3461045e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261045e576004359073ffffffffffffffffffffffffffffffffffffffff808316830361045e577f217ac2370000000000000000000000000000000000000000000000000000000082526080826004818487165afa91821561046b576000926106b3575b506100c2602435610765565b6100cf6040519182610716565b60243581526100df602435610765565b927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0602083019401368537600193825115610654578160020b9052604051907fc0ac75cf0000000000000000000000000000000000000000000000000000000082528060020b6004830152604082602481878a165afa90811561046b5760009260009261068f575b50829180938260020b8160020b141580610683575b610636575b5060020b9060020b8114158061062d575b610610575b505b8160020b1580158091610604575b1561054e578160020b610556575b602435861461054e57610488575b60243585036101995750505b6101d883610765565b936101e66040519586610716565b8385527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061021385610765565b0160005b81811061047757505060005b8481106102f9578560405160208101916020825280518093526040820192602060408260051b8501019201906000945b8186106102605784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0858203018252835180519081835260005b8281106102e4575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85600085809860019a0101520116010195019201950194919091610253565b80602080928401015182828701015201610295565b610303818461077d565b5160020b90604051917ff30dba9300000000000000000000000000000000000000000000000000000000835260048301526080826024818887165afa801561046b5760009260009161040d575b5061035b828661077d565b51907fffffffffffffffffffffffffffffffff000000000000000000000000000000006040519460801b16602085015260801b603084015260e81b604083015260238252606082019180831067ffffffffffffffff8411176103de576103d9926040526103c8828961077d565b526103d3818861077d565b506107b5565b610223565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9250506080823d608011610463575b8161042960809383610716565b8101031261045e5761043a82610811565b60208301519283600f0b840361045e5760606104569101610811565b509138610350565b600080fd5b3d915061041c565b6040513d6000823e3d90fd5b806060602080938a01015201610217565b9390604051907fc0ac75cf0000000000000000000000000000000000000000000000000000000082528060020b6004830152604082602481888b165afa91821561046b5760009261051b575b508160020b809160020b141580610512575b156105075790610501916104fa848661077d565b52916107b5565b936101c3565b5050926000906101c3565b508015156104e6565b61053e91925060403d604011610547575b6105368183610716565b810190610791565b905090386104d4565b503d61052c565b5050506101cf565b9490604051907fc0ac75cf0000000000000000000000000000000000000000000000000000000082528060020b6004830152604082602481898c165afa91821561046b576000926105e2575b508160020b809160020b1415806105d9575b156105ce57906105c8916104fa848761077d565b946101b5565b5050936000906101b5565b508015156105b4565b6105fc91925060403d604011610547576105368183610716565b5090386105a2565b508160020b15156101a7565b946106269195610620828661077d565b526107b5565b9338610197565b50801515610192565b9096508451600110156106545760020b604085015260029538610181565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b508060020b151561017c565b9092506106ab915060403d604011610547576105368183610716565b909138610167565b9091506080813d60801161070e575b816106cf60809383610716565b8101031261045e5780518281160361045e576106ed60208201610757565b5060606106fc60408301610757565b9101518015150361045e5790386100b6565b3d91506106c2565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176103de57604052565b51908160020b820361045e57565b67ffffffffffffffff81116103de5760051b60200190565b80518210156106545760209160051b010190565b919082604091031261045e576107b260206107ab84610757565b9301610757565b90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107e25760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b51906fffffffffffffffffffffffffffffffff8216820361045e5756fea2646970667358221220313935c8e94c7f8aba37230eef6291a87dd7211982f413af897a012c5578da1064736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c638d8fdc041461002857600080fd5b3461045e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261045e576004359073ffffffffffffffffffffffffffffffffffffffff808316830361045e577f217ac2370000000000000000000000000000000000000000000000000000000082526080826004818487165afa91821561046b576000926106b3575b506100c2602435610765565b6100cf6040519182610716565b60243581526100df602435610765565b927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0602083019401368537600193825115610654578160020b9052604051907fc0ac75cf0000000000000000000000000000000000000000000000000000000082528060020b6004830152604082602481878a165afa90811561046b5760009260009261068f575b50829180938260020b8160020b141580610683575b610636575b5060020b9060020b8114158061062d575b610610575b505b8160020b1580158091610604575b1561054e578160020b610556575b602435861461054e57610488575b60243585036101995750505b6101d883610765565b936101e66040519586610716565b8385527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061021385610765565b0160005b81811061047757505060005b8481106102f9578560405160208101916020825280518093526040820192602060408260051b8501019201906000945b8186106102605784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0858203018252835180519081835260005b8281106102e4575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85600085809860019a0101520116010195019201950194919091610253565b80602080928401015182828701015201610295565b610303818461077d565b5160020b90604051917ff30dba9300000000000000000000000000000000000000000000000000000000835260048301526080826024818887165afa801561046b5760009260009161040d575b5061035b828661077d565b51907fffffffffffffffffffffffffffffffff000000000000000000000000000000006040519460801b16602085015260801b603084015260e81b604083015260238252606082019180831067ffffffffffffffff8411176103de576103d9926040526103c8828961077d565b526103d3818861077d565b506107b5565b610223565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9250506080823d608011610463575b8161042960809383610716565b8101031261045e5761043a82610811565b60208301519283600f0b840361045e5760606104569101610811565b509138610350565b600080fd5b3d915061041c565b6040513d6000823e3d90fd5b806060602080938a01015201610217565b9390604051907fc0ac75cf0000000000000000000000000000000000000000000000000000000082528060020b6004830152604082602481888b165afa91821561046b5760009261051b575b508160020b809160020b141580610512575b156105075790610501916104fa848661077d565b52916107b5565b936101c3565b5050926000906101c3565b508015156104e6565b61053e91925060403d604011610547575b6105368183610716565b810190610791565b905090386104d4565b503d61052c565b5050506101cf565b9490604051907fc0ac75cf0000000000000000000000000000000000000000000000000000000082528060020b6004830152604082602481898c165afa91821561046b576000926105e2575b508160020b809160020b1415806105d9575b156105ce57906105c8916104fa848761077d565b946101b5565b5050936000906101b5565b508015156105b4565b6105fc91925060403d604011610547576105368183610716565b5090386105a2565b508160020b15156101a7565b946106269195610620828661077d565b526107b5565b9338610197565b50801515610192565b9096508451600110156106545760020b604085015260029538610181565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b508060020b151561017c565b9092506106ab915060403d604011610547576105368183610716565b909138610167565b9091506080813d60801161070e575b816106cf60809383610716565b8101031261045e5780518281160361045e576106ed60208201610757565b5060606106fc60408301610757565b9101518015150361045e5790386100b6565b3d91506106c2565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176103de57604052565b51908160020b820361045e57565b67ffffffffffffffff81116103de5760051b60200190565b80518210156106545760209160051b010190565b919082604091031261045e576107b260206107ab84610757565b9301610757565b90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107e25760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b51906fffffffffffffffffffffffffffffffff8216820361045e5756fea2646970667358221220313935c8e94c7f8aba37230eef6291a87dd7211982f413af897a012c5578da1064736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
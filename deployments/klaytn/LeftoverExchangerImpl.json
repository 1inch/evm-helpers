{
  "address": "0x322E22CC258cBA8b1D40348cB375BeddDD3C2d4C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWETH",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "name": "CallFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bool[]",
          "name": "statuses",
          "type": "bool[]"
        },
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "name": "EstimationResults",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ForceApproveFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughProfit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OnlyOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeTransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "name": "CallFailure",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "arguments",
          "type": "bytes[]"
        }
      ],
      "name": "arbitraryCalls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "arguments",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "minReturn",
          "type": "uint256"
        }
      ],
      "name": "arbitraryCallsWithEthCheck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "arguments",
          "type": "bytes[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minReturn",
          "type": "uint256"
        }
      ],
      "name": "arbitraryCallsWithTokenCheck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "arguments",
          "type": "bytes[]"
        }
      ],
      "name": "estimateArbitraryCalls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LeftoverExchanger.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "estimateMakeCalls",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LeftoverExchanger.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "makeCalls",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LeftoverExchanger.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "makeCallsNoThrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LeftoverExchanger.Call[]",
          "name": "calls",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "minReturn",
          "type": "uint256"
        }
      ],
      "name": "makeCallsWithEthCheck",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rescueEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unwrapTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa76ab19178f5a1d067492e7543c701a37f839dc66e75cb6443b45740b7ece369",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x322E22CC258cBA8b1D40348cB375BeddDD3C2d4C",
    "transactionIndex": 3,
    "gasUsed": "2234578",
    "logsBloom": "0x
    "blockHash": "0x7284f1e7a83e8078942a7a9046df1d6dd36d7ddf0a21a34fb67128c1bd555a7b",
    "transactionHash": "0xa76ab19178f5a1d067492e7543c701a37f839dc66e75cb6443b45740b7ece369",
    "logs": [],
    "blockNumber": 150925263,
    "cumulativeGasUsed": "2563393",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe4f05A66Ec68B54A58B17c22107b02e0232cC817",
    "0xa3bf91a131fccfecc43999c9ff4612a25a572859"
  ],
  "numDeployments": 2,
  "solcInputHash": "eb58825ea0176f387dabf5f112f4bd11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"CallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"name\":\"EstimationResults\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ForceApproveFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughProfit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"CallFailure\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"arguments\",\"type\":\"bytes[]\"}],\"name\":\"arbitraryCalls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"arguments\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"arbitraryCallsWithEthCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"arguments\",\"type\":\"bytes[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"arbitraryCallsWithTokenCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"arguments\",\"type\":\"bytes[]\"}],\"name\":\"estimateArbitraryCalls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LeftoverExchanger.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"estimateMakeCalls\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LeftoverExchanger.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"makeCalls\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LeftoverExchanger.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"makeCallsNoThrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LeftoverExchanger.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"makeCallsWithEthCheck\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unwrapTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isValidSignature(bytes32,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided data\",\"params\":{\"hash\":\"Hash of the data to be signed\",\"signature\":\"Signature byte array associated with _data\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LeftoverExchanger.sol\":\"LeftoverExchanger\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@1inch/solidity-utils/contracts/interfaces/IDaiLikePermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDaiLikePermit {\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbbb219886412a339a7f84b0850f700311dd2b3a106919ae54fa0a215d847a3b2\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IPermit2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPermit2 {\\n    struct PermitDetails {\\n        // ERC20 token address\\n        address token;\\n        // the maximum amount allowed to spend\\n        uint160 amount;\\n        // timestamp at which a spender's token allowances become invalid\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n    /// @notice The permit message signed for a single token allownce\\n    struct PermitSingle {\\n        // the permit data for a single token alownce\\n        PermitDetails details;\\n        // address permissioned on the allowed tokens\\n        address spender;\\n        // deadline on the permit signature\\n        uint256 sigDeadline;\\n    }\\n    /// @notice Packed allowance\\n    struct PackedAllowance {\\n        // amount allowed\\n        uint160 amount;\\n        // permission expiry\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n\\n    function transferFrom(address user, address spender, uint160 amount, address token) external;\\n\\n    function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\\n\\n    function allowance(address user, address token, address spender) external view returns (PackedAllowance memory);\\n}\\n\",\"keccak256\":\"0x63209a082f66ecb584b86e412b3dd0010e9675bc19bc1f80a75437311df7ec11\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    event Deposit(address indexed dst, uint256 wad);\\n\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x00eeab44dfd24ef7c27fcdfdf7b4d4df54a17650662522c1bf85950965892a3a\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\nlibrary ECDSA {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    uint256 private constant _S_BOUNDARY = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 + 1;\\n    uint256 private constant _COMPACT_S_MASK = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n    uint256 private constant _COMPACT_V_SHIFT = 255;\\n\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (address signer) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            if lt(s, _S_BOUNDARY) {\\n                let ptr := mload(0x40)\\n\\n                mstore(ptr, hash)\\n                mstore(add(ptr, 0x20), v)\\n                mstore(add(ptr, 0x40), r)\\n                mstore(add(ptr, 0x60), s)\\n                mstore(0, 0)\\n                pop(staticcall(gas(), 0x1, ptr, 0x80, 0, 0x20))\\n                signer := mload(0)\\n            }\\n        }\\n    }\\n\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (address signer) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let s := and(vs, _COMPACT_S_MASK)\\n            if lt(s, _S_BOUNDARY) {\\n                let ptr := mload(0x40)\\n\\n                mstore(ptr, hash)\\n                mstore(add(ptr, 0x20), add(27, shr(_COMPACT_V_SHIFT, vs)))\\n                mstore(add(ptr, 0x40), r)\\n                mstore(add(ptr, 0x60), s)\\n                mstore(0, 0)\\n                pop(staticcall(gas(), 0x1, ptr, 0x80, 0, 0x20))\\n                signer := mload(0)\\n            }\\n        }\\n    }\\n\\n    /// @dev WARNING!!!\\n    /// There is a known signature malleability issue with two representations of signatures!\\n    /// Even though this function is able to verify both standard 65-byte and compact 64-byte EIP-2098 signatures\\n    /// one should never use raw signatures for any kind of invalidation logic in their code.\\n    /// As the standard and compact representations are interchangeable any invalidation logic that relies on\\n    /// signature uniqueness will get rekt.\\n    /// More info: https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-4h98-2769-gh6h\\n    function recover(bytes32 hash, bytes calldata signature) internal view returns (address signer) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            // memory[ptr:ptr+0x80] = (hash, v, r, s)\\n            switch signature.length\\n            case 65 {\\n                // memory[ptr+0x20:ptr+0x80] = (v, r, s)\\n                mstore(add(ptr, 0x20), byte(0, calldataload(add(signature.offset, 0x40))))\\n                calldatacopy(add(ptr, 0x40), signature.offset, 0x40)\\n            }\\n            case 64 {\\n                // memory[ptr+0x20:ptr+0x80] = (v, r, s)\\n                let vs := calldataload(add(signature.offset, 0x20))\\n                mstore(add(ptr, 0x20), add(27, shr(_COMPACT_V_SHIFT, vs)))\\n                calldatacopy(add(ptr, 0x40), signature.offset, 0x20)\\n                mstore(add(ptr, 0x60), and(vs, _COMPACT_S_MASK))\\n            }\\n            default {\\n                ptr := 0\\n            }\\n\\n            if ptr {\\n                if lt(mload(add(ptr, 0x60)), _S_BOUNDARY) {\\n                    // memory[ptr:ptr+0x20] = (hash)\\n                    mstore(ptr, hash)\\n\\n                    mstore(0, 0)\\n                    pop(staticcall(gas(), 0x1, ptr, 0x80, 0, 0x20))\\n                    signer := mload(0)\\n                }\\n            }\\n        }\\n    }\\n\\n    function recoverOrIsValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        bytes calldata signature\\n    ) internal view returns (bool success) {\\n        if (signer == address(0)) return false;\\n        if ((signature.length == 64 || signature.length == 65) && recover(hash, signature) == signer) {\\n            return true;\\n        }\\n        return isValidSignature(signer, hash, signature);\\n    }\\n\\n    function recoverOrIsValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (bool success) {\\n        if (signer == address(0)) return false;\\n        if (recover(hash, v, r, s) == signer) {\\n            return true;\\n        }\\n        return isValidSignature(signer, hash, v, r, s);\\n    }\\n\\n    function recoverOrIsValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (bool success) {\\n        if (signer == address(0)) return false;\\n        if (recover(hash, r, vs) == signer) {\\n            return true;\\n        }\\n        return isValidSignature(signer, hash, r, vs);\\n    }\\n\\n    function recoverOrIsValidSignature65(\\n        address signer,\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (bool success) {\\n        if (signer == address(0)) return false;\\n        if (recover(hash, r, vs) == signer) {\\n            return true;\\n        }\\n        return isValidSignature65(signer, hash, r, vs);\\n    }\\n\\n    function isValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        bytes calldata signature\\n    ) internal view returns (bool success) {\\n        // (bool success, bytes memory data) = signer.staticcall(abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature));\\n        // return success && data.length >= 4 && abi.decode(data, (bytes4)) == IERC1271.isValidSignature.selector;\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), signature.length)\\n            calldatacopy(add(ptr, 0x64), signature.offset, signature.length)\\n            if staticcall(gas(), signer, ptr, add(0x64, signature.length), 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    function isValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (bool success) {\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), 65)\\n            mstore(add(ptr, 0x64), r)\\n            mstore(add(ptr, 0x84), s)\\n            mstore8(add(ptr, 0xa4), v)\\n            if staticcall(gas(), signer, ptr, 0xa5, 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    function isValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (bool success) {\\n        // (bool success, bytes memory data) = signer.staticcall(abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, abi.encodePacked(r, vs)));\\n        // return success && data.length >= 4 && abi.decode(data, (bytes4)) == IERC1271.isValidSignature.selector;\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), 64)\\n            mstore(add(ptr, 0x64), r)\\n            mstore(add(ptr, 0x84), vs)\\n            if staticcall(gas(), signer, ptr, 0xa4, 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    function isValidSignature65(\\n        address signer,\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (bool success) {\\n        // (bool success, bytes memory data) = signer.staticcall(abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, abi.encodePacked(r, vs & ~uint256(1 << 255), uint8(vs >> 255))));\\n        // return success && data.length >= 4 && abi.decode(data, (bytes4)) == IERC1271.isValidSignature.selector;\\n        bytes4 selector = IERC1271.isValidSignature.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), hash)\\n            mstore(add(ptr, 0x24), 0x40)\\n            mstore(add(ptr, 0x44), 65)\\n            mstore(add(ptr, 0x64), r)\\n            mstore(add(ptr, 0x84), and(vs, _COMPACT_S_MASK))\\n            mstore8(add(ptr, 0xa4), add(27, shr(_COMPACT_V_SHIFT, vs)))\\n            if staticcall(gas(), signer, ptr, 0xa5, 0, 0x20) {\\n                success := and(eq(selector, mload(0)), eq(returndatasize(), 0x20))\\n            }\\n        }\\n    }\\n\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 res) {\\n        // 32 is the length in bytes of hash, enforced by the type signature above\\n        // return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            mstore(0, 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000) // \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"\\n            mstore(28, hash)\\n            res := keccak256(0, 60)\\n        }\\n    }\\n\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 res) {\\n        // return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x1901000000000000000000000000000000000000000000000000000000000000) // \\\"\\\\x19\\\\x01\\\"\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            res := keccak256(ptr, 66)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd80027f75ce74daa539245dd77f4be87d0db4b3db72c459b6f326656fe87ae86\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/RevertReasonForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Revert reason forwarder.\\nlibrary RevertReasonForwarder {\\n    /// @dev Forwards latest externall call revert.\\n    function reRevert() internal pure {\\n        // bubble up revert reason from latest external call\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            revert(ptr, returndatasize())\\n        }\\n    }\\n\\n    /// @dev Returns latest external call revert reason.\\n    function reReason() internal pure returns (bytes memory reason) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            reason := mload(0x40)\\n            let length := returndatasize()\\n            mstore(reason, length)\\n            returndatacopy(add(reason, 0x20), 0, length)\\n            mstore(0x40, add(reason, add(0x20, length)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09986dc39ef02966c542275678f75c830a3e17992fba050b32a7fd8e2d210699\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\nimport \\\"../interfaces/IPermit2.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../libraries/RevertReasonForwarder.sol\\\";\\n\\n/**\\n * @title Implements efficient safe methods for ERC20 interface.\\n * @notice Compared to the standard ERC20, this implementation offers several enhancements:\\n * 1. more gas-efficient, providing significant savings in transaction costs.\\n * 2. support for different permit implementations\\n * 3. forceApprove functionality\\n * 4. support for WETH deposit and withdraw\\n */\\nlibrary SafeERC20 {\\n    error SafeTransferFailed();\\n    error SafeTransferFromFailed();\\n    error ForceApproveFailed();\\n    error SafeIncreaseAllowanceFailed();\\n    error SafeDecreaseAllowanceFailed();\\n    error SafePermitBadLength();\\n    error Permit2TransferAmountTooHigh();\\n\\n    // Uniswap Permit2 address\\n    address private constant _PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\\n    bytes4 private constant _PERMIT_LENGTH_ERROR = 0x68275857;  // SafePermitBadLength.selector\\n    uint256 private constant _RAW_CALL_GAS_LIMIT = 5000;\\n\\n    /**\\n     * @notice Fetches the balance of a specific ERC20 token held by an account.\\n     * Consumes less gas then regular `ERC20.balanceOf`.\\n     * @dev Note that the implementation does not perform dirty bits cleaning, so it is the\\n     * responsibility of the caller to make sure that the higher 96 bits of the `account` parameter are clean.\\n     * @param token The IERC20 token contract for which the balance will be fetched.\\n     * @param account The address of the account whose token balance will be fetched.\\n     * @return tokenBalance The balance of the specified ERC20 token held by the account.\\n     */\\n    function safeBalanceOf(\\n        IERC20 token,\\n        address account\\n    ) internal view returns(uint256 tokenBalance) {\\n        bytes4 selector = IERC20.balanceOf.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            mstore(0x00, selector)\\n            mstore(0x04, account)\\n            let success := staticcall(gas(), token, 0x00, 0x24, 0x00, 0x20)\\n            tokenBalance := mload(0)\\n\\n            if or(iszero(success), lt(returndatasize(), 0x20)) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens from one address to another.\\n     * @dev If permit2 is true, uses the Permit2 standard; otherwise uses the standard ERC20 transferFrom.\\n     * Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `from` and `to` parameters are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     * @param permit2 If true, uses the Permit2 standard for the transfer; otherwise uses the standard ERC20 transferFrom.\\n     */\\n    function safeTransferFromUniversal(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool permit2\\n    ) internal {\\n        if (permit2) {\\n            safeTransferFromPermit2(token, from, to, amount);\\n        } else {\\n            safeTransferFrom(token, from, to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens from one address to another using the ERC20 standard.\\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `from` and `to` parameters are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bytes4 selector = token.transferFrom.selector;\\n        bool success;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            success := call(gas(), token, 0, data, 100, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens from one address to another using the Permit2 standard.\\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `from` and `to` parameters are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function safeTransferFromPermit2(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > type(uint160).max) revert Permit2TransferAmountTooHigh();\\n        bytes4 selector = IPermit2.transferFrom.selector;\\n        bool success;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            mstore(add(data, 0x64), token)\\n            success := call(gas(), _PERMIT2, 0, data, 0x84, 0x0, 0x0)\\n            if success {\\n                success := gt(extcodesize(_PERMIT2), 0)\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens to another address.\\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `to` parameter are clean.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param value The amount of tokens to transfer.\\n     */\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.transfer.selector, to, value)) {\\n            revert SafeTransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Attempts to approve a spender to spend a certain amount of tokens.\\n     * @dev If `approve(from, to, amount)` fails, it tries to set the allowance to zero, and retries the `approve` call.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `spender` parameter are clean.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     */\\n    function forceApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.approve.selector, spender, value)) {\\n            if (\\n                !_makeCall(token, token.approve.selector, spender, 0) ||\\n                !_makeCall(token, token.approve.selector, spender, value)\\n            ) {\\n                revert ForceApproveFailed();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely increases the allowance of a spender.\\n     * @dev Increases with safe math check. Checks if the increased allowance will overflow, if yes, then it reverts the transaction.\\n     * Then uses `forceApprove` to increase the allowance.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `spender` parameter are clean.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to increase the allowance by.\\n     */\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > type(uint256).max - allowance) revert SafeIncreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance + value);\\n    }\\n\\n    /**\\n     * @notice Safely decreases the allowance of a spender.\\n     * @dev Decreases with safe math check. Checks if the decreased allowance will underflow, if yes, then it reverts the transaction.\\n     * Then uses `forceApprove` to increase the allowance.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `spender` parameter are clean.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to decrease the allowance by.\\n     */\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > allowance) revert SafeDecreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance - value);\\n    }\\n\\n    /**\\n     * @notice Attempts to execute the `permit` function on the provided token with the sender and contract as parameters.\\n     * Permit type is determined automatically based on permit calldata (IERC20Permit, IDaiLikePermit, and IPermit2).\\n     * @dev Wraps `tryPermit` function and forwards revert reason if permit fails.\\n     * @param token The IERC20 token to execute the permit function on.\\n     * @param permit The permit data to be used in the function call.\\n     */\\n    function safePermit(IERC20 token, bytes calldata permit) internal {\\n        if (!tryPermit(token, msg.sender, address(this), permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    /**\\n     * @notice Attempts to execute the `permit` function on the provided token with custom owner and spender parameters.\\n     * Permit type is determined automatically based on permit calldata (IERC20Permit, IDaiLikePermit, and IPermit2).\\n     * @dev Wraps `tryPermit` function and forwards revert reason if permit fails.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `owner` and `spender` parameters are clean.\\n     * @param token The IERC20 token to execute the permit function on.\\n     * @param owner The owner of the tokens for which the permit is made.\\n     * @param spender The spender allowed to spend the tokens by the permit.\\n     * @param permit The permit data to be used in the function call.\\n     */\\n    function safePermit(IERC20 token, address owner, address spender, bytes calldata permit) internal {\\n        if (!tryPermit(token, owner, spender, permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    /**\\n     * @notice Attempts to execute the `permit` function on the provided token with the sender and contract as parameters.\\n     * @dev Invokes `tryPermit` with sender as owner and contract as spender.\\n     * @param token The IERC20 token to execute the permit function on.\\n     * @param permit The permit data to be used in the function call.\\n     * @return success Returns true if the permit function was successfully executed, false otherwise.\\n     */\\n    function tryPermit(IERC20 token, bytes calldata permit) internal returns(bool success) {\\n        return tryPermit(token, msg.sender, address(this), permit);\\n    }\\n\\n    /**\\n     * @notice The function attempts to call the permit function on a given ERC20 token.\\n     * @dev The function is designed to support a variety of permit functions, namely: IERC20Permit, IDaiLikePermit, and IPermit2.\\n     * It accommodates both Compact and Full formats of these permit types.\\n     * Please note, it is expected that the `expiration` parameter for the compact Permit2 and the `deadline` parameter\\n     * for the compact Permit are to be incremented by one before invoking this function. This approach is motivated by\\n     * gas efficiency considerations; as the unlimited expiration period is likely to be the most common scenario, and\\n     * zeros are cheaper to pass in terms of gas cost. Thus, callers should increment the expiration or deadline by one\\n     * before invocation for optimized performance.\\n     * Note that the implementation does not perform dirty bits cleaning, so it is the responsibility of\\n     * the caller to make sure that the higher 96 bits of the `owner` and `spender` parameters are clean.\\n     * @param token The address of the ERC20 token on which to call the permit function.\\n     * @param owner The owner of the tokens. This address should have signed the off-chain permit.\\n     * @param spender The address which will be approved for transfer of tokens.\\n     * @param permit The off-chain permit data, containing different fields depending on the type of permit function.\\n     * @return success A boolean indicating whether the permit call was successful.\\n     */\\n    function tryPermit(IERC20 token, address owner, address spender, bytes calldata permit) internal returns(bool success) {\\n        // load function selectors for different permit standards\\n        bytes4 permitSelector = IERC20Permit.permit.selector;\\n        bytes4 daiPermitSelector = IDaiLikePermit.permit.selector;\\n        bytes4 permit2Selector = IPermit2.permit.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            // Switch case for different permit lengths, indicating different permit standards\\n            switch permit.length\\n            // Compact IERC20Permit\\n            case 100 {\\n                mstore(ptr, permitSelector)     // store selector\\n                mstore(add(ptr, 0x04), owner)   // store owner\\n                mstore(add(ptr, 0x24), spender) // store spender\\n\\n                // Compact IERC20Permit.permit(uint256 value, uint32 deadline, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let deadline := shr(224, calldataload(add(permit.offset, 0x20))) // loads permit.offset 0x20..0x23\\n                    let vs := calldataload(add(permit.offset, 0x44))                 // loads permit.offset 0x44..0x63\\n\\n                    calldatacopy(add(ptr, 0x44), permit.offset, 0x20)            // store value     = copy permit.offset 0x00..0x19\\n                    mstore(add(ptr, 0x64), sub(deadline, 1))                     // store deadline  = deadline - 1\\n                    mstore(add(ptr, 0x84), add(27, shr(255, vs)))                // store v         = most significant bit of vs + 27 (27 or 28)\\n                    calldatacopy(add(ptr, 0xa4), add(permit.offset, 0x24), 0x20) // store r         = copy permit.offset 0x24..0x43\\n                    mstore(add(ptr, 0xc4), shr(1, shl(1, vs)))                   // store s         = vs without most significant bit\\n                }\\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            // Compact IDaiLikePermit\\n            case 72 {\\n                mstore(ptr, daiPermitSelector)  // store selector\\n                mstore(add(ptr, 0x04), owner)   // store owner\\n                mstore(add(ptr, 0x24), spender) // store spender\\n\\n                // Compact IDaiLikePermit.permit(uint32 nonce, uint32 expiry, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let expiry := shr(224, calldataload(add(permit.offset, 0x04))) // loads permit.offset 0x04..0x07\\n                    let vs := calldataload(add(permit.offset, 0x28))               // loads permit.offset 0x28..0x47\\n\\n                    mstore(add(ptr, 0x44), shr(224, calldataload(permit.offset))) // store nonce   = copy permit.offset 0x00..0x03\\n                    mstore(add(ptr, 0x64), sub(expiry, 1))                        // store expiry  = expiry - 1\\n                    mstore(add(ptr, 0x84), true)                                  // store allowed = true\\n                    mstore(add(ptr, 0xa4), add(27, shr(255, vs)))                 // store v       = most significant bit of vs + 27 (27 or 28)\\n                    calldatacopy(add(ptr, 0xc4), add(permit.offset, 0x08), 0x20)  // store r       = copy permit.offset 0x08..0x27\\n                    mstore(add(ptr, 0xe4), shr(1, shl(1, vs)))                    // store s       = vs without most significant bit\\n                }\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            // IERC20Permit\\n            case 224 {\\n                mstore(ptr, permitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            // IDaiLikePermit\\n            case 256 {\\n                mstore(ptr, daiPermitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            // Compact IPermit2\\n            case 96 {\\n                // Compact IPermit2.permit(uint160 amount, uint32 expiration, uint32 nonce, uint32 sigDeadline, uint256 r, uint256 vs)\\n                mstore(ptr, permit2Selector)  // store selector\\n                mstore(add(ptr, 0x04), owner) // store owner\\n                mstore(add(ptr, 0x24), token) // store token\\n\\n                calldatacopy(add(ptr, 0x50), permit.offset, 0x14)             // store amount = copy permit.offset 0x00..0x13\\n                // and(0xffffffffffff, ...) - conversion to uint48\\n                mstore(add(ptr, 0x64), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x14))), 1))) // store expiration = ((permit.offset 0x14..0x17 - 1) & 0xffffffffffff)\\n                mstore(add(ptr, 0x84), shr(224, calldataload(add(permit.offset, 0x18)))) // store nonce = copy permit.offset 0x18..0x1b\\n                mstore(add(ptr, 0xa4), spender)                               // store spender\\n                // and(0xffffffffffff, ...) - conversion to uint48\\n                mstore(add(ptr, 0xc4), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x1c))), 1))) // store sigDeadline = ((permit.offset 0x1c..0x1f - 1) & 0xffffffffffff)\\n                mstore(add(ptr, 0xe4), 0x100)                                 // store offset = 256\\n                mstore(add(ptr, 0x104), 0x40)                                 // store length = 64\\n                calldatacopy(add(ptr, 0x124), add(permit.offset, 0x20), 0x20) // store r      = copy permit.offset 0x20..0x3f\\n                calldatacopy(add(ptr, 0x144), add(permit.offset, 0x40), 0x20) // store vs     = copy permit.offset 0x40..0x5f\\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\\n                success := call(gas(), _PERMIT2, 0, ptr, 0x164, 0, 0)\\n            }\\n            // IPermit2\\n            case 352 {\\n                mstore(ptr, permit2Selector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\\n                success := call(gas(), _PERMIT2, 0, ptr, 0x164, 0, 0)\\n            }\\n            // Unknown\\n            default {\\n                mstore(ptr, _PERMIT_LENGTH_ERROR)\\n                revert(ptr, 4)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Executes a low level call to a token contract, making it resistant to reversion and erroneous boolean returns.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param selector The function signature that is to be called on the token contract.\\n     * @param to The address to which the token amount will be transferred.\\n     * @param amount The token amount to be transferred.\\n     * @return success A boolean indicating if the call was successful. Returns 'true' on success and 'false' on failure.\\n     * In case of success but no returned data, validates that the contract code exists.\\n     * In case of returned data, ensures that it's a boolean `true`.\\n     */\\n    function _makeCall(\\n        IERC20 token,\\n        bytes4 selector,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool success) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), to)\\n            mstore(add(data, 0x24), amount)\\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely deposits a specified amount of Ether into the IWETH contract. Consumes less gas then regular `IWETH.deposit`.\\n     * @param weth The IWETH token contract.\\n     * @param amount The amount of Ether to deposit into the IWETH contract.\\n     */\\n    function safeDeposit(IWETH weth, uint256 amount) internal {\\n        if (amount > 0) {\\n            bytes4 selector = IWETH.deposit.selector;\\n            assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n                mstore(0, selector)\\n                if iszero(call(gas(), weth, amount, 0, 4, 0, 0)) {\\n                    let ptr := mload(0x40)\\n                    returndatacopy(ptr, 0, returndatasize())\\n                    revert(ptr, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely withdraws a specified amount of wrapped Ether from the IWETH contract. Consumes less gas then regular `IWETH.withdraw`.\\n     * @dev Uses inline assembly to interact with the IWETH contract.\\n     * @param weth The IWETH token contract.\\n     * @param amount The amount of wrapped Ether to withdraw from the IWETH contract.\\n     */\\n    function safeWithdraw(IWETH weth, uint256 amount) internal {\\n        bytes4 selector = IWETH.withdraw.selector;\\n        assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n            mstore(0, selector)\\n            mstore(4, amount)\\n            if iszero(call(gas(), weth, 0, 0, 0x24, 0, 0)) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely withdraws a specified amount of wrapped Ether from the IWETH contract to a specified recipient.\\n     * Consumes less gas then regular `IWETH.withdraw`.\\n     * @param weth The IWETH token contract.\\n     * @param amount The amount of wrapped Ether to withdraw from the IWETH contract.\\n     * @param to The recipient of the withdrawn Ether.\\n     */\\n    function safeWithdrawTo(IWETH weth, uint256 amount, address to) internal {\\n        safeWithdraw(weth, amount);\\n        if (to != address(this)) {\\n            assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n                if iszero(call(_RAW_CALL_GAS_LIMIT, to, amount, 0, 0, 0, 0)) {\\n                    let ptr := mload(0x40)\\n                    returndatacopy(ptr, 0, returndatasize())\\n                    revert(ptr, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f1f5a6cc86c27c64a5e18ff33a683df22b5ab00b9a409f9b1fc13b32462d1b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x85a45f3f10014a0f8be41157a32b6a5f905753ea64a4b64e29fc12b7deeecf39\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"contracts/LeftoverExchanger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\\\";\\nimport \\\"@1inch/solidity-utils/contracts/libraries/ECDSA.sol\\\";\\n\\n/* solhint-disable avoid-low-level-calls */\\n\\ncontract LeftoverExchanger is IERC1271 {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IWETH;\\n\\n    struct Call {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    event CallFailure(uint256 i, bytes result);\\n\\n    error OnlyOwner(address owner);\\n    error CallFailed(uint256 i, bytes result);\\n    error InvalidLength();\\n    error EstimationResults(bool[] statuses, bytes[] results);\\n    error NotEnoughProfit();\\n    error LengthMismatch();\\n\\n    address private immutable _OWNER;\\n    IWETH internal immutable _WETH;\\n\\n    constructor(IWETH weth, address owner) {\\n        _WETH = weth;\\n        _OWNER = owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        if(msg.sender != _OWNER) revert OnlyOwner(_OWNER);\\n        _;\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    // TODO: deprecated\\n    function estimateMakeCalls(Call[] calldata calls) external payable onlyOwner {\\n        unchecked {\\n            bool[] memory statuses = new bool[](calls.length);\\n            bytes[] memory results = new bytes[](calls.length);\\n            for (uint256 i = 0; i < calls.length; i++) {\\n                (statuses[i], results[i]) = calls[i].to.call{value : calls[i].value}(calls[i].data);\\n            }\\n            revert EstimationResults(statuses, results);\\n        }\\n    }\\n\\n    // TODO: deprecated\\n    function makeCallsNoThrow(Call[] calldata calls) external payable onlyOwner {\\n        unchecked {\\n            for (uint256 i = 0; i < calls.length; i++) {\\n                (bool ok, bytes memory result) = calls[i].to.call{value : calls[i].value}(calls[i].data);\\n                if (!ok) emit CallFailure(i, result);\\n            }\\n        }\\n    }\\n\\n    // TODO: deprecated\\n    function makeCalls(Call[] calldata calls) public payable onlyOwner {\\n        unchecked {\\n            for (uint256 i = 0; i < calls.length; i++) {\\n                (bool ok, bytes memory result) = calls[i].to.call{value : calls[i].value}(calls[i].data);\\n                if (!ok) revert CallFailed(i, result);\\n            }\\n        }\\n    }\\n\\n    // TODO: deprecated\\n    function makeCallsWithEthCheck(Call[] calldata calls, uint256 minReturn) external payable {\\n        uint256 balanceBefore = msg.sender.balance;\\n        makeCalls(calls);\\n        if (msg.sender.balance - balanceBefore < minReturn) revert NotEnoughProfit();\\n    }\\n\\n    function arbitraryCalls(address[] calldata targets, bytes[] calldata arguments) public onlyOwner {\\n        unchecked {\\n            uint256 length = targets.length;\\n            if (targets.length != arguments.length) revert LengthMismatch();\\n            for (uint256 i = 0; i < length; ++i) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (bool success,) = targets[i].call(arguments[i]);\\n                if (!success) RevertReasonForwarder.reRevert();\\n            }\\n        }\\n    }\\n\\n    function arbitraryCallsWithEthCheck(address[] calldata targets, bytes[] calldata arguments, uint256 minReturn) external {\\n        uint256 balanceBefore = msg.sender.balance;\\n        arbitraryCalls(targets, arguments);\\n        if (msg.sender.balance - balanceBefore < minReturn) revert NotEnoughProfit();\\n    }\\n\\n    function arbitraryCallsWithTokenCheck(address[] calldata targets, bytes[] calldata arguments, IERC20 token, uint256 minReturn) external {\\n        uint256 balanceBefore = token.balanceOf(msg.sender);\\n        arbitraryCalls(targets, arguments);\\n        if (token.balanceOf(msg.sender) - balanceBefore < minReturn) revert NotEnoughProfit();\\n    }\\n\\n    function estimateArbitraryCalls(address[] calldata targets, bytes[] calldata arguments) external onlyOwner {\\n        unchecked {\\n            bool[] memory statuses = new bool[](targets.length);\\n            bytes[] memory results = new bytes[](targets.length);\\n            for (uint256 i = 0; i < targets.length; i++) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (statuses[i], results[i]) = targets[i].call(arguments[i]);\\n            }\\n            revert EstimationResults(statuses, results);\\n        }\\n    }\\n\\n    function approve(IERC20 token, address to) external onlyOwner {\\n        token.forceApprove(to, type(uint256).max);\\n    }\\n\\n    function transfer(IERC20 token, address to, uint256 amount) external onlyOwner {\\n        token.safeTransfer(to, amount);\\n    }\\n\\n    function batchApprove(bytes calldata data) external onlyOwner {\\n        unchecked {\\n            uint256 length = data.length;\\n            if (length % 40 != 0) revert InvalidLength();\\n            for (uint256 i = 0; i < length; i += 40) {\\n                IERC20(address(bytes20(data[i:i+20]))).forceApprove(address(bytes20(data[i+20:i+40])), type(uint256).max);\\n            }\\n        }\\n    }\\n\\n    function batchTransfer(bytes calldata data) external onlyOwner {\\n        unchecked {\\n            uint256 length = data.length;\\n            if (length % 72 != 0) revert InvalidLength();\\n            for (uint256 i = 0; i < length; i += 72) {\\n                IERC20 token = IERC20(address(bytes20(data[i:i+20])));\\n                address target = address(bytes20(data[i+20:i+40]));\\n                uint256 amount = uint256(bytes32(data[i+40:i+72]));\\n                token.safeTransfer(target, amount);\\n            }\\n        }\\n    }\\n\\n    function unwrapTo(address payable receiver, uint256 amount) external onlyOwner {\\n        _WETH.safeWithdrawTo(amount, receiver);\\n    }\\n\\n    function rescueEther() external onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bytes4 magicValue) {\\n        if (ECDSA.recover(hash, signature) == _OWNER) magicValue = this.isValidSignature.selector;\\n    }\\n}\\n\\n/* solhint-enable avoid-low-level-calls */\\n\",\"keccak256\":\"0x9625a3e44156b83e2dec0b62af398cf630ea418bac056284116bda14bd535b63\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0346100e757601f611cf738819003918201601f19168301916001600160401b038311848410176100ec5780849260409485528339810103126100e75780516001600160a01b039182821682036100e7576020015191821682036100e75760a052608052604051611bf4908161010382396080518181816101260152818161026f0152818161030601528181610478015281816105eb01528181610685015281816107f20152818161097e01528181610b7e01528181610d8901528181610f0101528181610ff001528181611093015281816111de0152611367015260a0518161017f0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040818152600480361015610021575b505050361561001f57600080fd5b005b600092833560e01c90816310a890af146112fa575080631626ba7e1461114a5780631f3177ba1461106857806320969d0714610faa578063343590a414610e9a57806336669a3214610d235780633a9d666f14610aa65780633d006abd146108fc578063473aaada1461078c578063785620281461061d5780637e5465ba14610592578063ba80b51e14610412578063bdbb216a146102da578063beabacc8146102145763c12ea3ca03610011573461021057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102105780359073ffffffffffffffffffffffffffffffffffffffff9081831680930361020c57602435917f0000000000000000000000000000000000000000000000000000000000000000168033036101dd575090808593927f2e1a7d4d000000000000000000000000000000000000000000000000000000008552528280602481807f00000000000000000000000000000000000000000000000000000000000000005af1156101d0573082036101b0578280f35b828092918192611388f1156101c6578181808280f35b51903d90823e3d90fd5b50505051903d90823e3d90fd5b602492508451917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b8480fd5b8280fd5b508290346102d65760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d65761024e61152d565b90610257611550565b9073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168033036102a757846102a460443585876119db565b80f35b602492508551917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b5080fd5b50823461040f576102ea366114c4565b959291939073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168033036103e0575061033785611857565b96610341866118a6565b95835b8181106103825786517f9cb0e09d0000000000000000000000000000000000000000000000000000000081528061037e8a8d838e01611921565b0390fd5b80858061039a610395600195878c6115cf565b61160e565b8a826103a7868a8c611680565b8093519384928337810182815203925af16103c0611707565b6103ca838c61190d565b526103d5828d61190d565b901515905201610344565b866024918651917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b80fd5b508260209260207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d657823567ffffffffffffffff81116102105761045f9036908501611493565b909273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001680330361056357506104a982611857565b956104b3836118a6565b94825b8481106104f05785517f9cb0e09d0000000000000000000000000000000000000000000000000000000081528061037e898c838d01611921565b8084806105036103956001958a886117a1565b8661050f858b896117a1565b013561052861051f868c8a6117a1565b8c81019061162f565b9190828d519384928337810185815203925af1610543611707565b61054d838b61190d565b52610558828c61190d565b9015159052016104b6565b856024918551917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b508290346102d657827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d6576105cb61152d565b6105d3611550565b9173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168033036102a757846102a48585611a75565b50829060209060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021057803567ffffffffffffffff81116107885761066b9036908301611493565b94909273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168033036107595750845b8681106106ba578580f35b85806106ca610395848b8a6117a1565b846106d6858c8b6117a1565b01356106ef6106e6868d8c6117a1565b8881019061162f565b91908289519384928337810185815203925af161070a611707565b901561071957506001016106af565b61037e85918580519485947f5c0dee5d000000000000000000000000000000000000000000000000000000008652850152602484015260448301906117e1565b836024918451917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b8380fd5b509060209060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261078857823567ffffffffffffffff811161020c576107d99036908501611493565b909373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168033036108cd575050845b818110610828578580f35b80868061083b610395600195878b6117a1565b8761084785888c6117a1565b013561086061085786898d6117a1565b8981019061162f565b9190828a519384928337810185815203925af161087b611707565b9015610889575b500161081d565b6108c47f446c70d2c3a7ef80e3641bc32468f1f1432635c1425f71d0033aaa78a59cea67918651918291858352888a840152888301906117e1565b0390a138610882565b602492508351917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b5090346102105760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102105767ffffffffffffffff823581811161020c5761094c9036908501611493565b91602435908111610aa2576109649036908601611493565b33319373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016803303610a735750818103610a4b5790879291835b8181106109fd575050505050506109ce604435913331611765565b106109d7578280f35b517f3b5c3088000000000000000000000000000000000000000000000000000000008152fd5b8480610a0d61039584868b6115cf565b8a82610a1a86898b611680565b8093519384928337810182815203925af1610a33611707565b5015610a41576001016109b3565b87513d86823e3d90fd5b8686517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b876024918851917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b8580fd5b5090346102105760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102105767ffffffffffffffff823581811161020c57610af69036908501611493565b91602435908111610aa257610b0e9036908601611493565b9190926044359173ffffffffffffffffffffffffffffffffffffffff94858416809403610d1f578651947f70a082310000000000000000000000000000000000000000000000000000000093848752338a88015260209788886024818a5afa978815610d15578c98610ce2575b507f000000000000000000000000000000000000000000000000000000000000000016803303610cb35750818103610c8b57918a9188959493835b818110610c2d5750505050505060248651809481938252338a8301525afa928315610c23578693610bf1575b50506109ce9060643592611765565b9080929350813d8311610c1c575b610c098183611697565b8101031261020c5751906109ce38610be2565b503d610bff565b84513d88823e3d90fd5b909192938596975080610c456103958486849a6115cf565b8d82610c5286898b611680565b8093519384928337810182815203925af1610c6b611707565b5015610c81576001019089969594939291610bb6565b8a513d86823e3d90fd5b8989517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b8a6024918b51917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b9097508881813d8311610d0e575b610cfa8183611697565b81010312610d0a57519638610b7b565b8b80fd5b503d610cf0565b8a513d8e823e3d90fd5b8880fd5b5090807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021057813567ffffffffffffffff811161078857610d6c9036908401611493565b90602433319273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016803303610e6b5750865b818110610dcc57505050506109ce602435913331611765565b8780610ddc6103958486896117a1565b6020610de985878a6117a1565b0135610e02610df986888b6117a1565b8b81019061162f565b9190828c519384928337810185815203925af1610e1d611707565b9015610e2c5750600101610db3565b61037e8891888681519586957f5c0dee5d00000000000000000000000000000000000000000000000000000000875286015284015260448301906117e1565b866024918751917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b50346102105760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021057803567ffffffffffffffff811161078857610ee89036908301611460565b909173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168033036101dd575060289360288306610f84575050835b818110610f43578480f35b80610f7e6014869301610f61610f5b8285888a611573565b9061158b565b610f75610f5b60609387870190898b611573565b821c911c611a75565b01610f38565b517f947d5a84000000000000000000000000000000000000000000000000000000008152fd5b503461021057827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102105773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001680330361103b5750508180808047818115611032575b3390f1156101c6575080f35b506108fc611026565b60249251917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b50903461021057611078366114c4565b9091929473ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168033036102a75750818403611123575090859291835b8381106110d4578480f35b84806110e461039584888c6115cf565b816110f0858789611680565b9190828c519384928337810182815203925af161110b611707565b5015611119576001016110c9565b85513d86823e3d90fd5b84517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b50903461021057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102105760243567ffffffffffffffff8111610788579261119c60209436908501611460565b8291929482938551928387826041146112e35750506040146112a05750829150815b611257575b50505073ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001691161461122f575b7fffffffff00000000000000000000000000000000000000000000000000000000905191168152f35b7f1626ba7e000000000000000000000000000000000000000000000000000000009150611206565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1606083015110156111c35782935086929160809135815282805260015afa50513880806111c3565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81898086940135918260ff1c601b0182860152898501371660608201526111be565b8092508391930135861a8a840152818301376111be565b919050346107885760209060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020c57803567ffffffffffffffff8111610aa25761134d9036908301611460565b91909373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001680330361143557505060489460488306610f84575050845b8181106113aa578580f35b806113fd6014879301846113c3610f5b8386848c611573565b6113ea6113dc610f5b8b60609660288a01968792611573565b841c9287870190898c611573565b93903593898110611403575b501c6119db565b0161139f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908a0360031b1b90931692386113f6565b6024927f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b9181601f8401121561148e5782359167ffffffffffffffff831161148e576020838186019501011161148e57565b600080fd5b9181601f8401121561148e5782359167ffffffffffffffff831161148e576020808501948460051b01011161148e57565b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82011261148e5767ffffffffffffffff9160043583811161148e578261150f91600401611493565b9390939260243591821161148e5761152991600401611493565b9091565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361148e57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361148e57565b9093929384831161148e57841161148e578101920390565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000090358181169392601481106115c057505050565b60140360031b82901b16169150565b91908110156115df5760051b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b3573ffffffffffffffffffffffffffffffffffffffff8116810361148e5790565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561148e570180359067ffffffffffffffff821161148e5760200191813603831361148e57565b908210156115df576115299160051b81019061162f565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176116d857604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b3d15611760573d9067ffffffffffffffff82116116d8576040519161175460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184611697565b82523d6000602084013e565b606090565b9190820391821161177257565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b91908110156115df5760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18136030182121561148e570190565b919082519283825260005b84811061182b5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b6020818301810151848301820152016117ec565b67ffffffffffffffff81116116d85760051b60200190565b906118618261183f565b61186e6040519182611697565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061189c829461183f565b0190602036910137565b906118b08261183f565b6118bd6040519182611697565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06118eb829461183f565b019060005b8281106118fc57505050565b8060606020809385010152016118f0565b80518210156115df5760209160051b010190565b906040820191604081528151809352606081019260208093019060005b8181106119c557505050818184039101528251908183528083019281808460051b8301019501936000915b8483106119795750505050505090565b90919293949584806119b5837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086600196030187528a516117e1565b9801930193019194939290611969565b825115158652948401949184019160010161193e565b916044602092600092604051917fa9059cbb0000000000000000000000000000000000000000000000000000000083526004830152602482015282855af19081611a52575b5015611a2857565b60046040517ffb7f5079000000000000000000000000000000000000000000000000000000008152fd5b90503d15611a6d5750600160005114601f3d11165b38611a20565b3b1515611a67565b90611a808183611b38565b15611a89575050565b6020600060446040517f095ea7b300000000000000000000000000000000000000000000000000000000815284600482015282602482015282865af180611b18575b15918215611b06575b5050611adc57565b60046040517f19be9a90000000000000000000000000000000000000000000000000000000008152fd5b611b109250611b38565b153880611ad4565b503d15611b2f57600160005114601f3d1116611acb565b813b1515611acb565b919060006044602092604051907f095ea7b300000000000000000000000000000000000000000000000000000000825260048201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602482015282865af19182611ba05750565b9091503d15611bb85750600160005114601f3d111690565b3b15159056fea2646970667358221220d6dbd097ccfe621ec2523dc7219a11ac51241d4a656f621a42854db58b6f589564736f6c63430008170033",
  "deployedBytecode": "0x60806040818152600480361015610021575b505050361561001f57600080fd5b005b600092833560e01c90816310a890af146112fa575080631626ba7e1461114a5780631f3177ba1461106857806320969d0714610faa578063343590a414610e9a57806336669a3214610d235780633a9d666f14610aa65780633d006abd146108fc578063473aaada1461078c578063785620281461061d5780637e5465ba14610592578063ba80b51e14610412578063bdbb216a146102da578063beabacc8146102145763c12ea3ca03610011573461021057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102105780359073ffffffffffffffffffffffffffffffffffffffff9081831680930361020c57602435917f0000000000000000000000000000000000000000000000000000000000000000168033036101dd575090808593927f2e1a7d4d000000000000000000000000000000000000000000000000000000008552528280602481807f00000000000000000000000000000000000000000000000000000000000000005af1156101d0573082036101b0578280f35b828092918192611388f1156101c6578181808280f35b51903d90823e3d90fd5b50505051903d90823e3d90fd5b602492508451917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b8480fd5b8280fd5b508290346102d65760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d65761024e61152d565b90610257611550565b9073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168033036102a757846102a460443585876119db565b80f35b602492508551917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b5080fd5b50823461040f576102ea366114c4565b959291939073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168033036103e0575061033785611857565b96610341866118a6565b95835b8181106103825786517f9cb0e09d0000000000000000000000000000000000000000000000000000000081528061037e8a8d838e01611921565b0390fd5b80858061039a610395600195878c6115cf565b61160e565b8a826103a7868a8c611680565b8093519384928337810182815203925af16103c0611707565b6103ca838c61190d565b526103d5828d61190d565b901515905201610344565b866024918651917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b80fd5b508260209260207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d657823567ffffffffffffffff81116102105761045f9036908501611493565b909273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001680330361056357506104a982611857565b956104b3836118a6565b94825b8481106104f05785517f9cb0e09d0000000000000000000000000000000000000000000000000000000081528061037e898c838d01611921565b8084806105036103956001958a886117a1565b8661050f858b896117a1565b013561052861051f868c8a6117a1565b8c81019061162f565b9190828d519384928337810185815203925af1610543611707565b61054d838b61190d565b52610558828c61190d565b9015159052016104b6565b856024918551917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b508290346102d657827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d6576105cb61152d565b6105d3611550565b9173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168033036102a757846102a48585611a75565b50829060209060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021057803567ffffffffffffffff81116107885761066b9036908301611493565b94909273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168033036107595750845b8681106106ba578580f35b85806106ca610395848b8a6117a1565b846106d6858c8b6117a1565b01356106ef6106e6868d8c6117a1565b8881019061162f565b91908289519384928337810185815203925af161070a611707565b901561071957506001016106af565b61037e85918580519485947f5c0dee5d000000000000000000000000000000000000000000000000000000008652850152602484015260448301906117e1565b836024918451917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b8380fd5b509060209060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261078857823567ffffffffffffffff811161020c576107d99036908501611493565b909373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168033036108cd575050845b818110610828578580f35b80868061083b610395600195878b6117a1565b8761084785888c6117a1565b013561086061085786898d6117a1565b8981019061162f565b9190828a519384928337810185815203925af161087b611707565b9015610889575b500161081d565b6108c47f446c70d2c3a7ef80e3641bc32468f1f1432635c1425f71d0033aaa78a59cea67918651918291858352888a840152888301906117e1565b0390a138610882565b602492508351917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b5090346102105760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102105767ffffffffffffffff823581811161020c5761094c9036908501611493565b91602435908111610aa2576109649036908601611493565b33319373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016803303610a735750818103610a4b5790879291835b8181106109fd575050505050506109ce604435913331611765565b106109d7578280f35b517f3b5c3088000000000000000000000000000000000000000000000000000000008152fd5b8480610a0d61039584868b6115cf565b8a82610a1a86898b611680565b8093519384928337810182815203925af1610a33611707565b5015610a41576001016109b3565b87513d86823e3d90fd5b8686517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b876024918851917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b8580fd5b5090346102105760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102105767ffffffffffffffff823581811161020c57610af69036908501611493565b91602435908111610aa257610b0e9036908601611493565b9190926044359173ffffffffffffffffffffffffffffffffffffffff94858416809403610d1f578651947f70a082310000000000000000000000000000000000000000000000000000000093848752338a88015260209788886024818a5afa978815610d15578c98610ce2575b507f000000000000000000000000000000000000000000000000000000000000000016803303610cb35750818103610c8b57918a9188959493835b818110610c2d5750505050505060248651809481938252338a8301525afa928315610c23578693610bf1575b50506109ce9060643592611765565b9080929350813d8311610c1c575b610c098183611697565b8101031261020c5751906109ce38610be2565b503d610bff565b84513d88823e3d90fd5b909192938596975080610c456103958486849a6115cf565b8d82610c5286898b611680565b8093519384928337810182815203925af1610c6b611707565b5015610c81576001019089969594939291610bb6565b8a513d86823e3d90fd5b8989517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b8a6024918b51917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b9097508881813d8311610d0e575b610cfa8183611697565b81010312610d0a57519638610b7b565b8b80fd5b503d610cf0565b8a513d8e823e3d90fd5b8880fd5b5090807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021057813567ffffffffffffffff811161078857610d6c9036908401611493565b90602433319273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016803303610e6b5750865b818110610dcc57505050506109ce602435913331611765565b8780610ddc6103958486896117a1565b6020610de985878a6117a1565b0135610e02610df986888b6117a1565b8b81019061162f565b9190828c519384928337810185815203925af1610e1d611707565b9015610e2c5750600101610db3565b61037e8891888681519586957f5c0dee5d00000000000000000000000000000000000000000000000000000000875286015284015260448301906117e1565b866024918751917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b50346102105760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021057803567ffffffffffffffff811161078857610ee89036908301611460565b909173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168033036101dd575060289360288306610f84575050835b818110610f43578480f35b80610f7e6014869301610f61610f5b8285888a611573565b9061158b565b610f75610f5b60609387870190898b611573565b821c911c611a75565b01610f38565b517f947d5a84000000000000000000000000000000000000000000000000000000008152fd5b503461021057827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102105773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001680330361103b5750508180808047818115611032575b3390f1156101c6575080f35b506108fc611026565b60249251917f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b50903461021057611078366114c4565b9091929473ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168033036102a75750818403611123575090859291835b8381106110d4578480f35b84806110e461039584888c6115cf565b816110f0858789611680565b9190828c519384928337810182815203925af161110b611707565b5015611119576001016110c9565b85513d86823e3d90fd5b84517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b50903461021057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102105760243567ffffffffffffffff8111610788579261119c60209436908501611460565b8291929482938551928387826041146112e35750506040146112a05750829150815b611257575b50505073ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001691161461122f575b7fffffffff00000000000000000000000000000000000000000000000000000000905191168152f35b7f1626ba7e000000000000000000000000000000000000000000000000000000009150611206565b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1606083015110156111c35782935086929160809135815282805260015afa50513880806111c3565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81898086940135918260ff1c601b0182860152898501371660608201526111be565b8092508391930135861a8a840152818301376111be565b919050346107885760209060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020c57803567ffffffffffffffff8111610aa25761134d9036908301611460565b91909373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001680330361143557505060489460488306610f84575050845b8181106113aa578580f35b806113fd6014879301846113c3610f5b8386848c611573565b6113ea6113dc610f5b8b60609660288a01968792611573565b841c9287870190898c611573565b93903593898110611403575b501c6119db565b0161139f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908a0360031b1b90931692386113f6565b6024927f0a86c02a000000000000000000000000000000000000000000000000000000008352820152fd5b9181601f8401121561148e5782359167ffffffffffffffff831161148e576020838186019501011161148e57565b600080fd5b9181601f8401121561148e5782359167ffffffffffffffff831161148e576020808501948460051b01011161148e57565b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82011261148e5767ffffffffffffffff9160043583811161148e578261150f91600401611493565b9390939260243591821161148e5761152991600401611493565b9091565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361148e57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361148e57565b9093929384831161148e57841161148e578101920390565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000090358181169392601481106115c057505050565b60140360031b82901b16169150565b91908110156115df5760051b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b3573ffffffffffffffffffffffffffffffffffffffff8116810361148e5790565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561148e570180359067ffffffffffffffff821161148e5760200191813603831361148e57565b908210156115df576115299160051b81019061162f565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176116d857604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b3d15611760573d9067ffffffffffffffff82116116d8576040519161175460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184611697565b82523d6000602084013e565b606090565b9190820391821161177257565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b91908110156115df5760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18136030182121561148e570190565b919082519283825260005b84811061182b5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b6020818301810151848301820152016117ec565b67ffffffffffffffff81116116d85760051b60200190565b906118618261183f565b61186e6040519182611697565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061189c829461183f565b0190602036910137565b906118b08261183f565b6118bd6040519182611697565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06118eb829461183f565b019060005b8281106118fc57505050565b8060606020809385010152016118f0565b80518210156115df5760209160051b010190565b906040820191604081528151809352606081019260208093019060005b8181106119c557505050818184039101528251908183528083019281808460051b8301019501936000915b8483106119795750505050505090565b90919293949584806119b5837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086600196030187528a516117e1565b9801930193019194939290611969565b825115158652948401949184019160010161193e565b916044602092600092604051917fa9059cbb0000000000000000000000000000000000000000000000000000000083526004830152602482015282855af19081611a52575b5015611a2857565b60046040517ffb7f5079000000000000000000000000000000000000000000000000000000008152fd5b90503d15611a6d5750600160005114601f3d11165b38611a20565b3b1515611a67565b90611a808183611b38565b15611a89575050565b6020600060446040517f095ea7b300000000000000000000000000000000000000000000000000000000815284600482015282602482015282865af180611b18575b15918215611b06575b5050611adc57565b60046040517f19be9a90000000000000000000000000000000000000000000000000000000008152fd5b611b109250611b38565b153880611ad4565b503d15611b2f57600160005114601f3d1116611acb565b813b1515611acb565b919060006044602092604051907f095ea7b300000000000000000000000000000000000000000000000000000000825260048201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602482015282865af19182611ba05750565b9091503d15611bb85750600160005114601f3d111690565b3b15159056fea2646970667358221220d6dbd097ccfe621ec2523dc7219a11ac51241d4a656f621a42854db58b6f589564736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "isValidSignature(bytes32,bytes)": {
        "details": "Should return whether the signature provided is valid for the provided data",
        "params": {
          "hash": "Hash of the data to be signed",
          "signature": "Signature byte array associated with _data"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
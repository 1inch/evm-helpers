{
  "address": "0x62BcB3ff2cFef8B87902CB408068b8BC39e0cC8d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAlgebraSonic",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tickRange",
          "type": "int24"
        }
      ],
      "name": "getTicks",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "ticks",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a15395984b4ae5ab59cca69711dd55173632d968a1f9a79c7af7ce13192f894",
  "receipt": {
    "to": null,
    "from": "0x56E44874F624EbDE6efCc783eFD685f0FBDC6dcF",
    "contractAddress": "0x62BcB3ff2cFef8B87902CB408068b8BC39e0cC8d",
    "transactionIndex": 0,
    "gasUsed": "609753",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x3496b34a2bb1dd9aeb99b6b24f96e148bb6e8c00b04d145ab6192eb045aa2955",
    "transactionHash": "0x1a15395984b4ae5ab59cca69711dd55173632d968a1f9a79c7af7ce13192f894",
    "logs": [],
    "blockNumber": 32891756,
    "cumulativeGasUsed": "609753",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "179e311232bd2a0ebc30527eac8e5e73",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAlgebraSonic\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickRange\",\"type\":\"int24\"}],\"name\":\"getTicks\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"ticks\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract includes helper functions for the Algebra protocol such as Sonic chain version.\",\"kind\":\"dev\",\"methods\":{\"getTicks(address,int24)\":{\"details\":\"The function returns an array of bytes each containing packed data about each tick in the specified range. The returned tick data includes the total liquidity, liquidity delta, outer fee growth for the two tokens, and the tick value itself. The tick range is centered around the current tick of the pool and spans tickRange*2. The tick range is constrained by the global min and max tick values. If there are no initialized ticks in the range, the function returns an empty array.\",\"params\":{\"pool\":\"The Algebra pool from which to fetch tick data.\",\"tickRange\":\"The range (either side of the current tick) within which to fetch tick data.\"},\"returns\":{\"ticks\":\"An array of bytes each containing packed data about each tick in the specified range.\"}}},\"stateVariables\":{\"_MAX_TICK\":{\"details\":\"Maximum allowed tick value.\"},\"_MIN_TICK\":{\"details\":\"Minimum allowed tick value.\"},\"_TICK_SPACING\":{\"details\":\"Spacing between ticks.\"}},\"title\":\"AlgebraSonicHelper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTicks(address,int24)\":{\"notice\":\"Fetches tick data for a specified range from an Algebra pool.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AlgebraSonicHelper.sol\":\"AlgebraSonicHelper\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"},\"contracts/AlgebraSonicHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"@uniswap/v3-core/contracts/libraries/BitMath.sol\\\";\\nimport \\\"./interfaces/IAlgebraSonic.sol\\\";\\n\\n/// @title AlgebraSonicHelper\\n/// @dev This contract includes helper functions for the Algebra protocol such as Sonic chain version.\\ncontract AlgebraSonicHelper {\\n    /// @dev Minimum allowed tick value.\\n    int24 private constant _MIN_TICK = -887272;\\n\\n    /// @dev Maximum allowed tick value.\\n    int24 private constant _MAX_TICK = -_MIN_TICK;\\n\\n    /// @dev Spacing between ticks.\\n    int24 internal constant _TICK_SPACING = 5;\\n\\n    /**\\n     * @notice Fetches tick data for a specified range from an Algebra pool.\\n     * @dev The function returns an array of bytes each containing packed data about each tick in the specified range.\\n     * The returned tick data includes the total liquidity, liquidity delta, outer fee growth for the two tokens, and\\n     * the tick value itself. The tick range is centered around the current tick of the pool and spans tickRange*2.\\n     * The tick range is constrained by the global min and max tick values.\\n     * If there are no initialized ticks in the range, the function returns an empty array.\\n     * @param pool The Algebra pool from which to fetch tick data.\\n     * @param tickRange The range (either side of the current tick) within which to fetch tick data.\\n     * @return ticks An array of bytes each containing packed data about each tick in the specified range.\\n     */\\n    function getTicks(IAlgebraSonic pool, int24 tickRange) external view returns (bytes[] memory ticks) {\\n        (,int24 tick) = pool.globalState();\\n\\n        tickRange *= _TICK_SPACING;\\n        int24 fromTick = tick - tickRange;\\n        int24 toTick = tick + tickRange;\\n        if (fromTick < _MIN_TICK) {\\n            fromTick = _MIN_TICK;\\n        }\\n        if (toTick > _MAX_TICK) {\\n            toTick = _MAX_TICK;\\n        }\\n\\n        bytes[] memory rawTicks = new bytes[](uint256(int256((toTick - fromTick + 1) / _TICK_SPACING)));\\n        uint256 counter = 0;\\n        int24 closestTick = pool.nextTickGlobal();\\n\\n        (\\n            uint128 liquidityTotal,\\n            int128 liquidityDelta,\\n            int24 prevTick,\\n            int24 nextTick,\\n            uint256 outerFeeGrowth0Token,\\n            uint256 outerFeeGrowth1Token\\n        ) = pool.ticks(closestTick);\\n        int24 prevClosetTick = prevTick;\\n\\n        if (liquidityTotal > 0 || liquidityDelta != 0) {\\n            rawTicks[counter++] = abi.encodePacked(\\n                liquidityTotal,\\n                liquidityDelta,\\n                prevTick,\\n                nextTick,\\n                outerFeeGrowth0Token,\\n                outerFeeGrowth1Token,\\n                closestTick\\n            );\\n        }\\n\\n        for (int24 currentTick = nextTick; currentTick <= toTick; ) {\\n            (\\n                liquidityTotal,\\n                liquidityDelta,\\n                prevTick,\\n                nextTick,\\n                outerFeeGrowth0Token,\\n                outerFeeGrowth1Token\\n            ) = pool.ticks(currentTick);\\n\\n            if (liquidityTotal > 0 || liquidityDelta != 0) {\\n                rawTicks[counter++] = abi.encodePacked(\\n                    liquidityTotal,\\n                    liquidityDelta,\\n                    prevTick,\\n                    nextTick,\\n                    outerFeeGrowth0Token,\\n                    outerFeeGrowth1Token,\\n                    currentTick\\n                );\\n            }\\n\\n            if (nextTick <= currentTick) break;\\n            currentTick = nextTick;\\n        }\\n\\n        for (int24 currentTick = prevClosetTick; currentTick >= fromTick; ) {\\n            (\\n                liquidityTotal,\\n                liquidityDelta,\\n                prevTick,\\n                nextTick,\\n                outerFeeGrowth0Token,\\n                outerFeeGrowth1Token\\n            ) = pool.ticks(currentTick);\\n\\n            if (liquidityTotal > 0 || liquidityDelta != 0) {\\n                rawTicks[counter++] = abi.encodePacked(\\n                    liquidityTotal,\\n                    liquidityDelta,\\n                    prevTick,\\n                    nextTick,\\n                    outerFeeGrowth0Token,\\n                    outerFeeGrowth1Token,\\n                    currentTick\\n                );\\n            }\\n\\n            if (prevTick >= currentTick) break;\\n            currentTick = prevTick;\\n        }\\n\\n        // Truncate result with real amount\\n        ticks = new bytes[](counter);\\n        for (uint256 i = 0; i < counter; i++) {\\n            ticks[i] = rawTicks[i];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4ce0bd31a6454138c9e068ce03ff2026353a8b7963b785e598c3e3bcbb81a7b9\",\"license\":\"MIT\"},\"contracts/interfaces/IAlgebraSonic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface IAlgebraSonic {\\n    function globalState() external view returns (uint160 price, int24 tick); // returns reduced because forks use different types of returned values that we do not use\\n\\n    function nextTickGlobal() external view returns (int24);\\n\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityTotal,\\n            int128 liquidityDelta,\\n            int24 prevTick,\\n            int24 nextTick,\\n            uint256 outerFeeGrowth0Token,\\n            uint256 outerFeeGrowth1Token\\n        );\\n}\\n\",\"keccak256\":\"0x0ede50379c6ded18a170b4b481e51952cda6969af5ce28f10981c3dfc556dcfe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610a1c908161001b8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c63c078e90c14610025575f80fd5b346107445760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610744576004359073ffffffffffffffffffffffffffffffffffffffff908183168303610744576024358060020b809103610744577fe76c01e40000000000000000000000000000000000000000000000000000000082526040826004818688165afa918215610550575f9261078d575b506005028060020b908103610750576100da8183610854565b9160020b01927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000627fffff8186128187131761075057857ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618808660020b12610785575b50620d89e8809160020b1361077d575b50600161015a8588610854565b60020b019182129082131761075057600561017b9160020b0560020b6108a6565b915f916040517fd5c35a7e0000000000000000000000000000000000000000000000000000000081526020816004818986165afa908115610550575f91610712575b506040517ff30dba930000000000000000000000000000000000000000000000000000000081528160020b600482015260c0816024818a87165afa918215610550575f80915f945f945f905f926106e6575b506fffffffffffffffffffffffffffffffff8416158015906106da575b61064a575b50505050505b8760020b8160020b1361063d57604051907ff30dba930000000000000000000000000000000000000000000000000000000082528060020b600483015260c0826024818b88165afa8015610550575f805f925f955f905f9261060f575b506fffffffffffffffffffffffffffffffff831615801590610603575b610566575b505050505060020b8160020b136102375750909192939495505b5b8260020b8160020b1261055b57604051907ff30dba930000000000000000000000000000000000000000000000000000000082528060020b600483015260c0826024818a87165afa8015610550575f80915f945f80915f93610515575b506fffffffffffffffffffffffffffffffff841615801590610509575b610471575b505050505060020b8160020b126102d1575050509091505b610371816108a6565b915f5b828110610447578360405160208101916020825280518093526040820192602060408260051b8501019201905f945b8186106103b05784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc085820301825283518051908183525f5b828110610432575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f855f85809860019a01015201160101950192019501949190916103a3565b806020809284010151828287010152016103e4565b80610454600192846109d2565b5161045f82876109d2565b5261046a81866109d2565b5001610374565b604080517fffffffffffffffffffffffffffffffff00000000000000000000000000000000608096871b1660208201529590941b603086015260e887811b94860194909452831b60438501526046840152606683015282901b608682015260698152946104fe906104e36089886107d8565b6104ec8161096b565b966104f7828a6109d2565b52876109d2565b505f80808080610350565b5084600f0b151561034b565b94505050505061053e91925060c03d60c011610549575b61053681836107d8565b81019061090c565b92959492915f61032e565b503d61052c565b6040513d5f823e3d90fd5b505050909150610368565b604080517fffffffffffffffffffffffffffffffff00000000000000000000000000000000608095861b1660208201529490931b603085015260e894851b9284019290925285841b6043840152604683019190915260668201529082901b608682015260698152956105d96089886107d8565b6105e28161096b565b966105ed828a6109d2565b526105f890886109d2565b505f808080806102b6565b5083600f0b15156102b1565b94505050505061062f91925060c03d60c0116105495761053681836107d8565b91959492939291905f610294565b50909192939495506102d0565b604080517fffffffffffffffffffffffffffffffff00000000000000000000000000000000608096871b1660208201529590941b603086015260e887811b9486019490945285841b604386015260468501526066840152901b60868201526069815294506106b96089866107d8565b6001946106c587610998565b526106cf86610998565b505f80808080610231565b5084600f0b151561022c565b94505050935050610706915060c03d60c0116105495761053681836107d8565b9295919492905f61020f565b90506020813d602011610748575b8161072d602093836107d8565b810103126107445761073e90610846565b5f6101bd565b5f80fd5b3d9150610720565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b95505f61014d565b94505f61013d565b9091506040813d6040116107d0575b816107a9604093836107d8565b8101031261074457805183811603610744576107c9602060059201610846565b91906100c1565b3d915061079c565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761081957604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b51908160020b820361074457565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083121761075057565b67ffffffffffffffff81116108195760051b60200190565b906108b08261088e565b6108bd60405191826107d8565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06108eb829461088e565b01905f5b8281106108fb57505050565b8060606020809385010152016108ef565b91908260c09103126107445781516fffffffffffffffffffffffffffffffff811681036107445791602081015180600f0b8103610744579161095060408301610846565b9161095d60608201610846565b9160a0608083015192015190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107505760010190565b8051156109a55760200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b80518210156109a55760209160051b01019056fea2646970667358221220026c49695c7bd6a4629a63c01262f488c5eda13d40b912672f24908a3ad2c2c364736f6c63430008170033",
  "deployedBytecode": "0x6080806040526004361015610012575f80fd5b5f3560e01c63c078e90c14610025575f80fd5b346107445760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610744576004359073ffffffffffffffffffffffffffffffffffffffff908183168303610744576024358060020b809103610744577fe76c01e40000000000000000000000000000000000000000000000000000000082526040826004818688165afa918215610550575f9261078d575b506005028060020b908103610750576100da8183610854565b9160020b01927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000627fffff8186128187131761075057857ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618808660020b12610785575b50620d89e8809160020b1361077d575b50600161015a8588610854565b60020b019182129082131761075057600561017b9160020b0560020b6108a6565b915f916040517fd5c35a7e0000000000000000000000000000000000000000000000000000000081526020816004818986165afa908115610550575f91610712575b506040517ff30dba930000000000000000000000000000000000000000000000000000000081528160020b600482015260c0816024818a87165afa918215610550575f80915f945f945f905f926106e6575b506fffffffffffffffffffffffffffffffff8416158015906106da575b61064a575b50505050505b8760020b8160020b1361063d57604051907ff30dba930000000000000000000000000000000000000000000000000000000082528060020b600483015260c0826024818b88165afa8015610550575f805f925f955f905f9261060f575b506fffffffffffffffffffffffffffffffff831615801590610603575b610566575b505050505060020b8160020b136102375750909192939495505b5b8260020b8160020b1261055b57604051907ff30dba930000000000000000000000000000000000000000000000000000000082528060020b600483015260c0826024818a87165afa8015610550575f80915f945f80915f93610515575b506fffffffffffffffffffffffffffffffff841615801590610509575b610471575b505050505060020b8160020b126102d1575050509091505b610371816108a6565b915f5b828110610447578360405160208101916020825280518093526040820192602060408260051b8501019201905f945b8186106103b05784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc085820301825283518051908183525f5b828110610432575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f855f85809860019a01015201160101950192019501949190916103a3565b806020809284010151828287010152016103e4565b80610454600192846109d2565b5161045f82876109d2565b5261046a81866109d2565b5001610374565b604080517fffffffffffffffffffffffffffffffff00000000000000000000000000000000608096871b1660208201529590941b603086015260e887811b94860194909452831b60438501526046840152606683015282901b608682015260698152946104fe906104e36089886107d8565b6104ec8161096b565b966104f7828a6109d2565b52876109d2565b505f80808080610350565b5084600f0b151561034b565b94505050505061053e91925060c03d60c011610549575b61053681836107d8565b81019061090c565b92959492915f61032e565b503d61052c565b6040513d5f823e3d90fd5b505050909150610368565b604080517fffffffffffffffffffffffffffffffff00000000000000000000000000000000608095861b1660208201529490931b603085015260e894851b9284019290925285841b6043840152604683019190915260668201529082901b608682015260698152956105d96089886107d8565b6105e28161096b565b966105ed828a6109d2565b526105f890886109d2565b505f808080806102b6565b5083600f0b15156102b1565b94505050505061062f91925060c03d60c0116105495761053681836107d8565b91959492939291905f610294565b50909192939495506102d0565b604080517fffffffffffffffffffffffffffffffff00000000000000000000000000000000608096871b1660208201529590941b603086015260e887811b9486019490945285841b604386015260468501526066840152901b60868201526069815294506106b96089866107d8565b6001946106c587610998565b526106cf86610998565b505f80808080610231565b5084600f0b151561022c565b94505050935050610706915060c03d60c0116105495761053681836107d8565b9295919492905f61020f565b90506020813d602011610748575b8161072d602093836107d8565b810103126107445761073e90610846565b5f6101bd565b5f80fd5b3d9150610720565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b95505f61014d565b94505f61013d565b9091506040813d6040116107d0575b816107a9604093836107d8565b8101031261074457805183811603610744576107c9602060059201610846565b91906100c1565b3d915061079c565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761081957604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b51908160020b820361074457565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083121761075057565b67ffffffffffffffff81116108195760051b60200190565b906108b08261088e565b6108bd60405191826107d8565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06108eb829461088e565b01905f5b8281106108fb57505050565b8060606020809385010152016108ef565b91908260c09103126107445781516fffffffffffffffffffffffffffffffff811681036107445791602081015180600f0b8103610744579161095060408301610846565b9161095d60608201610846565b9160a0608083015192015190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107505760010190565b8051156109a55760200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b80518210156109a55760209160051b01019056fea2646970667358221220026c49695c7bd6a4629a63c01262f488c5eda13d40b912672f24908a3ad2c2c364736f6c63430008170033",
  "devdoc": {
    "details": "This contract includes helper functions for the Algebra protocol such as Sonic chain version.",
    "kind": "dev",
    "methods": {
      "getTicks(address,int24)": {
        "details": "The function returns an array of bytes each containing packed data about each tick in the specified range. The returned tick data includes the total liquidity, liquidity delta, outer fee growth for the two tokens, and the tick value itself. The tick range is centered around the current tick of the pool and spans tickRange*2. The tick range is constrained by the global min and max tick values. If there are no initialized ticks in the range, the function returns an empty array.",
        "params": {
          "pool": "The Algebra pool from which to fetch tick data.",
          "tickRange": "The range (either side of the current tick) within which to fetch tick data."
        },
        "returns": {
          "ticks": "An array of bytes each containing packed data about each tick in the specified range."
        }
      }
    },
    "stateVariables": {
      "_MAX_TICK": {
        "details": "Maximum allowed tick value."
      },
      "_MIN_TICK": {
        "details": "Minimum allowed tick value."
      },
      "_TICK_SPACING": {
        "details": "Spacing between ticks."
      }
    },
    "title": "AlgebraSonicHelper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTicks(address,int24)": {
        "notice": "Fetches tick data for a specified range from an Algebra pool."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "address": "0xAdF7CC69626eB6F03F4F613832C84Cf62586A6Bb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAlgebra",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tickRange",
          "type": "int24"
        }
      ],
      "name": "getTicks",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "ticks",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe147aa20783c3b86efd3454540e617cc2cd1ccb25df970335fb4f624fa96ddfa",
  "receipt": {
    "to": null,
    "from": "0x56E44874F624EbDE6efCc783eFD685f0FBDC6dcF",
    "contractAddress": "0xAdF7CC69626eB6F03F4F613832C84Cf62586A6Bb",
    "transactionIndex": 1,
    "gasUsed": "661153",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x49a167dc429dd331d15c523dbc42985f52da4e7d7e7d8b702ade25bc2475b558",
    "transactionHash": "0xe147aa20783c3b86efd3454540e617cc2cd1ccb25df970335fb4f624fa96ddfa",
    "logs": [],
    "blockNumber": 32064188,
    "cumulativeGasUsed": "1551391",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "75ebd71d97a0d306f75bf9f673d2a4db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAlgebra\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickRange\",\"type\":\"int24\"}],\"name\":\"getTicks\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"ticks\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract includes helper functions for the Algebra protocol.\",\"kind\":\"dev\",\"methods\":{\"getTicks(address,int24)\":{\"details\":\"The function returns an array of bytes each containing packed data about each tick in the specified range. The returned tick data includes the total liquidity, liquidity delta, outer fee growth for the two tokens, and the tick value itself. The tick range is centered around the current tick of the pool and spans tickRange*2. The tick range is constrained by the global min and max tick values. If there are no initialized ticks in the range, the function returns an empty array.\",\"params\":{\"pool\":\"The Algebra pool from which to fetch tick data.\",\"tickRange\":\"The range (either side of the current tick) within which to fetch tick data.\"},\"returns\":{\"ticks\":\"An array of bytes each containing packed data about each tick in the specified range.\"}}},\"stateVariables\":{\"_BASE_FEE\":{\"details\":\"Base fee for transactions.\"},\"_MAX_TICK\":{\"details\":\"Maximum allowed tick value.\"},\"_MIN_TICK\":{\"details\":\"Minimum allowed tick value.\"},\"_TICK_SPACING\":{\"details\":\"Spacing between ticks.\"}},\"title\":\"AlgebraHelper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTicks(address,int24)\":{\"notice\":\"Fetches tick data for a specified range from an Algebra pool.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AlgebraHelper.sol\":\"AlgebraHelper\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"},\"contracts/AlgebraHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"@uniswap/v3-core/contracts/libraries/BitMath.sol\\\";\\nimport \\\"./interfaces/IAlgebra.sol\\\";\\n\\n/// @title AlgebraHelper\\n/// @dev This contract includes helper functions for the Algebra protocol.\\ncontract AlgebraHelper {\\n    /// @dev Minimum allowed tick value.\\n    int24 private constant _MIN_TICK = -887272;\\n\\n    /// @dev Maximum allowed tick value.\\n    int24 private constant _MAX_TICK = -_MIN_TICK;\\n\\n    /// @dev Base fee for transactions.\\n    uint16 internal constant _BASE_FEE = 100;\\n\\n    /// @dev Spacing between ticks.\\n    int24 internal constant _TICK_SPACING = 60;\\n\\n    /// @dev The Tick struct represents the state of a tick.\\n    struct Tick {\\n        uint128 liquidityGross;\\n        int128 liquidityNet;\\n        uint256 feeGrowthOutside0X128;\\n        uint256 feeGrowthOutside1X128;\\n        int56 tickCumulativeOutside;\\n        uint160 secondsPerLiquidityOutsideX128;\\n        uint32 secondsOutside;\\n        int24 index; // tick index\\n    }\\n\\n    /**\\n     * @notice Fetches tick data for a specified range from an Algebra pool.\\n     * @dev The function returns an array of bytes each containing packed data about each tick in the specified range.\\n     * The returned tick data includes the total liquidity, liquidity delta, outer fee growth for the two tokens, and\\n     * the tick value itself. The tick range is centered around the current tick of the pool and spans tickRange*2.\\n     * The tick range is constrained by the global min and max tick values.\\n     * If there are no initialized ticks in the range, the function returns an empty array.\\n     * @param pool The Algebra pool from which to fetch tick data.\\n     * @param tickRange The range (either side of the current tick) within which to fetch tick data.\\n     * @return ticks An array of bytes each containing packed data about each tick in the specified range.\\n     */\\n    function getTicks(IAlgebra pool, int24 tickRange) external view returns (bytes[] memory ticks) {\\n        (,int24 tick) = pool.globalState();\\n\\n        tickRange *= _TICK_SPACING;\\n        int24 fromTick = tick - tickRange;\\n        int24 toTick = tick + tickRange;\\n        if (fromTick < _MIN_TICK) {\\n            fromTick = _MIN_TICK;\\n        }\\n        if (toTick > _MAX_TICK) {\\n            toTick = _MAX_TICK;\\n        }\\n\\n        int24[] memory initTicks = new int24[](uint256(int256((toTick - fromTick + 1) / _TICK_SPACING)));\\n\\n        uint256 counter = 0;\\n        int16 pos = int16((fromTick / _TICK_SPACING) >> 8);\\n        int16 endPos = int16((toTick / _TICK_SPACING) >> 8);\\n        for (; pos <= endPos; pos++) {\\n            uint256 bm = pool.tickTable(pos);\\n\\n            while (bm != 0) {\\n                uint8 bit = BitMath.leastSignificantBit(bm);\\n                bm ^= 1 << bit;\\n                int24 extractedTick = ((int24(pos) << 8) | int24(uint24(bit))) * _TICK_SPACING;\\n                if (extractedTick >= fromTick && extractedTick <= toTick) {\\n                    initTicks[counter++] = extractedTick;\\n                }\\n            }\\n        }\\n\\n        ticks = new bytes[](counter);\\n        for (uint256 i = 0; i < counter; i++) {\\n            (\\n                uint128 liquidityTotal,\\n                int128 liquidityDelta,\\n                uint256 outerFeeGrowth0Token,\\n                uint256 outerFeeGrowth1Token\\n                , // int56 outerTickCumulative,\\n                , // uint160 outerSecondsPerLiquidity\\n                , // uint32 outerSecondsSpent\\n                , // bool initialized\\n            ) = pool.ticks(initTicks[i]);\\n\\n            ticks[i] = abi.encodePacked(\\n                liquidityTotal,\\n                liquidityDelta,\\n                outerFeeGrowth0Token,\\n                outerFeeGrowth1Token,\\n                // outerTickCumulative,\\n                // outerSecondsPerLiquidity,\\n                // outerSecondsSpent,\\n                initTicks[i]\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55a35cc08c374803c4f8d9370160f7c767879b616a9c1c7404b2b93abcbc7ea5\",\"license\":\"MIT\"},\"contracts/interfaces/IAlgebra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\n\\ninterface IAlgebra {\\n    /**\\n    * @notice The globalState structure in the pool stores many values but requires only one slot\\n    * and is exposed as a single method to save gas when accessed externally.\\n    * @return price The current price of the pool as a sqrt(token1/token0) Q64.96 value;\\n    * Returns tick The current tick of the pool, i.e. according to the last tick transition that was run;\\n    * Returns This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick\\n    * boundary;\\n    * Returns fee The last pool fee value in hundredths of a bip, i.e. 1e-6;\\n    * Returns timepointIndex The index of the last written timepoint;\\n    * Returns communityFeeToken0 The community fee percentage of the swap fee in thousandths (1e-3) for token0;\\n    * Returns communityFeeToken1 The community fee percentage of the swap fee in thousandths (1e-3) for token1;\\n    * Returns unlocked Whether the pool is currently locked to reentrancy;\\n    */\\n    function globalState() external view returns (uint160 price, int24 tick); // returns reduced because forks use different types of returned values that we do not use\\n\\n    /**\\n    * @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    * @dev This value can overflow the uint256\\n    */\\n    function totalFeeGrowth0Token() external view returns (uint256);\\n\\n    /**\\n    * @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    * @dev This value can overflow the uint256\\n    */\\n    function totalFeeGrowth1Token() external view returns (uint256);\\n\\n    /**\\n    * @notice The currently in range liquidity available to the pool\\n    * @dev This value has no relationship to the total liquidity across all ticks.\\n    * Returned value cannot exceed type(uint128).max\\n    */\\n    function liquidity() external view returns (uint128);\\n\\n    /**\\n    * @notice Look up information about a specific tick in the pool\\n    * @dev This is a public structure, so the `return` natspec tags are omitted.\\n    * @param tick The tick to look up\\n    * @return liquidityTotal the total amount of position liquidity that uses the pool either as tick lower or\\n    * tick upper\\n    * @return liquidityDelta how much liquidity changes when the pool price crosses the tick;\\n    * Returns outerFeeGrowth0Token the fee growth on the other side of the tick from the current tick in token0;\\n    * Returns outerFeeGrowth1Token the fee growth on the other side of the tick from the current tick in token1;\\n    * Returns outerTickCumulative the cumulative tick value on the other side of the tick from the current tick;\\n    * Returns outerSecondsPerLiquidity the seconds spent per liquidity on the other side of the tick from the current tick;\\n    * Returns outerSecondsSpent the seconds spent on the other side of the tick from the current tick;\\n    * Returns initialized Set to true if the tick is initialized, i.e. liquidityTotal is greater than 0\\n    * otherwise equal to false. Outside values can only be used if the tick is initialized.\\n    * In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    * a specific position.\\n    */\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityTotal,\\n            int128 liquidityDelta,\\n            uint256 outerFeeGrowth0Token,\\n            uint256 outerFeeGrowth1Token,\\n            int56 outerTickCumulative,\\n            uint160 outerSecondsPerLiquidity,\\n            uint32 outerSecondsSpent,\\n            bool initialized\\n        );\\n\\n    /** @notice Returns 256 packed tick initialized boolean values. See TickTable for more information */\\n    function tickTable(int16 wordPosition) external view returns (uint256);\\n\\n    /**\\n    * @notice Returns the information about a position by the position's key\\n    * @dev This is a public mapping of structures, so the `return` natspec tags are omitted.\\n    * @param key The position's key is a hash of a preimage composed by the owner, bottomTick and topTick\\n    * @return liquidityAmount The amount of liquidity in the position;\\n    * Returns lastLiquidityAddTimestamp Timestamp of last adding of liquidity;\\n    * Returns innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke;\\n    * Returns innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke;\\n    * Returns fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke;\\n    * Returns fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke\\n    */\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityAmount,\\n            uint32 lastLiquidityAddTimestamp,\\n            uint256 innerFeeGrowth0Token,\\n            uint256 innerFeeGrowth1Token,\\n            uint128 fees0,\\n            uint128 fees1\\n        );\\n}\\n\",\"keccak256\":\"0xca339a536627645a278b0e2049707a42bd12ef8ed4a4bcdeb1499b1f565752a7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610b05908161001b8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c63c078e90c14610025575f80fd5b346106435760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610643576004359073ffffffffffffffffffffffffffffffffffffffff82168203610643576024358060020b8103610643577fe76c01e400000000000000000000000000000000000000000000000000000000825260408260048173ffffffffffffffffffffffffffffffffffffffff87165afa91821561064f575f92610977575b506100dc90610a27565b906100e78282610a3c565b9160020b9060020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000627fffff8183128184131761027157827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618808660020b1261096f575b50620d89e8809160020b13610967575b50600161016a8585610a3c565b60020b019182129082131761027157603c9060020b0560020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06101c66101b083610a76565b926101be60405194856109c5565b808452610a76565b013660208301375f91603c8460020b0560020b60081d60010b5b603c8260020b0560020b60081d60010b8160010b1361065a576040517fc677e3e00000000000000000000000000000000000000000000000000000000081528160010b600482015260208160248173ffffffffffffffffffffffffffffffffffffffff8b165afa90811561064f575f91610619575b50805b61029e575060010b617fff8114610271576001016101e0565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8060ff6fffffffffffffffffffffffffffffffff82161561060d5750607f5b67ffffffffffffffff8216156106035760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc081831601116102715760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0015b63ffffffff8216156105f95760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081831601116102715760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015b61ffff8216156105ef5760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff081831601116102715760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0015b60ff8216156105e55760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff881831601116102715760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8015b600f8216156105db5760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc81831601116102715760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc015b60038216156105cf5760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8183160111610271577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff6001921601915b16610579575b60ff6105129116916001831b189160020b8360081b60020b17610a27565b60020b8660020b8112158061056c575b61052e575b5080610258565b85907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82146102715761056660018493019787610a8e565b52610527565b508360020b811315610522565b60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81831601116102715760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016104f4565b9060019060021c6104ee565b9060041c9061048f565b9060081c90610434565b9060101c906103d9565b9060201c9061037d565b9060401c9061031f565b90508160801c906102bd565b90506020813d602011610647575b81610634602093836109c5565b8101031261064357515f610255565b5f80fd5b3d9150610627565b6040513d5f823e3d90fd5b82848761066682610a76565b9261067460405194856109c5565b8284527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06106a184610a76565b015f5b8181106109565750505f5b838110610782578460405160208101916020825280518093526040820192602060408260051b8501019201905f945b8186106106eb5784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc085820301825283518051908183525f5b82811061076d575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f855f85809860019a01015201160101950192019501949190916106de565b8060208092840101518282870101520161071f565b61078c8183610a8e565b5160020b90604051917ff30dba930000000000000000000000000000000000000000000000000000000083526004830152610100808360248173ffffffffffffffffffffffffffffffffffffffff89165afa90811561064f575f915f945f925f926108b3575b50506107fe8487610a8e565b5191604051957fffffffffffffffffffffffffffffffff00000000000000000000000000000000608095861b166020880152841b60308701526040860152606085015260e81b908301526063825260a082019180831067ffffffffffffffff841117610886576001926040526108748288610a8e565b5261087f8187610a8e565b50016106af565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b93509450505082813d831161094f575b6108cd81836109c5565b81010312610643578151916fffffffffffffffffffffffffffffffff831683036106435760208101519081600f0b82036106435760408101519360608201519160808101518060060b036106435761092760a08201610a06565b5060c081015163ffffffff8116036106435760e00151801515036106435791939089806107f2565b503d6108c3565b8060606020809389010152016106a4565b92505f61015d565b94505f61014d565b9091506040813d6040116109bd575b81610993604093836109c5565b8101031261064357806109a7602092610a06565b5001518060020b810361064357906100dc6100d2565b3d9150610986565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761088657604052565b519073ffffffffffffffffffffffffffffffffffffffff8216820361064357565b603c9060020b02908160020b91820361027157565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083121761027157565b67ffffffffffffffff81116108865760051b60200190565b8051821015610aa25760209160051b010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea26469706673582212206ab9f58183fb026d97a2732a40ff045683dde371f58200602852ccbdb7e5271464736f6c63430008170033",
  "deployedBytecode": "0x6080806040526004361015610012575f80fd5b5f3560e01c63c078e90c14610025575f80fd5b346106435760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610643576004359073ffffffffffffffffffffffffffffffffffffffff82168203610643576024358060020b8103610643577fe76c01e400000000000000000000000000000000000000000000000000000000825260408260048173ffffffffffffffffffffffffffffffffffffffff87165afa91821561064f575f92610977575b506100dc90610a27565b906100e78282610a3c565b9160020b9060020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000627fffff8183128184131761027157827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618808660020b1261096f575b50620d89e8809160020b13610967575b50600161016a8585610a3c565b60020b019182129082131761027157603c9060020b0560020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06101c66101b083610a76565b926101be60405194856109c5565b808452610a76565b013660208301375f91603c8460020b0560020b60081d60010b5b603c8260020b0560020b60081d60010b8160010b1361065a576040517fc677e3e00000000000000000000000000000000000000000000000000000000081528160010b600482015260208160248173ffffffffffffffffffffffffffffffffffffffff8b165afa90811561064f575f91610619575b50805b61029e575060010b617fff8114610271576001016101e0565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8060ff6fffffffffffffffffffffffffffffffff82161561060d5750607f5b67ffffffffffffffff8216156106035760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc081831601116102715760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0015b63ffffffff8216156105f95760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081831601116102715760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015b61ffff8216156105ef5760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff081831601116102715760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0015b60ff8216156105e55760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff881831601116102715760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8015b600f8216156105db5760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc81831601116102715760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc015b60038216156105cf5760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8183160111610271577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff6001921601915b16610579575b60ff6105129116916001831b189160020b8360081b60020b17610a27565b60020b8660020b8112158061056c575b61052e575b5080610258565b85907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82146102715761056660018493019787610a8e565b52610527565b508360020b811315610522565b60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81831601116102715760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016104f4565b9060019060021c6104ee565b9060041c9061048f565b9060081c90610434565b9060101c906103d9565b9060201c9061037d565b9060401c9061031f565b90508160801c906102bd565b90506020813d602011610647575b81610634602093836109c5565b8101031261064357515f610255565b5f80fd5b3d9150610627565b6040513d5f823e3d90fd5b82848761066682610a76565b9261067460405194856109c5565b8284527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06106a184610a76565b015f5b8181106109565750505f5b838110610782578460405160208101916020825280518093526040820192602060408260051b8501019201905f945b8186106106eb5784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc085820301825283518051908183525f5b82811061076d575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f855f85809860019a01015201160101950192019501949190916106de565b8060208092840101518282870101520161071f565b61078c8183610a8e565b5160020b90604051917ff30dba930000000000000000000000000000000000000000000000000000000083526004830152610100808360248173ffffffffffffffffffffffffffffffffffffffff89165afa90811561064f575f915f945f925f926108b3575b50506107fe8487610a8e565b5191604051957fffffffffffffffffffffffffffffffff00000000000000000000000000000000608095861b166020880152841b60308701526040860152606085015260e81b908301526063825260a082019180831067ffffffffffffffff841117610886576001926040526108748288610a8e565b5261087f8187610a8e565b50016106af565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b93509450505082813d831161094f575b6108cd81836109c5565b81010312610643578151916fffffffffffffffffffffffffffffffff831683036106435760208101519081600f0b82036106435760408101519360608201519160808101518060060b036106435761092760a08201610a06565b5060c081015163ffffffff8116036106435760e00151801515036106435791939089806107f2565b503d6108c3565b8060606020809389010152016106a4565b92505f61015d565b94505f61014d565b9091506040813d6040116109bd575b81610993604093836109c5565b8101031261064357806109a7602092610a06565b5001518060020b810361064357906100dc6100d2565b3d9150610986565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761088657604052565b519073ffffffffffffffffffffffffffffffffffffffff8216820361064357565b603c9060020b02908160020b91820361027157565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083121761027157565b67ffffffffffffffff81116108865760051b60200190565b8051821015610aa25760209160051b010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea26469706673582212206ab9f58183fb026d97a2732a40ff045683dde371f58200602852ccbdb7e5271464736f6c63430008170033",
  "devdoc": {
    "details": "This contract includes helper functions for the Algebra protocol.",
    "kind": "dev",
    "methods": {
      "getTicks(address,int24)": {
        "details": "The function returns an array of bytes each containing packed data about each tick in the specified range. The returned tick data includes the total liquidity, liquidity delta, outer fee growth for the two tokens, and the tick value itself. The tick range is centered around the current tick of the pool and spans tickRange*2. The tick range is constrained by the global min and max tick values. If there are no initialized ticks in the range, the function returns an empty array.",
        "params": {
          "pool": "The Algebra pool from which to fetch tick data.",
          "tickRange": "The range (either side of the current tick) within which to fetch tick data."
        },
        "returns": {
          "ticks": "An array of bytes each containing packed data about each tick in the specified range."
        }
      }
    },
    "stateVariables": {
      "_BASE_FEE": {
        "details": "Base fee for transactions."
      },
      "_MAX_TICK": {
        "details": "Maximum allowed tick value."
      },
      "_MIN_TICK": {
        "details": "Minimum allowed tick value."
      },
      "_TICK_SPACING": {
        "details": "Spacing between ticks."
      }
    },
    "title": "AlgebraHelper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTicks(address,int24)": {
        "notice": "Fetches tick data for a specified range from an Algebra pool."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
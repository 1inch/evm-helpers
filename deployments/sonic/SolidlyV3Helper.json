{
  "address": "0x26daCf7E879b18FE658326ddD3ABC0D6910B3E9F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV3",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tickRange",
          "type": "int24"
        }
      ],
      "name": "getTicks",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "ticks",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1d45bd40ff6b51d85b4b81ebbca227da84707560580281ad7660e76953b98254",
  "receipt": {
    "to": null,
    "from": "0x56E44874F624EbDE6efCc783eFD685f0FBDC6dcF",
    "contractAddress": "0x26daCf7E879b18FE658326ddD3ABC0D6910B3E9F",
    "transactionIndex": 1,
    "gasUsed": "564895",
    "logsBloom": "0x
    "blockHash": "0xefac8d58fdb09285d548289cfbb42ce4c4cbc72218a5660d6a3351b67737280b",
    "transactionHash": "0x1d45bd40ff6b51d85b4b81ebbca227da84707560580281ad7660e76953b98254",
    "logs": [],
    "blockNumber": 30395681,
    "cumulativeGasUsed": "1366857",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7f51124f0f7ff12f4de33e94de1d06d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapV3\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickRange\",\"type\":\"int24\"}],\"name\":\"getTicks\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"ticks\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SolidlyV3Helper.sol\":\"SolidlyV3Helper\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"},\"contracts/SolidlyV3Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"@uniswap/v3-core/contracts/libraries/BitMath.sol\\\";\\nimport \\\"./interfaces/IUniswapV3.sol\\\";\\n\\ncontract SolidlyV3Helper {\\n    int24 private constant _MIN_TICK = -887272;\\n    int24 private constant _MAX_TICK = -_MIN_TICK;\\n\\n    function getTicks(IUniswapV3 pool, int24 tickRange) external view returns (bytes[] memory ticks) {\\n        int24 tickSpacing = pool.tickSpacing();\\n        (,int24 tick) = pool.slot0();\\n\\n        int24 fromTick = tick - (tickSpacing * tickRange);\\n        int24 toTick = tick + (tickSpacing * tickRange);\\n        if (fromTick < _MIN_TICK) {\\n            fromTick = _MIN_TICK;\\n        }\\n        if (toTick > _MAX_TICK) {\\n            toTick = _MAX_TICK;\\n        }\\n\\n        int24[] memory initTicks = new int24[](uint256(int256(toTick - fromTick + 1) / int256(tickSpacing)));\\n\\n        uint256 counter = 0;\\n        for (int24 tickNum = (fromTick / tickSpacing * tickSpacing); tickNum <= (toTick / tickSpacing * tickSpacing); tickNum += (256 * tickSpacing)) {\\n            int16 pos = int16((tickNum / tickSpacing) >> 8);\\n            uint256 bm = pool.tickBitmap(pos);\\n\\n            while (bm != 0) {\\n                uint8 bit = BitMath.mostSignificantBit(bm);\\n                initTicks[counter] = (int24(pos) * 256 + int24(int256(uint256(bit)))) * tickSpacing;\\n                counter += 1;\\n                bm ^= 1 << bit;\\n            }\\n        }\\n\\n        ticks = new bytes[](counter);\\n        for (uint256 i = 0; i < counter; i++) {\\n             ticks[i] = abi.encodePacked(initTicks[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x41bd904e01a0f4a2d06587cc09d77ee245e7e4df02f80c4efea0f5fea2222635\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\n\\ninterface IUniswapV3 {\\n    function tickSpacing() external view returns (int24);\\n\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick\\n            // the rest is ignored\\n        );\\n\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    function liquidity() external view returns (uint128);\\n\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0xdfaffac1c05ed63b03980ee4d63e3e755fddb69ae3b3a6ee1a60e1c9a50a9779\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608080604052346100165761094c908161001b8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c63c078e90c14610025575f80fd5b346104de5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104de5760043573ffffffffffffffffffffffffffffffffffffffff80821682036104de576024358060020b81036104de577fd0c93a7c0000000000000000000000000000000000000000000000000000000084526020846004818587165afa9384156104ea575f94610736575b506040517f3850c7bd0000000000000000000000000000000000000000000000000000000081526040816004818688165afa80156104ea575f906106ee575b610125915061011f61011861011285896107d5565b836107ec565b93876107d5565b90610826565b927ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618808360020b126106e6575b50620d89e8808560020b136106de575b50600161016f83866107ec565b60020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213176103bb5760020b8560020b9081156106b1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147f80000000000000000000000000000000000000000000000000000000000000008214166103bb5705927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061023f61022986610860565b956102376040519788610772565b808752610860565b0136602086013761025a86610255815f96610878565b6107d5565b610268876102558189610878565b60020b8160020b136104f55761027e8782610878565b60020b90604051917f5339c2960000000000000000000000000000000000000000000000000000000083528060081d60010b60048401526020836024818789165afa80156104ea5789935f916104b1575b5090815b6102f857505090610255816102ee6102689461011f836107c1565b935050505061025a565b5f96935090807001000000000000000000000000000000008110156104a4575b6801000000000000000081101561048b575b64010000000081101561046f575b62010000811015610453575b610100811015610437575b601081101561041b575b60048110156103fe575b600211156103e8575b6103918a61025560ff6103848660081d60010b6107c1565b9a16998a60020b90610826565b61039b858a6108d5565b9060020b9052600184018094116103bb5760018a94971b188091906102d3565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b95600160ff809216019081116103bb579561036c565b60021c9660ff9081600281831601116103bb571660020196610363565b60041c9660ff80600481841601116103bb571660040196610359565b60081c9660ff80600881841601116103bb57166008019661034f565b601090811c9760ff90818381831601116103bb57160196610344565b60201c9660ff80602081841601116103bb571660200196610338565b60401c96604060ff809216019081116103bb579661032a565b506080965080871c610318565b9350506020833d6020116104e2575b816104cd60209383610772565b810103126104de578892515f6102cf565b5f80fd5b3d91506104c0565b6040513d5f823e3d90fd5b50505061050181610860565b9161050f6040519384610772565b8183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061053c83610860565b015f5b8181106106a05750505f5b82811061061d578360405160208101916020825280518093526040820192602060408260051b8501019201905f945b8186106105865784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc085820301825283518051908183525f5b828110610608575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f855f85809860019a0101520116010195019201950194919091610579565b806020809284010151828287010152016105ba565b61062781836108d5565b51906040519160e81b602083015260038252604082019180831067ffffffffffffffff8411176106735760019260405261066182876108d5565b5261066c81866108d5565b500161054a565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b80606060208093880101520161053f565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b93505f610162565b91505f610152565b506040813d60401161072e575b8161070860409383610772565b810103126104de578051838116036104de57610729602061012592016107b3565b6100fd565b3d91506106fb565b9093506020813d60201161076a575b8161075260209383610772565b810103126104de57610763906107b3565b925f6100be565b3d9150610745565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761067357604052565b51908160020b82036104de57565b60081b908160020b9160030b82036103bb57565b9060020b9060020b02908160020b9182036103bb57565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008312176103bb57565b9060020b9060020b01907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008212627fffff8313176103bb57565b67ffffffffffffffff81116106735760051b60200190565b60020b9060020b9081156106b1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008214166103bb570590565b80518210156108e95760209160051b010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea2646970667358221220bf6d2f9e3d3ad550bae222133dd8ae1d9f472e8aea6bc34985ad8c0a985a201064736f6c63430008170033",
  "deployedBytecode": "0x6080806040526004361015610012575f80fd5b5f3560e01c63c078e90c14610025575f80fd5b346104de5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104de5760043573ffffffffffffffffffffffffffffffffffffffff80821682036104de576024358060020b81036104de577fd0c93a7c0000000000000000000000000000000000000000000000000000000084526020846004818587165afa9384156104ea575f94610736575b506040517f3850c7bd0000000000000000000000000000000000000000000000000000000081526040816004818688165afa80156104ea575f906106ee575b610125915061011f61011861011285896107d5565b836107ec565b93876107d5565b90610826565b927ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618808360020b126106e6575b50620d89e8808560020b136106de575b50600161016f83866107ec565b60020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213176103bb5760020b8560020b9081156106b1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147f80000000000000000000000000000000000000000000000000000000000000008214166103bb5705927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061023f61022986610860565b956102376040519788610772565b808752610860565b0136602086013761025a86610255815f96610878565b6107d5565b610268876102558189610878565b60020b8160020b136104f55761027e8782610878565b60020b90604051917f5339c2960000000000000000000000000000000000000000000000000000000083528060081d60010b60048401526020836024818789165afa80156104ea5789935f916104b1575b5090815b6102f857505090610255816102ee6102689461011f836107c1565b935050505061025a565b5f96935090807001000000000000000000000000000000008110156104a4575b6801000000000000000081101561048b575b64010000000081101561046f575b62010000811015610453575b610100811015610437575b601081101561041b575b60048110156103fe575b600211156103e8575b6103918a61025560ff6103848660081d60010b6107c1565b9a16998a60020b90610826565b61039b858a6108d5565b9060020b9052600184018094116103bb5760018a94971b188091906102d3565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b95600160ff809216019081116103bb579561036c565b60021c9660ff9081600281831601116103bb571660020196610363565b60041c9660ff80600481841601116103bb571660040196610359565b60081c9660ff80600881841601116103bb57166008019661034f565b601090811c9760ff90818381831601116103bb57160196610344565b60201c9660ff80602081841601116103bb571660200196610338565b60401c96604060ff809216019081116103bb579661032a565b506080965080871c610318565b9350506020833d6020116104e2575b816104cd60209383610772565b810103126104de578892515f6102cf565b5f80fd5b3d91506104c0565b6040513d5f823e3d90fd5b50505061050181610860565b9161050f6040519384610772565b8183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061053c83610860565b015f5b8181106106a05750505f5b82811061061d578360405160208101916020825280518093526040820192602060408260051b8501019201905f945b8186106105865784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc085820301825283518051908183525f5b828110610608575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f855f85809860019a0101520116010195019201950194919091610579565b806020809284010151828287010152016105ba565b61062781836108d5565b51906040519160e81b602083015260038252604082019180831067ffffffffffffffff8411176106735760019260405261066182876108d5565b5261066c81866108d5565b500161054a565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b80606060208093880101520161053f565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b93505f610162565b91505f610152565b506040813d60401161072e575b8161070860409383610772565b810103126104de578051838116036104de57610729602061012592016107b3565b6100fd565b3d91506106fb565b9093506020813d60201161076a575b8161075260209383610772565b810103126104de57610763906107b3565b925f6100be565b3d9150610745565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761067357604052565b51908160020b82036104de57565b60081b908160020b9160030b82036103bb57565b9060020b9060020b02908160020b9182036103bb57565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008312176103bb57565b9060020b9060020b01907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008212627fffff8313176103bb57565b67ffffffffffffffff81116106735760051b60200190565b60020b9060020b9081156106b1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008214166103bb570590565b80518210156108e95760209160051b010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea2646970667358221220bf6d2f9e3d3ad550bae222133dd8ae1d9f472e8aea6bc34985ad8c0a985a201064736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "address": "0x791C524e079e460efDcD82F8a0378BE204aA131d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILynexPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tickRange",
          "type": "int24"
        }
      ],
      "name": "getTicks",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "ticks",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0120048ee5d0a64af2234f263ad051a512d91dc43bfd6008750854ab10884326",
  "receipt": {
    "to": null,
    "from": "0xa38038f9Ac2b3A7b4247804A46C787960E160Aed",
    "contractAddress": "0x791C524e079e460efDcD82F8a0378BE204aA131d",
    "transactionIndex": 1,
    "gasUsed": "770654",
    "logsBloom": "0x
    "blockHash": "0x25ffdcf2d93bce24706e5aad7098290fd232c2790c0f0ee78f2b20a854f4c2ec",
    "transactionHash": "0x0120048ee5d0a64af2234f263ad051a512d91dc43bfd6008750854ab10884326",
    "logs": [],
    "blockNumber": 15378235,
    "cumulativeGasUsed": "996990",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "786be42a68b4f12c073210c9d63c942e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILynexPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickRange\",\"type\":\"int24\"}],\"name\":\"getTicks\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"ticks\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract includes helper functions for the Lynex protocol.\",\"kind\":\"dev\",\"methods\":{\"getTicks(address,int24)\":{\"details\":\"The function returns an array of bytes each containing packed data about each tick in the specified range. The returned tick data includes the total liquidity, liquidity delta, outer fee growth for the two tokens, and the tick value itself. The tick range is centered around the current tick of the pool and spans tickRange*2. The tick range is constrained by the global min and max tick values. If there are no initialized ticks in the range, the function returns an empty array.\",\"params\":{\"pool\":\"The ILynexPool pool from which to fetch tick data.\",\"tickRange\":\"The range (either side of the current tick) within which to fetch tick data.\"},\"returns\":{\"ticks\":\"An array of bytes each containing packed data about each tick in the specified range.\"}}},\"stateVariables\":{\"_BASE_FEE\":{\"details\":\"Base fee for transactions.\"},\"_MAX_TICK\":{\"details\":\"Maximum allowed tick value.\"},\"_MIN_TICK\":{\"details\":\"Minimum allowed tick value.\"}},\"title\":\"LynexHelper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTicks(address,int24)\":{\"notice\":\"Fetches tick data for a specified range from an Lynex pool.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LynexHelper.sol\":\"LynexHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"},\"contracts/LynexHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"@uniswap/v3-core/contracts/libraries/BitMath.sol\\\";\\n\\ninterface ILynexPool {\\n    function globalState()\\n        external\\n        view\\n        returns (\\n            uint160 price,\\n            int24 tick,\\n            uint16 fee,\\n            uint16 timepointIndex,\\n            uint8 communityFeeToken0,\\n            uint8 communityFeeToken1,\\n            bool unlocked\\n        );\\n    function tickSpacing() external view returns(int24);\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityTotal,\\n            int128 liquidityDelta,\\n            uint256 outerFeeGrowth0Token,\\n            uint256 outerFeeGrowth1Token,\\n            int56 outerTickCumulative,\\n            uint160 outerSecondsPerLiquidity,\\n            uint32 outerSecondsSpent,\\n            bool initialized\\n        );\\n    function tickTable(int16 wordPosition) external view returns (uint256);\\n}\\n\\n/// @title LynexHelper\\n/// @dev This contract includes helper functions for the Lynex protocol.\\ncontract LynexHelper {\\n    /// @dev Minimum allowed tick value.\\n    int24 private constant _MIN_TICK = -887272;\\n\\n    /// @dev Maximum allowed tick value.\\n    int24 private constant _MAX_TICK = -_MIN_TICK;\\n\\n    /// @dev Base fee for transactions.\\n    uint16 internal constant _BASE_FEE = 100;\\n\\n    /// @dev The Tick struct represents the state of a tick.\\n    struct Tick {\\n        uint128 liquidityGross;\\n        int128 liquidityNet;\\n        uint256 feeGrowthOutside0X128;\\n        uint256 feeGrowthOutside1X128;\\n        int56 tickCumulativeOutside;\\n        uint160 secondsPerLiquidityOutsideX128;\\n        uint32 secondsOutside;\\n        int24 index; // tick index\\n    }\\n\\n/**\\n     * @notice Fetches tick data for a specified range from an Lynex pool.\\n     * @dev The function returns an array of bytes each containing packed data about each tick in the specified range.\\n     * The returned tick data includes the total liquidity, liquidity delta, outer fee growth for the two tokens, and\\n     * the tick value itself. The tick range is centered around the current tick of the pool and spans tickRange*2.\\n     * The tick range is constrained by the global min and max tick values.\\n     * If there are no initialized ticks in the range, the function returns an empty array.\\n     * @param pool The ILynexPool pool from which to fetch tick data.\\n     * @param tickRange The range (either side of the current tick) within which to fetch tick data.\\n     * @return ticks An array of bytes each containing packed data about each tick in the specified range.\\n     */\\n        function getTicks(ILynexPool pool, int24 tickRange) external view returns (bytes[] memory ticks) {\\n        (,int24 tick,,,,,) = pool.globalState();\\n        int24 tickSpacing = pool.tickSpacing();\\n\\n        tickRange *= tickSpacing;\\n        int24 fromTick = tick - tickRange;\\n        int24 toTick = tick + tickRange;\\n        if (fromTick < _MIN_TICK) {\\n            fromTick = _MIN_TICK;\\n        }\\n        if (toTick > _MAX_TICK) {\\n            toTick = _MAX_TICK;\\n        }\\n\\n        int24[] memory initTicks = new int24[](uint256(int256((toTick - fromTick + 1) / tickSpacing)));\\n\\n        uint256 counter = 0;\\n        int16 pos = int16((fromTick) >> 8);\\n        int16 endPos = int16((toTick) >> 8);\\n\\n        for (; pos <= endPos; pos++) {\\n            uint256 bm = pool.tickTable(pos);\\n            while (bm != 0) {\\n                uint8 bit = BitMath.leastSignificantBit(bm);\\n                bm ^= 1 << bit;\\n                int24 extractedTick = ((int24(pos) << 8) | int24(uint24(bit)));\\n                if (extractedTick >= fromTick && extractedTick <= toTick) {\\n                    initTicks[counter++] = extractedTick;\\n                }\\n            }\\n        }\\n\\n        ticks = new bytes[](counter);\\n        for (uint256 i = 0; i < counter; i++) {\\n            (\\n                uint128 liquidityTotal,\\n                int128 liquidityDelta,\\n                uint256 outerFeeGrowth0Token,\\n                uint256 outerFeeGrowth1Token\\n                , // int56 outerTickCumulative,\\n                , // uint160 outerSecondsPerLiquidity\\n                , // uint32 outerSecondsSpent\\n                , // bool initialized\\n            ) = pool.ticks(initTicks[i]);\\n\\n            ticks[i] = abi.encodePacked(\\n                liquidityTotal,\\n                liquidityDelta,\\n                outerFeeGrowth0Token,\\n                outerFeeGrowth1Token,\\n                // outerTickCumulative,\\n                // outerSecondsPerLiquidity,\\n                // outerSecondsSpent,\\n                initTicks[i]\\n            );\\n        }\\n    }\\n}\\n\\n\",\"keccak256\":\"0xbd92046334a4e74a582648cd7b5266ac583e83589ebac9e1bb112d4161167e27\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610d05908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c63c078e90c1461002857600080fd5b346107445760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610744576004359073ffffffffffffffffffffffffffffffffffffffff82168203610744576024358060020b809103610744577fe76c01e400000000000000000000000000000000000000000000000000000000825260e08260048173ffffffffffffffffffffffffffffffffffffffff87165afa91821561075157600092610b16575b50604051907fd0c93a7c00000000000000000000000000000000000000000000000000000000825260208260048173ffffffffffffffffffffffffffffffffffffffff88165afa91821561075157600092610ada575b508160020b02908160020b918203610352576101498284610c3a565b917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000818560020b0112627fffff828660020b01131761035257808460020b01937ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276188460020b12610ab2575b620d89e891829160020b0160020b13610aaa575b5060016101d58385610c3a565b60020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213176103525760020b908060020b15610a7b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160020b147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008314166103525760020b900560020b917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06102ae61029885610c74565b946102a66040519687610ba0565b808652610c74565b013660208501376000908260020b60081d60010b5b8160020b60081d60010b8160010b1361075d576040517fc677e3e00000000000000000000000000000000000000000000000000000000081528160010b600482015260208160248173ffffffffffffffffffffffffffffffffffffffff8b165afa9081156107515760009161071a575b50805b6103815750617fff8160010b1461035257600190810b016102c3565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8060ff6fffffffffffffffffffffffffffffffff82161561070e5750607f5b67ffffffffffffffff8316156107045760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc081831601116103525760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0015b63ffffffff8316156106fa5760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081831601116103525760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015b61ffff8316156106f05760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff081831601116103525760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0015b60ff8316156106e65760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff881831601116103525760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8015b600f8316156106dc5760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc81831601116103525760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc015b60038316156106d05760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8183160111610352577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff6001921601925b16610678575b600160ff83161b18908560020b60ff821660020b8460081b60020b1760020b12158061065a575b61060a575b5080610336565b93807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82146103525761065460ff6001859401971660020b8560081b60020b1760020b9189610c8c565b52610603565b508360020b60ff821660020b8460081b60020b1760020b13156105fe565b9060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81831601116103525760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01906105d7565b9160019060021c6105d1565b9160041c91610572565b9160081c91610517565b9160101c916104bc565b9160201c91610460565b9160401c91610402565b91508060801c916103a0565b90506020813d602011610749575b8161073560209383610ba0565b81010312610744575138610333565b600080fd5b3d9150610728565b6040513d6000823e3d90fd5b85838661076982610c74565b926107776040519485610ba0565b8284527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06107a484610c74565b0160005b818110610a6a57505060005b83811061088a578460405160208101916020825280518093526040820192602060408260051b8501019201906000945b8186106107f15784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0858203018252835180519081835260005b828110610875575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85600085809860019a01015201160101950192019501949190916107e4565b80602080928401015182828701015201610826565b6108948184610c8c565b5160020b90604051917ff30dba9300000000000000000000000000000000000000000000000000000000835260048301526101008260248173ffffffffffffffffffffffffffffffffffffffff87165afa918215610751576000906000936000916000916109bf575b506109088488610c8c565b5191604051957fffffffffffffffffffffffffffffffff00000000000000000000000000000000608095861b166020880152841b60308701526040860152606085015260e81b908301526063825260a082019180831067ffffffffffffffff8411176109905760019260405261097e8288610c8c565b526109898187610c8c565b50016107b4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9450505050610100823d61010011610a62575b816109e06101009383610ba0565b81010312610744578151916fffffffffffffffffffffffffffffffff831683036107445760208101519081600f0b82036107445760408101519360608201519160808101518060060b0361074457610a3a60a08201610be1565b5060c081015163ffffffff8116036107445760e0610a589101610c2d565b50919390896108fd565b3d91506109d2565b8060606020809389010152016107a8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b9250386101c8565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761893506101b4565b9091506020813d602011610b0e575b81610af660209383610ba0565b8101031261074457610b0790610c02565b903861012d565b3d9150610ae9565b90915060e0813d60e011610b98575b81610b3260e09383610ba0565b8101031261074457610b4381610be1565b50610b9060c0610b5560208401610c02565b92610b6260408201610c10565b50610b6f60608201610c10565b50610b7c60808201610c1f565b50610b8960a08201610c1f565b5001610c2d565b5090386100d7565b3d9150610b25565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761099057604052565b519073ffffffffffffffffffffffffffffffffffffffff8216820361074457565b51908160020b820361074457565b519061ffff8216820361074457565b519060ff8216820361074457565b5190811515820361074457565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083121761035257565b67ffffffffffffffff81116109905760051b60200190565b8051821015610ca05760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122046b7cc04e72d79f6c5fda140a51126697d5ad12115e476a294580379a17a48ae64736f6c63430008170033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c63c078e90c1461002857600080fd5b346107445760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610744576004359073ffffffffffffffffffffffffffffffffffffffff82168203610744576024358060020b809103610744577fe76c01e400000000000000000000000000000000000000000000000000000000825260e08260048173ffffffffffffffffffffffffffffffffffffffff87165afa91821561075157600092610b16575b50604051907fd0c93a7c00000000000000000000000000000000000000000000000000000000825260208260048173ffffffffffffffffffffffffffffffffffffffff88165afa91821561075157600092610ada575b508160020b02908160020b918203610352576101498284610c3a565b917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000818560020b0112627fffff828660020b01131761035257808460020b01937ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276188460020b12610ab2575b620d89e891829160020b0160020b13610aaa575b5060016101d58385610c3a565b60020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213176103525760020b908060020b15610a7b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160020b147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008314166103525760020b900560020b917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06102ae61029885610c74565b946102a66040519687610ba0565b808652610c74565b013660208501376000908260020b60081d60010b5b8160020b60081d60010b8160010b1361075d576040517fc677e3e00000000000000000000000000000000000000000000000000000000081528160010b600482015260208160248173ffffffffffffffffffffffffffffffffffffffff8b165afa9081156107515760009161071a575b50805b6103815750617fff8160010b1461035257600190810b016102c3565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8060ff6fffffffffffffffffffffffffffffffff82161561070e5750607f5b67ffffffffffffffff8316156107045760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc081831601116103525760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0015b63ffffffff8316156106fa5760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081831601116103525760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015b61ffff8316156106f05760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff081831601116103525760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0015b60ff8316156106e65760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff881831601116103525760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8015b600f8316156106dc5760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc81831601116103525760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc015b60038316156106d05760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8183160111610352577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff6001921601925b16610678575b600160ff83161b18908560020b60ff821660020b8460081b60020b1760020b12158061065a575b61060a575b5080610336565b93807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82146103525761065460ff6001859401971660020b8560081b60020b1760020b9189610c8c565b52610603565b508360020b60ff821660020b8460081b60020b1760020b13156105fe565b9060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81831601116103525760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01906105d7565b9160019060021c6105d1565b9160041c91610572565b9160081c91610517565b9160101c916104bc565b9160201c91610460565b9160401c91610402565b91508060801c916103a0565b90506020813d602011610749575b8161073560209383610ba0565b81010312610744575138610333565b600080fd5b3d9150610728565b6040513d6000823e3d90fd5b85838661076982610c74565b926107776040519485610ba0565b8284527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06107a484610c74565b0160005b818110610a6a57505060005b83811061088a578460405160208101916020825280518093526040820192602060408260051b8501019201906000945b8186106107f15784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0858203018252835180519081835260005b828110610875575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85600085809860019a01015201160101950192019501949190916107e4565b80602080928401015182828701015201610826565b6108948184610c8c565b5160020b90604051917ff30dba9300000000000000000000000000000000000000000000000000000000835260048301526101008260248173ffffffffffffffffffffffffffffffffffffffff87165afa918215610751576000906000936000916000916109bf575b506109088488610c8c565b5191604051957fffffffffffffffffffffffffffffffff00000000000000000000000000000000608095861b166020880152841b60308701526040860152606085015260e81b908301526063825260a082019180831067ffffffffffffffff8411176109905760019260405261097e8288610c8c565b526109898187610c8c565b50016107b4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9450505050610100823d61010011610a62575b816109e06101009383610ba0565b81010312610744578151916fffffffffffffffffffffffffffffffff831683036107445760208101519081600f0b82036107445760408101519360608201519160808101518060060b0361074457610a3a60a08201610be1565b5060c081015163ffffffff8116036107445760e0610a589101610c2d565b50919390896108fd565b3d91506109d2565b8060606020809389010152016107a8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b9250386101c8565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761893506101b4565b9091506020813d602011610b0e575b81610af660209383610ba0565b8101031261074457610b0790610c02565b903861012d565b3d9150610ae9565b90915060e0813d60e011610b98575b81610b3260e09383610ba0565b8101031261074457610b4381610be1565b50610b9060c0610b5560208401610c02565b92610b6260408201610c10565b50610b6f60608201610c10565b50610b7c60808201610c1f565b50610b8960a08201610c1f565b5001610c2d565b5090386100d7565b3d9150610b25565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761099057604052565b519073ffffffffffffffffffffffffffffffffffffffff8216820361074457565b51908160020b820361074457565b519061ffff8216820361074457565b519060ff8216820361074457565b5190811515820361074457565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083121761035257565b67ffffffffffffffff81116109905760051b60200190565b8051821015610ca05760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122046b7cc04e72d79f6c5fda140a51126697d5ad12115e476a294580379a17a48ae64736f6c63430008170033",
  "devdoc": {
    "details": "This contract includes helper functions for the Lynex protocol.",
    "kind": "dev",
    "methods": {
      "getTicks(address,int24)": {
        "details": "The function returns an array of bytes each containing packed data about each tick in the specified range. The returned tick data includes the total liquidity, liquidity delta, outer fee growth for the two tokens, and the tick value itself. The tick range is centered around the current tick of the pool and spans tickRange*2. The tick range is constrained by the global min and max tick values. If there are no initialized ticks in the range, the function returns an empty array.",
        "params": {
          "pool": "The ILynexPool pool from which to fetch tick data.",
          "tickRange": "The range (either side of the current tick) within which to fetch tick data."
        },
        "returns": {
          "ticks": "An array of bytes each containing packed data about each tick in the specified range."
        }
      }
    },
    "stateVariables": {
      "_BASE_FEE": {
        "details": "Base fee for transactions."
      },
      "_MAX_TICK": {
        "details": "Maximum allowed tick value."
      },
      "_MIN_TICK": {
        "details": "Minimum allowed tick value."
      }
    },
    "title": "LynexHelper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTicks(address,int24)": {
        "notice": "Fetches tick data for a specified range from an Lynex pool."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "address": "0xA3aF94A72f94ab3537cebf66eEf99B8705F0ACDD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV3",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tickRange",
          "type": "int24"
        }
      ],
      "name": "getTicks",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "ticks",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4c76d4b0a0962baae54b4d77ca77495a28c512b569e88d1996ecd3bf418451fe",
  "receipt": {
    "to": null,
    "from": "0x56E44874F624EbDE6efCc783eFD685f0FBDC6dcF",
    "contractAddress": "0xA3aF94A72f94ab3537cebf66eEf99B8705F0ACDD",
    "transactionIndex": 83,
    "gasUsed": "579339",
    "logsBloom": "0x
    "blockHash": "0xa77db02a47ba037dd1ebdd220726246b86a71649f773730c4a0f11a3c6833874",
    "transactionHash": "0x4c76d4b0a0962baae54b4d77ca77495a28c512b569e88d1996ecd3bf418451fe",
    "logs": [],
    "blockNumber": 18344490,
    "cumulativeGasUsed": "7428977",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "461cc73ac5486ac43d42bfacd8271641",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapV3\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickRange\",\"type\":\"int24\"}],\"name\":\"getTicks\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"ticks\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SolidlyV3Helper.sol\":\"SolidlyV3Helper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/SolidlyV3Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/IUniswapV3.sol\\\";\\n\\ncontract SolidlyV3Helper {\\n    int24 private constant _MIN_TICK = -887272;\\n    int24 private constant _MAX_TICK = -_MIN_TICK;\\n\\n    function getTicks(IUniswapV3 pool, int24 tickRange) external view returns (bytes[] memory ticks) {\\n        int24 tickSpacing = pool.tickSpacing();\\n        (,int24 tick) = pool.slot0();\\n\\n        int24 fromTick = tick - (tickSpacing * tickRange);\\n        int24 toTick = tick + (tickSpacing * tickRange);\\n        if (fromTick < _MIN_TICK) {\\n            fromTick = _MIN_TICK;\\n        }\\n        if (toTick > _MAX_TICK) {\\n            toTick = _MAX_TICK;\\n        }\\n\\n        int24[] memory initTicks = new int24[](uint256(int256(toTick - fromTick + 1) / int256(tickSpacing)));\\n\\n        uint counter = 0;\\n        for (int24 tickNum = (fromTick / tickSpacing * tickSpacing); tickNum <= (toTick / tickSpacing * tickSpacing); tickNum += (256 * tickSpacing)) {\\n            int16 pos = int16((tickNum / tickSpacing) >> 8);\\n            uint256 bm = pool.tickBitmap(pos);\\n\\n            while (bm != 0) {\\n                uint8 bit = _mostSignificantBit(bm);\\n                initTicks[counter] = (int24(pos) * 256 + int24(int256(uint256(bit)))) * tickSpacing;\\n                counter += 1;\\n                bm ^= 1 << bit;\\n            }\\n        }\\n\\n        ticks = new bytes[](counter);\\n        for (uint i = 0; i < counter; i++) {\\n             ticks[i] = abi.encodePacked(initTicks[i]);\\n        }\\n    }\\n\\n    // @dev Parameter `x` should be greater than 0, but it is never equal to 0 in this contract.\\n    function _mostSignificantBit(uint256 x) private pure returns (uint8 r) {\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n}\\n\",\"keccak256\":\"0x324b99803303529b51cf0aa24916ecc4e7e2ec6b52a38431a5807dc8ed80a69b\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n\\ninterface IUniswapV3 {\\n    function tickSpacing() external view returns (int24);\\n\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick\\n            // the rest is ignored\\n        );\\n\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    function liquidity() external view returns (uint128);\\n\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0xed4ee9be44e23541b40b2fde1d2b3db21f119220adaa63c438e1e96433944a8f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610990908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c63c078e90c1461002857600080fd5b346104f25760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104f25760043573ffffffffffffffffffffffffffffffffffffffff80821682036104f257602435918260020b83036104f2577fd0c93a7c0000000000000000000000000000000000000000000000000000000084526020846004818585165afa9384156104ff57600094610778575b506040517f3850c7bd0000000000000000000000000000000000000000000000000000000081526040816004818686165afa80156104ff57600090610730575b61012b915061012561011e6101188789610817565b8361082e565b9587610817565b90610868565b927ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618808260020b12610728575b50620d89e8808560020b13610720575b506001610175828661082e565b60020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213176103c75760020b928560020b80156106f1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147f80000000000000000000000000000000000000000000000000000000000000008614166103c757610247816102307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09388056108a2565b9661023e60405198896107b4565b058087526108a2565b013660208601376102638661025e816000956108ba565b610817565b6102718761025e81896108ba565b60020b8160020b1361050b5761028787826108ba565b60020b90604051917f5339c2960000000000000000000000000000000000000000000000000000000083528060081d60010b6004840152602083602481878a165afa80156104ff5789936000916104c5575b5090815b6103025750509061025e816102f86102719461012583610803565b9350505050610263565b600095935090807001000000000000000000000000000000008110156104b8575b6801000000000000000081101561049c575b640100000000811015610480575b62010000811015610464575b610100811015610448575b601081101561042c575b600481101561040f575b600211156103f6575b61039a8a61025e61038d8560081d60010b610803565b60ff8a1660020b90610868565b6103a4858a610917565b9060020b9052600184018094116103c757600160ff8b9597161b188091906102dd565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9460ff80600181841601116103c7571660010194610377565b60021c9560ff9081600281831601116103c757166002019561036e565b60041c9560ff80600481841601116103c7571660040195610364565b60081c9560ff80600881841601116103c757166008019561035a565b601090811c9660ff90818381831601116103c75716019561034f565b60201c9560ff80602081841601116103c7571660200195610343565b60401c9560ff80604081841601116103c7571660400195610335565b506080955080861c610323565b9350506020833d6020116104f7575b816104e1602093836107b4565b810103126104f257889251386102d9565b600080fd5b3d91506104d4565b6040513d6000823e3d90fd5b8285610516826108a2565b9061052460405192836107b4565b8282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610551846108a2565b0160005b8181106106e057505060005b838110610637578260405160208101916020825280518093526040820192602060408260051b8501019201906000945b81861061059e5784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0858203018252835180519081835260005b828110610622575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85600085809860019a0101520116010195019201950194919091610591565b806020809284010151828287010152016105d3565b6106418183610917565b516040519060e81b6020820152600381526040810181811067ffffffffffffffff8211176106b1576040526106768285610917565b526106818184610917565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146103c757600101610561565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b806060602080938701015201610555565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b935038610168565b905038610158565b506040813d604011610770575b8161074a604093836107b4565b810103126104f2578051838116036104f25761076b602061012b92016107f5565b610103565b3d915061073d565b9093506020813d6020116107ac575b81610794602093836107b4565b810103126104f2576107a5906107f5565b92386100c3565b3d9150610787565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176106b157604052565b51908160020b82036104f257565b60081b908160020b9160030b82036103c757565b9060020b9060020b02908160020b9182036103c757565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008312176103c757565b9060020b9060020b01907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008212627fffff8313176103c757565b67ffffffffffffffff81116106b15760051b60200190565b60020b9060020b9081156106f1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008214166103c7570590565b805182101561092b5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122069d9c70f2419bab74e02c450612fcb481fb83f1593e7c3504bad23fa21aca7f064736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c63c078e90c1461002857600080fd5b346104f25760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104f25760043573ffffffffffffffffffffffffffffffffffffffff80821682036104f257602435918260020b83036104f2577fd0c93a7c0000000000000000000000000000000000000000000000000000000084526020846004818585165afa9384156104ff57600094610778575b506040517f3850c7bd0000000000000000000000000000000000000000000000000000000081526040816004818686165afa80156104ff57600090610730575b61012b915061012561011e6101188789610817565b8361082e565b9587610817565b90610868565b927ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618808260020b12610728575b50620d89e8808560020b13610720575b506001610175828661082e565b60020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213176103c75760020b928560020b80156106f1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81147f80000000000000000000000000000000000000000000000000000000000000008614166103c757610247816102307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09388056108a2565b9661023e60405198896107b4565b058087526108a2565b013660208601376102638661025e816000956108ba565b610817565b6102718761025e81896108ba565b60020b8160020b1361050b5761028787826108ba565b60020b90604051917f5339c2960000000000000000000000000000000000000000000000000000000083528060081d60010b6004840152602083602481878a165afa80156104ff5789936000916104c5575b5090815b6103025750509061025e816102f86102719461012583610803565b9350505050610263565b600095935090807001000000000000000000000000000000008110156104b8575b6801000000000000000081101561049c575b640100000000811015610480575b62010000811015610464575b610100811015610448575b601081101561042c575b600481101561040f575b600211156103f6575b61039a8a61025e61038d8560081d60010b610803565b60ff8a1660020b90610868565b6103a4858a610917565b9060020b9052600184018094116103c757600160ff8b9597161b188091906102dd565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9460ff80600181841601116103c7571660010194610377565b60021c9560ff9081600281831601116103c757166002019561036e565b60041c9560ff80600481841601116103c7571660040195610364565b60081c9560ff80600881841601116103c757166008019561035a565b601090811c9660ff90818381831601116103c75716019561034f565b60201c9560ff80602081841601116103c7571660200195610343565b60401c9560ff80604081841601116103c7571660400195610335565b506080955080861c610323565b9350506020833d6020116104f7575b816104e1602093836107b4565b810103126104f257889251386102d9565b600080fd5b3d91506104d4565b6040513d6000823e3d90fd5b8285610516826108a2565b9061052460405192836107b4565b8282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610551846108a2565b0160005b8181106106e057505060005b838110610637578260405160208101916020825280518093526040820192602060408260051b8501019201906000945b81861061059e5784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0858203018252835180519081835260005b828110610622575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85600085809860019a0101520116010195019201950194919091610591565b806020809284010151828287010152016105d3565b6106418183610917565b516040519060e81b6020820152600381526040810181811067ffffffffffffffff8211176106b1576040526106768285610917565b526106818184610917565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146103c757600101610561565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b806060602080938701015201610555565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b935038610168565b905038610158565b506040813d604011610770575b8161074a604093836107b4565b810103126104f2578051838116036104f25761076b602061012b92016107f5565b610103565b3d915061073d565b9093506020813d6020116107ac575b81610794602093836107b4565b810103126104f2576107a5906107f5565b92386100c3565b3d9150610787565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176106b157604052565b51908160020b82036104f257565b60081b908160020b9160030b82036103c757565b9060020b9060020b02908160020b9182036103c757565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008312176103c757565b9060020b9060020b01907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008212627fffff8313176103c757565b67ffffffffffffffff81116106b15760051b60200190565b60020b9060020b9081156106f1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008214166103c7570590565b805182101561092b5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122069d9c70f2419bab74e02c450612fcb481fb83f1593e7c3504bad23fa21aca7f064736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
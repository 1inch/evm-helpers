{
  "address": "0x10bc6D97050B87250132c9a5836FE952cE1366c7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPoolManager",
          "name": "_poolManager",
          "type": "address"
        },
        {
          "internalType": "contract IStateView",
          "name": "_stateView",
          "type": "address"
        },
        {
          "internalType": "contract IPosManager",
          "name": "_posManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "int24",
          "name": "tickRange",
          "type": "int24"
        }
      ],
      "name": "getTicks",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "ticks",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcec588e3f0c44f16eed7a3de513ceca1f839059db6e87d94e11d78487dec9cc9",
  "receipt": {
    "to": null,
    "from": "0x56E44874F624EbDE6efCc783eFD685f0FBDC6dcF",
    "contractAddress": "0x10bc6D97050B87250132c9a5836FE952cE1366c7",
    "transactionIndex": 90,
    "gasUsed": "807807",
    "logsBloom": "0x
    "blockHash": "0x9b83ba9dc71ba362234167b2397cdc3b702ddd495c71bd8def1d50e481ae8e45",
    "transactionHash": "0xcec588e3f0c44f16eed7a3de513ceca1f839059db6e87d94e11d78487dec9cc9",
    "logs": [],
    "blockNumber": 21767230,
    "cumulativeGasUsed": "7486202",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x000000000004444c5dc75cB358380D2e3dE08A90",
    "0x7ffe42c4a5deea5b0fec41c94c136cf115597227",
    "0xbd216513d74c8cf14cf4747e6aaa6420ff64ee9e"
  ],
  "numDeployments": 1,
  "solcInputHash": "168fa4b421bb46ba5ac9c7d3f826da57",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"internalType\":\"contract IStateView\",\"name\":\"_stateView\",\"type\":\"address\"},{\"internalType\":\"contract IPosManager\",\"name\":\"_posManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"int24\",\"name\":\"tickRange\",\"type\":\"int24\"}],\"name\":\"getTicks\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"ticks\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniV4Helper.sol\":\"UniV4Helper\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x82e425066110aac05ed8a9fc90f9ee85142b6f434769447e49d4438a8d9fcd82\",\"license\":\"GPL-2.0-or-later\"},\"contracts/UniV4Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"@uniswap/v3-core/contracts/libraries/BitMath.sol\\\";\\n\\ninterface IPosManager {\\n    function poolKeys(bytes25 poolId) external  view returns (address currency0, address currency1, uint24 fee, int24 tickSpacing);\\n}\\n\\ninterface IStateView {\\n        function getSlot0(bytes32 poolId) external view returns (uint160 sqrtPriceX96, int24 tick, uint24 protocolFee, uint24 lpFee);\\n        function getTickBitmap(bytes32 poolId, int16 tick) external view returns (uint256 tickBitmap);\\n        function getTickInfo(bytes32 poolId, int24 tick) external view returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128\\n        );\\n}\\n\\ninterface IPoolManager {\\n    function extsload(bytes32 startSlot, uint256 nSlots) external view returns (bytes32[] memory);\\n}\\n\\ncontract UniV4Helper {\\n    uint256 private constant _TICKS_OFFSET = 4;\\n    bytes32 private constant _POOLS_SLOT = bytes32(uint256(6));\\n\\n    int24 private constant _MIN_TICK = -887272;\\n    int24 private constant _MAX_TICK = -_MIN_TICK;\\n\\n    IPoolManager private immutable _POOL_MANAGER;\\n    IStateView private immutable _STATE_VIEW;\\n    IPosManager private immutable _POS_MANAGER;\\n\\n    constructor(IPoolManager _poolManager, IStateView _stateView, IPosManager _posManager) {\\n        _POOL_MANAGER = _poolManager;\\n        _STATE_VIEW = _stateView;\\n        _POS_MANAGER = _posManager;\\n    }\\n\\n    function _getTickInfoSlot(bytes32 poolId, int24 tick) internal pure returns (bytes32) {\\n        bytes32 stateSlot = keccak256(abi.encodePacked(poolId, _POOLS_SLOT));\\n        bytes32 ticksMappingSlot = bytes32(uint256(stateSlot) + _TICKS_OFFSET);\\n        return keccak256(abi.encodePacked(int256(tick), ticksMappingSlot));\\n    }\\n\\n    function getTicks(bytes32 poolId, int24 tickRange) external view returns (bytes[] memory ticks) {\\n        (,,,int24 tickSpacing) = _POS_MANAGER.poolKeys(bytes25(poolId));\\n        (,int24 tick,,) = _STATE_VIEW.getSlot0(poolId);\\n\\n        tickRange *= tickSpacing;\\n        int24 fromTick = tick - tickRange;\\n        int24 toTick = tick + tickRange;\\n        if (fromTick < _MIN_TICK) {\\n            fromTick = _MIN_TICK;\\n        }\\n        if (toTick > _MAX_TICK) {\\n            toTick = _MAX_TICK;\\n        }\\n\\n        int24[] memory initTicks = new int24[](uint256(int256((toTick - fromTick + 1) / tickSpacing)));\\n\\n        uint256 counter = 0;\\n        int16 pos = int16((fromTick / tickSpacing) >> 8);\\n        int16 endPos = int16((toTick / tickSpacing) >> 8);\\n\\n        for (; pos <= endPos; pos++) {\\n            uint256 bm = _STATE_VIEW.getTickBitmap(poolId, pos);\\n\\n            while (bm != 0) {\\n                uint8 bit = BitMath.leastSignificantBit(bm);\\n                bm ^= 1 << bit;\\n                int24 extractedTick = ((int24(pos) << 8) | int24(uint24(bit))) * tickSpacing;\\n                if (extractedTick >= fromTick && extractedTick <= toTick) {\\n                    initTicks[counter++] = extractedTick;\\n                }\\n            }\\n        }\\n\\n        ticks = new bytes[](counter);\\n        for (uint256 i = 0; i < counter; i++) {\\n            bytes32 slot = _getTickInfoSlot(poolId, initTicks[i]);\\n            bytes32[] memory data = _POOL_MANAGER.extsload(slot, 3);\\n            ticks[i] = abi.encodePacked(data[0], data[1], data[2], initTicks[i]);\\n        }\\n        return(ticks);\\n    }\\n}\\n\\n\",\"keccak256\":\"0x3e399b9cdcc3499c91fa907d8527153b037dca733ca34d694555821f72f760ed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0346100a857601f610e6338819003918201601f19168301916001600160401b038311848410176100ac578084926060946040528339810103126100a85780516001600160a01b03919082811681036100a85760208201519183831683036100a8576040015192831683036100a85760805260a05260c052604051610da290816100c1823960805181610910015260a0518181816101470152610301015260c0518160cb0152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f3560e01c63f75033fb14610025575f80fd5b346107255760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610725576024358060020b8103610725577f86b6be7d0000000000000000000000000000000000000000000000000000000082527fffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000060043516600483015260808260248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa918215610731575f92610b66575b506040517fc815641c000000000000000000000000000000000000000000000000000000008152600435600482015260808160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107315783905f92610aeb575b506101849192610c65565b9061018f8282610c7c565b9160020b9060020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000627fffff8183128184131761034d57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618808660020b12610ae3575b50620d89e8809160020b13610adb575b5060016102128585610c7c565b60020b019182129082131761034d578361022b91610cb6565b60020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061027161025b83610d40565b926102696040519485610be5565b808452610d40565b013660208301375f916102848585610cb6565b60020b60081d60010b946102988183610cb6565b60020b60081d60010b955b868160010b1361073c576040517f1c7ccb4c00000000000000000000000000000000000000000000000000000000815260043560048201528160010b602482015260208160448173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115610731575f916106fb575b50805b61037a575060010b617fff811461034d576001016102a3565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8060ff6fffffffffffffffffffffffffffffffff8216156106ef5750607f5b67ffffffffffffffff8216156106e55760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0818316011161034d5760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0015b63ffffffff8216156106db5760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818316011161034d5760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015b61ffff8216156106d15760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0818316011161034d5760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0015b60ff8216156106c75760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8818316011161034d5760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8015b600f8216156106bd5760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc818316011161034d5760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc015b8460038316156106b0575060ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe818316011161034d5760017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff87931601925b16610658575b60ff6105f19216926001841b189260020b8460081b60020b17610c65565b60020b8760020b8112158061064b575b61060d575b5080610334565b86907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821461034d5761064560018493019888610d58565b52610606565b508460020b811315610601565b5060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818316011161034d5760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01836105d3565b909160019060021c6105cd565b9060041c9061056b565b9060081c90610510565b9060101c906104b5565b9060201c90610459565b9060401c906103fb565b90508160801c90610399565b90506020813d602011610729575b8161071660209383610be5565b8101031261072557515f610331565b5f80fd5b3d9150610709565b6040513d5f823e3d90fd5b838561074781610d40565b916107556040519384610be5565b8183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061078283610d40565b015f5b818110610aca5750505f5b828110610863578360405160208101916020825280518093526040820192602060408260051b8501019201905f945b8186106107cc5784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc085820301825283518051908183525f5b82811061084e575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f855f85809860019a01015201160101950192019501949190916107bf565b80602080928401015182828701015201610800565b61086d8183610d58565b5160020b60405160208101906004358252600660408201526040815261089281610bc9565b5190206004810180911161034d5760405190602082019283526040820152604081526108bd81610bc9565b51902090604051917f35fd631a0000000000000000000000000000000000000000000000000000000083526004830152600360248301525f8260448173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa918215610731575f92610a2c575b508151156109ff576020820151918051600110156109ff576040810151908051600210156109ff57606080910151906109798487610d58565b5192604051956020870152604086015284015260e81b60808301526063825260a082019180831067ffffffffffffffff8411176109d2576001926040526109c08287610d58565b526109cb8186610d58565b5001610790565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b9091503d805f833e610a3e8183610be5565b8101906020818303126107255780519067ffffffffffffffff821161072557019080601f8301121561072557815190610a7682610d40565b92610a846040519485610be5565b828452602084019160208460051b830101116107255760208101915b60208460051b8301018310610aba57505050509085610940565b8251815260209283019201610aa0565b806060602080938801015201610785565b92505f610205565b94505f6101f5565b9150506080813d608011610b5e575b81610b0760809383610be5565b8101031261072557805173ffffffffffffffffffffffffffffffffffffffff811603610725578281610b576060610b4360206101849601610c57565b92610b5060408201610c47565b5001610c47565b5091610179565b3d9150610afa565b9091506080813d608011610bc1575b81610b8260809383610be5565b8101031261072557606081610b99610bba93610c26565b50610ba660208201610c26565b50610bb360408201610c47565b5001610c57565b905f6100fb565b3d9150610b75565b6060810190811067ffffffffffffffff8211176109d257604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109d257604052565b519073ffffffffffffffffffffffffffffffffffffffff8216820361072557565b519062ffffff8216820361072557565b51908160020b820361072557565b9060020b9060020b02908160020b91820361034d57565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083121761034d57565b60020b9060020b908115610d13577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000082141661034d570590565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b67ffffffffffffffff81116109d25760051b60200190565b80518210156109ff5760209160051b01019056fea264697066735822122060f7e5f75a7b51d66da0218cabf34806e1b21df285280e9e2e31f90eb4d3515064736f6c63430008170033",
  "deployedBytecode": "0x6080806040526004361015610012575f80fd5b5f3560e01c63f75033fb14610025575f80fd5b346107255760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610725576024358060020b8103610725577f86b6be7d0000000000000000000000000000000000000000000000000000000082527fffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000060043516600483015260808260248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa918215610731575f92610b66575b506040517fc815641c000000000000000000000000000000000000000000000000000000008152600435600482015260808160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107315783905f92610aeb575b506101849192610c65565b9061018f8282610c7c565b9160020b9060020b017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000627fffff8183128184131761034d57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618808660020b12610ae3575b50620d89e8809160020b13610adb575b5060016102128585610c7c565b60020b019182129082131761034d578361022b91610cb6565b60020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061027161025b83610d40565b926102696040519485610be5565b808452610d40565b013660208301375f916102848585610cb6565b60020b60081d60010b946102988183610cb6565b60020b60081d60010b955b868160010b1361073c576040517f1c7ccb4c00000000000000000000000000000000000000000000000000000000815260043560048201528160010b602482015260208160448173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115610731575f916106fb575b50805b61037a575060010b617fff811461034d576001016102a3565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8060ff6fffffffffffffffffffffffffffffffff8216156106ef5750607f5b67ffffffffffffffff8216156106e55760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0818316011161034d5760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0015b63ffffffff8216156106db5760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818316011161034d5760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015b61ffff8216156106d15760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0818316011161034d5760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0015b60ff8216156106c75760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8818316011161034d5760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8015b600f8216156106bd5760ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc818316011161034d5760ff167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc015b8460038316156106b0575060ff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe818316011161034d5760017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff87931601925b16610658575b60ff6105f19216926001841b189260020b8460081b60020b17610c65565b60020b8760020b8112158061064b575b61060d575b5080610334565b86907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821461034d5761064560018493019888610d58565b52610606565b508460020b811315610601565b5060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818316011161034d5760ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01836105d3565b909160019060021c6105cd565b9060041c9061056b565b9060081c90610510565b9060101c906104b5565b9060201c90610459565b9060401c906103fb565b90508160801c90610399565b90506020813d602011610729575b8161071660209383610be5565b8101031261072557515f610331565b5f80fd5b3d9150610709565b6040513d5f823e3d90fd5b838561074781610d40565b916107556040519384610be5565b8183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061078283610d40565b015f5b818110610aca5750505f5b828110610863578360405160208101916020825280518093526040820192602060408260051b8501019201905f945b8186106107cc5784840385f35b9091927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc085820301825283518051908183525f5b82811061084e575050602080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f855f85809860019a01015201160101950192019501949190916107bf565b80602080928401015182828701015201610800565b61086d8183610d58565b5160020b60405160208101906004358252600660408201526040815261089281610bc9565b5190206004810180911161034d5760405190602082019283526040820152604081526108bd81610bc9565b51902090604051917f35fd631a0000000000000000000000000000000000000000000000000000000083526004830152600360248301525f8260448173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa918215610731575f92610a2c575b508151156109ff576020820151918051600110156109ff576040810151908051600210156109ff57606080910151906109798487610d58565b5192604051956020870152604086015284015260e81b60808301526063825260a082019180831067ffffffffffffffff8411176109d2576001926040526109c08287610d58565b526109cb8186610d58565b5001610790565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b9091503d805f833e610a3e8183610be5565b8101906020818303126107255780519067ffffffffffffffff821161072557019080601f8301121561072557815190610a7682610d40565b92610a846040519485610be5565b828452602084019160208460051b830101116107255760208101915b60208460051b8301018310610aba57505050509085610940565b8251815260209283019201610aa0565b806060602080938801015201610785565b92505f610205565b94505f6101f5565b9150506080813d608011610b5e575b81610b0760809383610be5565b8101031261072557805173ffffffffffffffffffffffffffffffffffffffff811603610725578281610b576060610b4360206101849601610c57565b92610b5060408201610c47565b5001610c47565b5091610179565b3d9150610afa565b9091506080813d608011610bc1575b81610b8260809383610be5565b8101031261072557606081610b99610bba93610c26565b50610ba660208201610c26565b50610bb360408201610c47565b5001610c57565b905f6100fb565b3d9150610b75565b6060810190811067ffffffffffffffff8211176109d257604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109d257604052565b519073ffffffffffffffffffffffffffffffffffffffff8216820361072557565b519062ffffff8216820361072557565b51908160020b820361072557565b9060020b9060020b02908160020b91820361034d57565b9060020b9060020b0390627fffff82137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000083121761034d57565b60020b9060020b908115610d13577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000082141661034d570590565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b67ffffffffffffffff81116109d25760051b60200190565b80518210156109ff5760209160051b01019056fea264697066735822122060f7e5f75a7b51d66da0218cabf34806e1b21df285280e9e2e31f90eb4d3515064736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}